{
  "name": "dark-mode/vite/theme-provider.tsx.stub",
  "files": [
    {
      "name": "dark-mode/vite/theme-provider.tsx.stub",
      "content": "import { createContext, use, useEffect, useState } from \"react\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nfunction ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"iut\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== \"undefined\") {\n      return (localStorage?.getItem(storageKey) as Theme) || defaultTheme\n    }\n    return defaultTheme\n  })\n\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      const root = window.document.documentElement\n\n      root.classList.remove(\"light\", \"dark\")\n\n      if (theme === \"system\") {\n        const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n          ? \"dark\"\n          : \"light\"\n        root.classList.add(systemTheme)\n        return\n      }\n\n      root.classList.add(theme)\n    }\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      if (typeof window !== \"undefined\") {\n        localStorage.setItem(storageKey, theme)\n      }\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext {...props} value={value}>\n      {children}\n    </ThemeProviderContext>\n  )\n}\n\nconst useTheme = () => {\n  const context = use(ThemeProviderContext)\n  if (context === undefined) throw new Error(\"useTheme must be used within a ThemeProvider\")\n  return context\n}\n\nexport { ThemeProvider, useTheme, type Theme, type ThemeProviderProps, type ThemeProviderState }\n"
    }
  ]
}