{
  "name": "dialog",
  "files": [
    {
      "name": "dialog.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconX } from \"justd-icons\"\nimport type { ButtonProps as ButtonPrimitiveProps, DialogProps, HeadingProps } from \"react-aria-components\"\nimport {\n  Button as ButtonPrimitive,\n  Dialog as DialogPrimitive,\n  Heading,\n  OverlayTriggerStateContext\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Button, type ButtonProps } from \"./button\"\nimport { useMediaQuery } from \"./primitive\"\n\nconst dialogStyles = tv({\n  slots: {\n    root: [\n      \"dlc relative flex max-h-[inherit] [&::-webkit-scrollbar]:size-0.5 [scrollbar-width:thin] flex-col overflow-hidden outline-hidden\",\n      \"sm:[&:not(:has([data-slot=dialog-body]))]:px-6 sm:[&:has([data-slot=dialog-body])_[data-slot=dialog-header]]:px-6 sm:[&:has([data-slot=dialog-body])_[data-slot=dialog-footer]]:px-6\",\n      \"[&:not(:has([data-slot=dialog-body]))]:px-4 [&:has([data-slot=dialog-body])_[data-slot=dialog-header]]:px-4 [&:has([data-slot=dialog-body])_[data-slot=dialog-footer]]:px-4\"\n    ],\n    header: \"relative flex flex-col pb-3 pt-4 sm:pt-6\",\n    description: \"text-sm block text-muted-fg mt-0.5 sm:mt-1\",\n    body: [\n      \"flex flex-1 flex-col gap-2 overflow-auto px-4 sm:px-6 py-1\",\n      \"max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding)-var(--dialog-header-height,0px)-var(--dialog-footer-height,0px))]\"\n    ],\n    footer: \"mt-auto flex flex-col-reverse justify-between gap-3 pb-4 sm:pb-6 pt-4 sm:flex-row\",\n    closeIndicator:\n      \"close absolute right-1 top-1 sm:right-2 sm:top-2 data-focused:outline-hidden data-focused:bg-secondary data-hovered:bg-secondary grid place-content-center rounded-xl sm:rounded-md data-focus-visible:ring-1 data-focus-visible:ring-primary size-8 sm:size-7 z-50\"\n  }\n})\n\nconst { root, header, description, body, footer, closeIndicator } = dialogStyles()\n\nconst Dialog = ({ role, className, ...props }: DialogProps) => {\n  return <DialogPrimitive role={role ?? \"dialog\"} className={root({ className })} {...props} />\n}\n\nconst Trigger = (props: ButtonPrimitiveProps) => <ButtonPrimitive slot=\"close\" {...props} />\n\ntype DialogHeaderProps = React.HTMLAttributes<HTMLDivElement> & {\n  title?: string\n  description?: string\n}\n\nconst Header = ({ className, ...props }: DialogHeaderProps) => {\n  const headerRef = React.useRef<HTMLHeadingElement>(null)\n\n  React.useEffect(() => {\n    const header = headerRef.current\n    if (!header) {\n      return\n    }\n\n    const observer = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        header.parentElement?.style.setProperty(\"--dialog-header-height\", `${entry.target.clientHeight}px`)\n      }\n    })\n\n    observer.observe(header)\n    return () => observer.unobserve(header)\n  }, [])\n\n  return (\n    <div data-slot=\"dialog-header\" ref={headerRef} className={header({ className })}>\n      {props.title && <Title>{props.title}</Title>}\n      {props.description && <Description>{props.description}</Description>}\n      {!props.title && typeof props.children === \"string\" ? <Title {...props} /> : props.children}\n    </div>\n  )\n}\n\nconst titleStyles = tv({\n  base: \"flex flex-1 items-center text-fg\",\n  variants: {\n    level: {\n      1: \"font-semibold text-lg sm:text-xl\",\n      2: \"font-semibold text-lg sm:text-xl\",\n      3: \"font-semibold text-base sm:text-lg\",\n      4: \"font-semibold text-base\"\n    }\n  }\n})\n\ninterface TitleProps extends Omit<HeadingProps, \"level\"> {\n  level?: 1 | 2 | 3 | 4\n}\n\nconst Title = ({ level = 2, className, ...props }: TitleProps) => (\n  <Heading slot=\"title\" level={level} className={titleStyles({ level, className })} {...props} />\n)\n\nconst Description = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={description({ className })} {...props} />\n)\n\nconst Body = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div data-slot=\"dialog-body\" className={body({ className })} {...props} />\n)\n\nconst Footer = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n  const footerRef = React.useRef<HTMLDivElement>(null)\n\n  React.useEffect(() => {\n    const footer = footerRef.current\n\n    if (!footer) {\n      return\n    }\n\n    const observer = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        footer.parentElement?.style.setProperty(\"--dialog-footer-height\", `${entry.target.clientHeight}px`)\n      }\n    })\n\n    observer.observe(footer)\n    return () => {\n      observer.unobserve(footer)\n    }\n  }, [])\n  return <div ref={footerRef} data-slot=\"dialog-footer\" className={footer({ className })} {...props} />\n}\n\nconst Close = ({ className, appearance = \"outline\", ...props }: ButtonProps) => {\n  const state = React.useContext(OverlayTriggerStateContext)!\n  return <Button className={className} appearance={appearance} onPress={() => state.close()} {...props} />\n}\n\ninterface CloseButtonIndicatorProps {\n  className?: string\n  isDismissable?: boolean | undefined\n}\n\nconst CloseIndicator = ({ className, ...props }: CloseButtonIndicatorProps) => {\n  const isMobile = useMediaQuery(\"(max-width: 600px)\")\n  const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n  React.useEffect(() => {\n    if (isMobile && buttonRef.current) {\n      buttonRef.current.focus()\n    }\n  }, [isMobile])\n  return props.isDismissable ? (\n    <ButtonPrimitive\n      ref={buttonRef}\n      {...(isMobile ? { autoFocus: true } : {})}\n      aria-label=\"Close\"\n      slot=\"close\"\n      className={closeIndicator({ className })}\n    >\n      <IconX className=\"size-4\" />\n    </ButtonPrimitive>\n  ) : null\n}\n\nDialog.Trigger = Trigger\nDialog.Header = Header\nDialog.Title = Title\nDialog.Description = Description\nDialog.Body = Body\nDialog.Footer = Footer\nDialog.Close = Close\nDialog.CloseIndicator = CloseIndicator\n\nexport { Dialog }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/dialog.tsx"
}