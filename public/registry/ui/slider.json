{
  "name": "slider",
  "files": [
    {
      "name": "slider.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { useSlotId } from \"@react-aria/utils\"\nimport type {\n  LabelProps,\n  SliderOutputProps,\n  SliderProps as SliderPrimitiveProps,\n  SliderThumbProps,\n  SliderTrackProps,\n  TextProps\n} from \"react-aria-components\"\nimport {\n  composeRenderProps,\n  Slider as SliderPrimitive,\n  SliderOutput,\n  SliderStateContext,\n  SliderThumb,\n  SliderTrack,\n  TextContext\n} from \"react-aria-components\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { Description, Label } from \"./field\"\n\nconst sliderStyles = tv({\n  slots: {\n    root: \"flex disabled:opacity-50 flex-col gap-2 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-56 data-[orientation=vertical]:items-center\",\n    track: [\n      \"relative group/track rounded-full bg-zinc-200 dark:bg-zinc-800 cursor-pointer disabled:cursor-default disabled:bg-bg-disabled\",\n      \"grow data-[orientation=vertical]:flex-1 data-[orientation=vertical]:w-1.5 data-[orientation=horizontal]:w-full data-[orientation=horizontal]:h-1.5\"\n    ],\n    filler: [\n      \"rounded-full bg-primary group-data-disabled/track:bg-bg-disabled\",\n      \"pointer-events-none absolute group-data-[orientation=horizontal]/top-0 group-data-[orientation=vertical]/track:w-full group-data-[orientation=vertical]/track:bottom-0 group-data-[orientation=horizontal]/track:h-full\"\n    ],\n    thumb: [\n      \"size-[1.15rem] outline-hidden data-focused:ring-4 border border-zinc-200 data-focused:ring-primary/20 data-focused:border-primary data-focused:outline-hidden forced-colors:outline-[Highlight]\",\n      \"rounded-full bg-white transition-[width,height]\",\n      \"absolute left-[50%] top-[50%] block -translate-x-1/2! -translate-y-1/2!\",\n      \"data-[orientation=vertical]:w-2 data-[orientation=horizontal]:h-2\",\n      \"data-dragging:cursor-grabbing data-dragging:size-[1.30rem] data-dragging:border-primary\",\n      \"data-disabled:bg-bg-disabled data-disabled:border data-disabled:border-bg\"\n    ],\n    valueLabel: \"text-muted-fg tabular-nums text-sm\"\n  }\n})\n\nconst { track, filler, thumb, root, valueLabel } = sliderStyles()\n\ntype SliderRootProps = SliderPrimitiveProps\n\nconst Root = (props: SliderPrimitiveProps) => {\n  const descriptionId = useSlotId()\n  return (\n    <TextContext.Provider value={{ slots: { description: { id: descriptionId } } }}>\n      <SliderPrimitive\n        data-slot=\"root\"\n        aria-describedby={descriptionId}\n        {...props}\n        className={composeRenderProps(props.className, (className) => root({ className }))}\n      />\n    </TextContext.Provider>\n  )\n}\n\ninterface SliderProps extends SliderRootProps, VariantProps<typeof sliderStyles> {\n  label?: LabelProps[\"children\"]\n  description?: TextProps[\"children\"]\n  showValue?: boolean | ((value: number[]) => string)\n}\n\nconst Slider = ({ label, description, showValue = true, ...props }: SliderProps) => (\n  <Root {...props}>\n    <div className=\"flex items-center justify-between gap-2\">\n      {label && <Label>{label}</Label>}\n      {(showValue || typeof showValue === \"function\") && (\n        <Output>{({ state }) => (typeof showValue === \"function\" ? showValue(state.values) : undefined)}</Output>\n      )}\n    </div>\n    <Controls />\n    {description && <Description>{description}</Description>}\n  </Root>\n)\n\nconst Controls = (props: SliderTrackProps) => {\n  const state = React.useContext(SliderStateContext)\n  return (\n    <Track {...props}>\n      <Filler />\n      {state?.values.map((_, i) => <Thumb key={i} index={i} />)}\n    </Track>\n  )\n}\n\nconst Track = (props: SliderTrackProps) => {\n  return <SliderTrack {...props} className={composeRenderProps(props.className, (className) => track({ className }))} />\n}\n\nconst Filler = (props: React.HTMLAttributes<HTMLDivElement>) => {\n  const state = React.useContext(SliderStateContext)\n  const { orientation, getThumbPercent, values } = state || {}\n\n  const getStyle = () => {\n    const percent0 = getThumbPercent ? getThumbPercent(0) * 100 : 0\n    const percent1 = getThumbPercent ? getThumbPercent(1) * 100 : 0\n\n    if (values?.length === 1) {\n      return orientation === \"horizontal\" ? { width: `${percent0}%` } : { height: `${percent0}%` }\n    }\n\n    return orientation === \"horizontal\"\n      ? { left: `${percent0}%`, width: `${Math.abs(percent0 - percent1)}%` }\n      : { bottom: `${percent0}%`, height: `${Math.abs(percent0 - percent1)}%` }\n  }\n\n  return <div {...props} style={getStyle()} className={filler({ className: props.className })} />\n}\n\nconst Thumb = ({ className, ...props }: SliderThumbProps) => {\n  return <SliderThumb {...props} className={composeRenderProps(className, (className) => thumb({ className }))} />\n}\n\nconst Output = ({ className, ...props }: SliderOutputProps) => {\n  return (\n    <SliderOutput {...props} className={composeRenderProps(className, (className) => valueLabel({ className }))}>\n      {composeRenderProps(\n        props.children,\n        (children, { state }) => children ?? state.values.map((_, i) => state.getThumbValueLabel(i)).join(\" - \")\n      )}\n    </SliderOutput>\n  )\n}\n\nSlider.Controls = Controls\nSlider.Filler = Filler\nSlider.Root = Root\nSlider.Thumb = Thumb\nSlider.Track = Track\nSlider.Output = Output\nexport { Slider }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/slider.tsx"
}