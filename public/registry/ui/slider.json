{
  "name": "slider",
  "files": [
    {
      "name": "slider.tsx",
      "content": "\"use client\"\n\nimport React, { useState } from \"react\"\n\nimport type { SliderProps as SliderPrimitiveProps, SliderThumbProps } from \"react-aria-components\"\nimport {\n  SliderOutput,\n  Slider as SliderPrimitive,\n  SliderStateContext,\n  SliderThumb,\n  SliderTrack,\n  type SliderTrackProps,\n  composeRenderProps,\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Description, Label } from \"./field\"\nimport { Tooltip } from \"./tooltip\"\n\nconst sliderStyles = tv({\n  base: \"relative group flex flex-col touch-none select-none\",\n  variants: {\n    orientation: {\n      horizontal: \"w-full min-w-56 gap-y-2\",\n      vertical: \"h-full gap-y-2 w-1.5 min-h-56 items-center\",\n    },\n    isDisabled: {\n      true: \"data-disabled:opacity-50\",\n    },\n  },\n})\n\ninterface SliderProps extends SliderPrimitiveProps {\n  output?: \"inline\" | \"tooltip\" | \"none\"\n  label?: string\n  description?: string\n  thumbLabels?: string[]\n}\n\nconst Slider = ({ output = \"inline\", orientation = \"horizontal\", className, ...props }: SliderProps) => {\n  const showTooltip = output === \"tooltip\"\n  const [showTooltipState, setShowTooltipState] = useState(false)\n\n  const onFocusChange = () => {\n    if (showTooltip) {\n      setShowTooltipState(true)\n    }\n  }\n\n  const onHoverStart = () => {\n    if (showTooltip) {\n      setShowTooltipState(true)\n    }\n  }\n\n  const onFocusEnd = React.useCallback(() => {\n    setShowTooltipState(false)\n  }, [])\n\n  React.useEffect(() => {\n    if (showTooltip) {\n      window.addEventListener(\"pointerup\", onFocusEnd)\n      return () => {\n        window.removeEventListener(\"pointerup\", onFocusEnd)\n      }\n    }\n  }, [showTooltip, onFocusEnd])\n\n  const renderThumb = (value: number) => {\n    const thumb = (\n      <Thumb\n        index={value}\n        aria-label={props.thumbLabels?.[value]}\n        onFocusChange={onFocusChange}\n        onHoverStart={onHoverStart}\n      />\n    )\n\n    if (!showTooltip) return thumb\n\n    return (\n      <Tooltip delay={0} isOpen={showTooltipState} onOpenChange={setShowTooltipState}>\n        {thumb}\n        <Tooltip.Content\n          showArrow={false}\n          offset={orientation === \"horizontal\" ? 8 : -140}\n          crossOffset={orientation === \"horizontal\" ? -85 : 0}\n          className=\"py-1 px-1.5 text-xs min-w-6\"\n          placement={orientation === \"vertical\" ? \"right\" : \"top\"}\n        >\n          <SliderOutput />\n        </Tooltip.Content>\n      </Tooltip>\n    )\n  }\n\n  return (\n    <SliderPrimitive\n      orientation={orientation}\n      className={composeRenderProps(className, (className, renderProps) => sliderStyles({ ...renderProps, className }))}\n      {...props}\n    >\n      <div className=\"flex text-fg\">\n        {props.label && <Label>{props.label}</Label>}\n        {output === \"inline\" && (\n          <SliderOutput className=\"text-muted-fg text-sm tabular-nums data-[orientation=vertical]:mx-auto data-[orientation=horizontal]:ml-auto\">\n            {({ state }) => state.values.map((_, i) => state.getThumbValueLabel(i)).join(\" â€“ \")}\n          </SliderOutput>\n        )}\n      </div>\n      <Track>\n        {({ state }) => (\n          <>\n            <Filler />\n            {state.values.map((_, i) => (\n              <React.Fragment key={i}>{renderThumb(i)}</React.Fragment>\n            ))}\n          </>\n        )}\n      </Track>\n      {props.description && <Description>{props.description}</Description>}\n    </SliderPrimitive>\n  )\n}\n\nconst controlsStyles = tv({\n  slots: {\n    filler: [\n      \"rounded-full bg-primary group-data-disabled/track:opacity-60\",\n      \"pointer-events-none absolute group-data-[orientation=horizontal]/top-0 group-data-[orientation=vertical]/track:w-full group-data-[orientation=vertical]/track:bottom-0 group-data-[orientation=horizontal]/track:h-full\",\n    ],\n    track: [\n      \"[--slider:color-mix(in_oklab,var(--color-muted)_90%,black_10%)] dark:[--slider:color-mix(in_oklab,var(--color-muted)_90%,white_10%)]\",\n      \"relative group/track rounded-full bg-(--slider) cursor-pointer data-disabled:cursor-default data-disabled:opacity-60\",\n      \"grow group-data-[orientation=vertical]:flex-1 group-data-[orientation=vertical]:w-1.5 group-data-[orientation=horizontal]:w-full group-data-[orientation=horizontal]:h-1.5\",\n    ],\n  },\n})\n\nconst { track, filler } = controlsStyles()\n\nconst Track = (props: SliderTrackProps) => {\n  return <SliderTrack {...props} className={composeRenderProps(props.className, (className) => track({ className }))} />\n}\n\nconst Filler = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n  const state = React.useContext(SliderStateContext)\n  const { orientation, getThumbPercent, values } = state || {}\n\n  const getStyle = () => {\n    const percent0 = getThumbPercent ? getThumbPercent(0) * 100 : 0\n    const percent1 = getThumbPercent ? getThumbPercent(1) * 100 : 0\n\n    if (values?.length === 1) {\n      return orientation === \"horizontal\" ? { width: `${percent0}%` } : { height: `${percent0}%` }\n    }\n\n    return orientation === \"horizontal\"\n      ? { left: `${percent0}%`, width: `${Math.abs(percent0 - percent1)}%` }\n      : { bottom: `${percent0}%`, height: `${Math.abs(percent0 - percent1)}%` }\n  }\n\n  return <div {...props} style={getStyle()} className={filler({ className })} />\n}\n\nconst thumbStyles = tv({\n  base: [\n    \"size-[1.25rem] left-[50%] top-[50%] rounded-full border border-fg/10 bg-white transition-[width,height] outline-hidden ring-black\",\n  ],\n  variants: {\n    isFocusVisible: {\n      true: \"ring-primary/20 border-primary outline-hidden\",\n    },\n    isDragging: {\n      true: \"cursor-grabbing size-[1.35rem] border-primary\",\n    },\n    isDisabled: {\n      true: \"opacity-50 forced-colors:border-[GrayText]\",\n    },\n  },\n})\nconst Thumb = ({ className, ...props }: SliderThumbProps) => {\n  return (\n    <SliderThumb\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) => thumbStyles({ ...renderProps, className }))}\n    />\n  )\n}\n\nexport { Slider }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/slider.tsx"
}