{
  "name": "sidebar",
  "files": [
    {
      "name": "sidebar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconChevronDown, IconChevronRight, IconHamburger, IconSidebarFill } from \"justd-icons\"\nimport type { DisclosureProps, LinkProps } from \"react-aria-components\"\nimport { composeRenderProps, Disclosure, DisclosurePanel, Link } from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Button, ButtonPrimitive } from \"./button\"\nimport { cn, useMediaQuery } from \"./primitive\"\nimport { Sheet } from \"./sheet\"\nimport { Tooltip } from \"./tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  isOpenOnMobile: boolean\n  setIsOpenOnMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a Sidebar.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    isOpen?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(({ style, defaultOpen = true, isOpen: openProp, onOpenChange: setOpenProp, className, children, ...props }, ref) => {\n  const isMobile = useMediaQuery(\"(max-width: 768px)\")\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  const [internalOpenState, setInternalOpenState] = React.useState(defaultOpen)\n  const open = openProp ?? internalOpenState\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        setInternalOpenState(openState)\n      }\n\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      isOpenOnMobile: openMobile,\n      setIsOpenOnMobile: setOpenMobile,\n      toggleSidebar\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <div\n        style={\n          {\n            \"--sidebar-width\": SIDEBAR_WIDTH,\n            ...style\n          } as React.CSSProperties\n        }\n        className={cn(\n          \"group/sidebar-wrapper flex min-h-svh w-full text-fg dark:has-data-[intent=inset]:has-data-[intent=inset]:bg-bg\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      >\n        {children}\n      </div>\n    </SidebarContext.Provider>\n  )\n})\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst SidebarInset = ({ className, ...props }: React.ComponentProps<\"main\">) => {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn([\n        [\n          \"relative **:data-[slot=navbar-nav]:shadow-none flex min-h-svh max-w-full flex-1 flex-col bg-bg\",\n          \"md:peer-data-[intent=inset]:ml-0 md:peer-data-[intent=inset]:bg-sidebar-bg md:peer-data-[intent=inset]:text-sidebar-fg md:peer-data-[intent=inset]:rounded-xl\",\n          \"peer-data-[intent=inset]:overflow-hidden peer-data-[intent=inset]:border peer-data-[intent=inset]:min-h-[calc(100svh-calc(var(--spacing)*4))] md:peer-data-[intent=inset]:my-2 md:peer-data-[intent=inset]:mr-2\",\n          \"peer-data-[intent=floating]:**:data-[slot=sidebar-nav]:bg-bg peer-data-[intent=floating]:**:data-[slot=sidebar-nav]:border-none\"\n        ],\n        className\n      ])}\n      {...props}\n    />\n  )\n}\n\nconst Sidebar = ({\n  side = \"left\",\n  intent = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  intent?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"dock\" | \"none\"\n}) => {\n  const { isMobile, state, isOpenOnMobile, setIsOpenOnMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div className={cn(\"flex h-full w-(--sidebar-width) flex-col bg-secondary text-fg \", className)} {...props}>\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet isOpen={isOpenOnMobile} onOpenChange={setIsOpenOnMobile} {...props}>\n        <Sheet.Content\n          aria-label=\"Sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          classNames={{\n            content: \"bg-sidebar-bg [&>button]:hidden\"\n          }}\n          isStack={intent === \"floating\"}\n          side={side}\n        >\n          <Sheet.Body className=\"p-0 sm:p-0\">{children}</Sheet.Body>\n        </Sheet.Content>\n      </Sheet>\n    )\n  }\n  return (\n    <div\n      className=\"group peer hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-intent={intent}\n      data-side={side}\n    >\n      <div\n        className={cn(\n          \"duration-200 relative h-svh w-(--sidebar-width) bg-transparent transition-[width] ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          intent === \"floating\" || intent === \"inset\"\n            ? \"group-data-[collapsible=dock]:w-[calc(var(--sidebar-width-icon)+calc(var(--spacing)*4))]\"\n            : \"group-data-[collapsible=dock]:w-(--sidebar-width-icon)\"\n        )}\n      />\n      <div\n        className={cn(\n          \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          intent === \"floating\" || intent === \"inset\"\n            ? \"p-2 group-data-[collapsible=dock]:w-[calc(var(--sidebar-width-icon)+calc(var(--spacing)*4)+2px)]\"\n            : \"group-data-[collapsible=dock]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-slot=\"sidebar\"\n          className={cn(\n            \"flex h-full w-full flex-col bg-sidebar-bg text-sidebar-fg group-data-[intent=inset]:bg-transparent group-data-[intent=floating]:rounded-lg group-data-[intent=floating]:border group-data-[intent=floating]:border-border\",\n            intent === \"inset\" || state === \"collapsed\"\n              ? \"**:data-[slot=sidebar-header]:border-transparent **:data-[slot=sidebar-footer]:border-transparent\"\n              : \"**:data-[slot=sidebar-header]:border-b **:data-[slot=sidebar-footer]:border-t\"\n          )}\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst itemStyles = tv({\n  base: [\n    \"group/sidebar-item grid cursor-pointer *:data-[slot=icon]:size-4 col-span-full *:data-[slot=icon]:shrink-0 items-center *:data-[slot=icon]:text-muted-fg relative rounded-lg lg:text-sm leading-6\",\n    \"forced-colors:text-[MenuLink] text-fg\",\n    \"grid-cols-subgrid *:data-[slot=icon]:mr-2 px-2.5 py-1.5\"\n  ],\n  variants: {\n    collapsed: {\n      true: \"flex\"\n    },\n    isFocused: {\n      true: \"outline-hidden\"\n    },\n    isFocusVisible: {\n      true: \"bg-sidebar-accent-bg text-sidebar-accent-fg data-[slot=description]:text-sidebar-accent-fg/70\"\n    },\n    isHovered: {\n      true: [\n        \"bg-sidebar-accent-bg text-sidebar-accent-fg *:data-[focus-visible]:**:data-[slot=description]:text-sidebar-accent-fg/70 **:[.text-muted-fg]:text-sidebar-accent-fg/80\"\n      ]\n    },\n    isCurrent: {\n      true: [\n        \"bg-sidebar-primary-bg text-sidebar-primary-fg\",\n        \"**:data-[slot=icon]:text-sidebar-primary-fg [&_.text-muted-fg]:text-sidebar-primary-fg/80\",\n        \"**:data-[slot=sidebar-badge]:bg-sidebar-primary-fg/20 **:data-[slot=sidebar-badge]:ring-sidebar-primary-fg/30\"\n      ]\n    },\n    isDisabled: {\n      true: \"cursor-default\"\n    }\n  }\n})\n\ninterface SidebarItemProps extends LinkProps {\n  icon?: React.ComponentType<React.SVGProps<SVGSVGElement>>\n  badge?: string | number | undefined\n  isCurrent?: boolean\n}\n\nconst SidebarItem = ({ isCurrent, children, className, icon: Icon, ...props }: SidebarItemProps) => {\n  const { state, isMobile } = React.useContext(SidebarContext)!\n  return state === \"collapsed\" && !isMobile ? (\n    <Tooltip closeDelay={0} delay={0}>\n      <Link\n        className={cn(\n          \"col-span-full rounded-lg size-9 grid place-content-center\",\n          \"data-hovered:bg-sidebar-accent-bg data-hovered:text-sidebar-accent-fg text-sidebar-accent-fg\",\n          \"data-current:bg-sidebar-primary-bg data-current:text-sidebar-primary-fg\",\n          \"data-focused:outline-hidden\"\n        )}\n        {...props}\n      >\n        {(values) => (\n          <>\n            {Icon && <Icon data-slot=\"icon\" />}\n            <span className=\"sr-only\">{typeof children === \"function\" ? children(values) : children}</span>\n          </>\n        )}\n      </Link>\n      <Tooltip.Content intent=\"inverse\" showArrow={false} placement=\"right\">\n        {children as string}\n      </Tooltip.Content>\n    </Tooltip>\n  ) : (\n    <Link\n      isDisabled={isCurrent}\n      data-slot=\"sidebar-item\"\n      aria-current={isCurrent ? \"page\" : undefined}\n      className={composeRenderProps(className, (className, renderProps) =>\n        itemStyles({\n          ...renderProps,\n          collapsed: state === \"collapsed\",\n          isCurrent,\n          className\n        })\n      )}\n      {...props}\n    >\n      {(values) => (\n        <>\n          {Icon && <Icon data-slot=\"icon\" />}\n          <span className=\"col-start-2 group-data-[collapsible=dock]:hidden\">\n            {typeof children === \"function\" ? children(values) : children}\n            {props.badge && (\n              <div\n                data-slot=\"sidebar-badge\"\n                className=\"h-[1.30rem] px-1 rounded-md text-muted-fg text-xs font-medium ring-1 ring-fg/20 grid place-content-center w-auto inset-y-1/2 -translate-y-1/2 absolute right-1.5 bg-fg/[0.02] dark:bg-fg/10\"\n              >\n                {props.badge}\n              </div>\n            )}\n          </span>\n        </>\n      )}\n    </Link>\n  )\n}\n\nconst SidebarContent = ({ className, ...props }: React.ComponentProps<\"div\">) => {\n  const { state } = useSidebar()\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      className={cn([\n        \"flex min-h-0 flex-1 flex-col overflow-auto group-data-[collapsible=dock]:items-center group-data-[collapsible=dock]:overflow-hidden\",\n        state === \"collapsed\" ? \"gap-y-6\" : \"gap-y-2\",\n        className\n      ])}\n      {...props}\n    />\n  )\n}\n\nconst navStyles = tv({\n  base: \"md:w-full justify-between sm:justify-start h-[3.57rem] px-4 border-b flex items-center gap-x-2\",\n  variants: {\n    isSticky: {\n      true: \"sticky top-0 z-40\"\n    }\n  }\n})\n\ninterface SidebarNavProps extends React.ComponentProps<\"nav\"> {\n  isSticky?: boolean\n}\n\nconst SidebarNav = ({ isSticky = false, className, ...props }: SidebarNavProps) => {\n  return <nav data-slot=\"sidebar-nav\" {...props} className={navStyles({ isSticky, className })} />\n}\n\nconst SidebarTrigger = ({ className, onPress, ...props }: React.ComponentProps<typeof Button>) => {\n  const { toggleSidebar } = useSidebar()\n  return (\n    <Button\n      aria-label={props[\"aria-label\"] || \"Toggle Sidebar\"}\n      data-slot=\"sidebar-trigger\"\n      appearance=\"plain\"\n      size=\"square-petite\"\n      className={className}\n      onPress={(event) => {\n        onPress?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <IconSidebarFill className=\"md:inline hidden\" />\n      <IconHamburger className=\"md:hidden inline\" />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nconst header = tv({\n  base: \"flex flex-col mb-2\",\n  variants: {\n    collapsed: {\n      false: \"px-5 py-[calc(var(--spacing)*3.9)]\",\n      true: \"px-5 py-4 md:p-0 md:size-9 mt-1 group-data-[intent=floating]:mt-2 md:rounded-lg md:hover:bg-muted md:mx-auto md:justify-center md:items-center\"\n    }\n  }\n})\n\nconst SidebarHeader = ({ className, ...props }: React.HtmlHTMLAttributes<HTMLDivElement>) => {\n  const { state } = React.useContext(SidebarContext)!\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      {...props}\n      className={header({ collapsed: state === \"collapsed\", className })}\n      {...props}\n    />\n  )\n}\n\nconst footer = tv({\n  base: \"flex flex-col mt-auto\",\n  variants: {\n    collapsed: {\n      false: [\n        \"p-2 **:data-[slot=menu-trigger]:*:data-[slot=avatar]:-ml-1.5 **:data-[slot=menu-trigger]:w-full data-hovered:**:data-[slot=menu-trigger]:bg-muted **:data-[slot=menu-trigger]:justify-start **:data-[slot=menu-trigger]:flex **:data-[slot=menu-trigger]:items-center\"\n      ],\n      true: \"size-12 p-1 **:data-[slot=menu-trigger]:size-9 justify-center items-center\"\n    }\n  }\n})\n\nconst SidebarFooter = ({ className, ...props }: React.HtmlHTMLAttributes<HTMLDivElement>) => {\n  const { state } = React.useContext(SidebarContext)!\n  return (\n    <div\n      {...props}\n      data-slot=\"sidebar-footer\"\n      className={footer({ collapsed: state === \"collapsed\", className })}\n      {...props}\n    />\n  )\n}\n\ninterface CollapsibleProps extends DisclosureProps {\n  children: React.ReactNode\n  title?: string\n  collapsible?: boolean\n  defaultExpanded?: boolean\n  icon?: React.ComponentType<React.SVGProps<SVGSVGElement>>\n}\n\nconst SidebarSection = ({ title, className, collapsible, icon: Icon, defaultExpanded, ...props }: CollapsibleProps) => {\n  const { state, isMobile } = useSidebar()\n\n  const isExpanded = state === \"collapsed\" || (title ? (collapsible ? (defaultExpanded ?? true) : true) : true)\n  return (\n    <Disclosure\n      data-slot=\"sidebar-section\"\n      className={cn(\n        \"col-span-full px-2\",\n        state === \"collapsed\" && [title && \"px-0\", !isMobile && \"px-0\"],\n        state === \"expanded\" && [\n          \"**:data-[slot=sidebar-section]:px-0\",\n          title && [\n            Icon\n              ? \"mt-0.5 **:data-[slot=sidebar-section-panel]:px-6 [&_[data-slot=sidebar-section-panel]_[data-slot=icon]]:-ml-0.5\"\n              : \"my-2.5\"\n          ]\n        ],\n        className\n      )}\n      defaultExpanded={isExpanded}\n      {...props}\n    >\n      {({ isExpanded }) => (\n        <>\n          {typeof title === \"string\" && (\n            <span className=\"group-data-[collapsible=dock]:opacity-0 group-data-[collapsible=dock]:hidden\">\n              {collapsible ? (\n                <ButtonPrimitive\n                  slot=\"trigger\"\n                  className={({ isHovered }) =>\n                    cn(\n                      \"w-full data-focused:outline-hidden flex leading-6 items-center justify-between *:data-[slot=chevron]:size-6 *:data-[slot=chevron]:duration-200\",\n                      Icon\n                        ? \"text-fg lg:text-sm py-2 lg:py-1.5 px-3 **:data-[slot=chevron]::text-muted-fg has-[[data-slot=chevron]]:pr-0.5\"\n                        : \"text-sm text-muted-fg py-2 px-3 has-[[data-slot=chevron]]:pr-0\",\n                      isHovered &&\n                        Icon &&\n                        \"bg-sidebar-accent-bg text-sidebar-accent-fg **:[.text-muted-fg]:text-sidebar-accent-fg/80 *:data-[slot=icon]:shrink-0 items-center *:data-[slot=icon]:text-muted-fg relative rounded-lg lg:text-sm leading-6\",\n                      isExpanded && !Icon && \"*:data-[slot=chevron]:rotate-180\",\n                      isExpanded && Icon && \"*:data-[slot=chevron]:rotate-90\"\n                    )\n                  }\n                >\n                  <span className=\"flex items-center *:data-[slot=icon]:text-muted-fg *:data-[slot=icon]:mr-2\">\n                    {Icon && <Icon data-slot=\"icon\" />}\n                    {title}\n                  </span>\n                  {Icon && <IconChevronRight data-slot=\"chevron\" />}\n                  {!Icon && <IconChevronDown data-slot=\"chevron\" />}\n                </ButtonPrimitive>\n              ) : (\n                <h4 className=\"text-sm text-muted-fg px-3 py-2\">{title}</h4>\n              )}\n            </span>\n          )}\n          <DisclosurePanel>\n            <div\n              data-slot=\"sidebar-section-panel\"\n              className={cn(\n                \"grid gap-y-0.5 group-data-[collapsible=dock]:place-content-center\",\n                state === \"collapsed\"\n                  ? \"group-data-[collapsible=dock]:place-content-center\"\n                  : \"grid-cols-[auto_1fr] [&_[data-slot=sidebar-item]:first-child]:mt-0.5\"\n              )}\n            >\n              {props.children}\n            </div>\n          </DisclosurePanel>\n        </>\n      )}\n    </Disclosure>\n  )\n}\n\nconst SidebarRail = ({ className, ...props }: React.ComponentProps<\"button\">) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px]data-hovered:after:bg-transparent group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-secondary\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarProvider,\n  SidebarInset,\n  SidebarHeader,\n  SidebarNav,\n  SidebarContent,\n  SidebarFooter,\n  SidebarItem,\n  SidebarSection,\n  SidebarRail,\n  SidebarTrigger,\n  useSidebar\n}\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/sidebar.tsx"
}