{
  "name": "sidebar",
  "files": [
    {
      "name": "sidebar.tsx",
      "content": "\"use client\"\n\nimport { createContext, use, useCallback, useEffect, useMemo, useState } from \"react\"\n\nimport { IconChevronLgLeft, IconHamburger, IconSidebarFill } from \"justd-icons\"\nimport type { LinkRenderProps } from \"react-aria-components\"\nimport {\n  Disclosure,\n  DisclosureGroup,\n  DisclosurePanel,\n  Header,\n  Heading,\n  Link,\n  Text,\n  Button as Trigger,\n  composeRenderProps,\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\nimport { Badge, Button, Separator, Sheet, Tooltip, cn, useMediaQuery } from \"ui\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  isOpenOnMobile: boolean\n  setIsOpenOnMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = createContext<SidebarContextProps | null>(null)\n\nconst useSidebar = () => {\n  const context = use(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a Sidebar.\")\n  }\n\n  return context\n}\n\ninterface SidebarProviderProps extends React.ComponentProps<\"div\"> {\n  defaultOpen?: boolean\n  isOpen?: boolean\n  onOpenChange?: (open: boolean) => void\n}\n\nconst SidebarProvider = ({\n  defaultOpen = true,\n  isOpen: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  children,\n  ref,\n  ...props\n}: SidebarProviderProps) => {\n  const isMobile = useMediaQuery(\"(max-width: 768px)\")\n  const [openMobile, setOpenMobile] = useState(false)\n\n  const [internalOpenState, setInternalOpenState] = useState(defaultOpen)\n  const open = openProp ?? internalOpenState\n  const setOpen = useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        setInternalOpenState(openState)\n      }\n\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open],\n  )\n\n  const toggleSidebar = useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen])\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      isOpenOnMobile: openMobile,\n      setIsOpenOnMobile: setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, toggleSidebar],\n  )\n\n  return (\n    <SidebarContext value={contextValue}>\n      <div\n        className={cn(\n          \"**:data-[slot=icon]:shrink-0\",\n          \"[--sidebar-width:17rem] [--sidebar-width-mobile:18rem] [--sidebar-width-dock:3.25rem]\",\n          \"[--sidebar-border:color-mix(in_oklch,var(--color-sidebar)_25%,black_6%)]\",\n          \"dark:[--sidebar-border:color-mix(in_oklch,var(--color-sidebar)_55%,white_10%)]\",\n          \"[--sidebar-accent:color-mix(in_oklab,var(--color-sidebar)_95%,black_5%)]\",\n          \"dark:[--sidebar-accent:color-mix(in_oklab,var(--color-sidebar)90%,white_10%)]\",\n          \"flex min-h-svh w-full text-sidebar-fg\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      >\n        {children}\n      </div>\n    </SidebarContext>\n  )\n}\n\nconst gap = tv({\n  base: [\n    \"w-(--sidebar-width) group-data-[sidebar-collapsible=hidden]/sidebar-container:w-0\",\n    \"duration-200 relative h-svh bg-transparent transition-[width] ease-linear\",\n    \"group-data-[sidebar-side=right]/sidebar-container:rotate-180\",\n  ],\n  variants: {\n    intent: {\n      default: \"group-data-[sidebar-collapsible=dock]/sidebar-container:w-(--sidebar-width-dock)\",\n      fleet: \"group-data-[sidebar-collapsible=dock]/sidebar-container:w-(--sidebar-width-dock)\",\n      float:\n        \"group-data-[sidebar-collapsible=dock]/sidebar-container:w-[calc(var(--sidebar-width-dock)+theme(spacing.4))]\",\n      inset:\n        \"group-data-[sidebar-collapsible=dock]/sidebar-container:w-[calc(var(--sidebar-width-dock)+theme(spacing.2))]\",\n    },\n  },\n})\n\nconst sidebar = tv({\n  base: [\n    \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] ease-linear md:flex\",\n    \"bg-bg min-h-screen\",\n    \"**:data-[slot=disclosure]:border-0 **:data-[slot=disclosure]:px-2\",\n    \"[--bg-sidebar-container:(--color-sidebar)]\",\n  ],\n  variants: {\n    side: {\n      left: \"left-0 group-data-[sidebar-collapsible=hidden]/sidebar-container:left-[calc(var(--sidebar-width)*-1)]\",\n      right: \"right-0 group-data-[sidebar-collapsible=hidden]/sidebar-container:right-[calc(var(--sidebar-width)*-1)]\",\n    },\n    intent: {\n      float: \"p-2 group-data-[sidebar-collapsible=dock]/sidebar-container:w-[calc(var+theme(spacing.4)+2px)]\",\n      inset: [\n        \"p-2 group-data-[sidebar-collapsible=dock]/sidebar-container:w-[calc(var(--sidebar-width-dock)+theme(spacing.2)+2px)]\",\n        \"[--bg-sidebar-container:(--color-bg)]\",\n      ],\n      fleet: [\n        \"group-data-[sidebar-collapsible=dock]/sidebar-container:w-(--sidebar-width-dock)\",\n        \"**:data-sidebar-section:px-0 **:data-sidebar-disclosure:px-0 **:data-sidebar-section:gap-y-0 **:data-sidebar-disclosure:gap-y-0\",\n        \"group-data-[sidebar-side=right]/sidebar-container:border-l group-data-[sidebar-side=left]/sidebar-container:border-r\",\n      ],\n      default: [\n        \"group-data-[sidebar-collapsible=dock]/sidebar-container:w-(--sidebar-width-dock) group-data-[sidebar-side=left]/sidebar-container:border-(--sidebar-border)\",\n        \"group-data-[sidebar-side=right]/sidebar-container:border-l group-data-[sidebar-side=left]/sidebar-container:border-r\",\n      ],\n    },\n  },\n})\n\ninterface SidebarProps extends React.ComponentProps<\"div\"> {\n  intent?: \"default\" | \"float\" | \"inset\" | \"fleet\"\n  collapsible?: \"hidden\" | \"dock\" | \"none\"\n  side?: \"left\" | \"right\"\n  closeButton?: boolean\n}\n\nconst Sidebar = ({\n  closeButton = true,\n  collapsible = \"hidden\",\n  side = \"left\",\n  intent = \"default\",\n  className,\n  ...props\n}: SidebarProps) => {\n  const { isMobile, state, isOpenOnMobile, setIsOpenOnMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-sidebar-intent={intent}\n        data-sidebar-collapsible=\"none\"\n        className={cn(\"flex h-full peer w-(--sidebar-width) flex-col border-r bg-sidebar text-sidebar-fg \", className)}\n        {...props}\n      />\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet isOpen={isOpenOnMobile} onOpenChange={setIsOpenOnMobile} {...props}>\n        <Sheet.Content\n          closeButton={closeButton}\n          aria-label=\"Sidebar\"\n          data-sidebar-intent=\"default\"\n          classNames={{\n            content: \"bg-sidebar w-(--sidebar-width-mobile) text-sidebar-fg [&>button]:hidden\",\n          }}\n          isStack={intent === \"float\"}\n          side={side}\n        >\n          <Sheet.Body className=\"px-0\">{props.children}</Sheet.Body>\n        </Sheet.Content>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      data-sidebar-state={state}\n      data-sidebar-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-sidebar-intent={intent}\n      data-sidebar-side={side}\n      className=\"hidden md:block group/sidebar-container peer text-sidebar-fg\"\n      {...props}\n    >\n      <div className={gap({ intent })} />\n      <div\n        className={sidebar({\n          side,\n          intent,\n          className,\n        })}\n        {...props}\n      >\n        <div\n          data-sidebar=\"default\"\n          className=\"flex h-full group-data-[sidebar-intent=inset]/sidebar-container:bg-bg bg-sidebar text-sidebar-fg w-full flex-col group-data-[sidebar-intent=float]/sidebar-container:rounded-lg group-data-[sidebar-intent=float]/sidebar-container:border group-data-[sidebar-intent=float]/sidebar-container:border-(--sidebar-border) group-data-[sidebar-intent=float]/sidebar-container:shadow-xs\"\n        >\n          {props.children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst header = tv({\n  base: \"flex flex-col mb-2 **:data-[slot=sidebar-label-mask]:hidden\",\n  variants: {\n    collapsed: {\n      false: \"px-4 py-[calc(var(--spacing)*4)]\",\n      true: \"p-5 mt-2 md:p-0 md:size-9 group-data-[sidebar-intent=float]/sidebar-container:mt-2 md:rounded-lg md:hover:bg-(--sidebar-accent) md:mx-auto md:justify-center md:items-center\",\n    },\n  },\n})\n\nconst SidebarHeader = ({ className, ref, ...props }: React.ComponentProps<\"div\">) => {\n  const { state } = use(SidebarContext)!\n  return (\n    <div\n      ref={ref}\n      data-sidebar-header=\"true\"\n      className={header({ collapsed: state === \"collapsed\", className })}\n      {...props}\n    />\n  )\n}\n\nconst footer = tv({\n  base: [\n    \"flex flex-col mt-auto p-2\",\n    \"in-data-[sidebar-intent=fleet]:mt-0 in-data-[sidebar-intent=fleet]:p-0\",\n    \"in-data-[sidebar-intent=fleet]:**:data-[slot=menu-trigger]:rounded-none\",\n    \"**:data-[slot=menu-trigger]:relative **:data-[slot=menu-trigger]:overflow-hidden\",\n    \"**:data-[slot=menu-trigger]:rounded-lg\",\n    \"**:data-[slot=menu-trigger]:outline-hidden **:data-[slot=menu-trigger]:cursor-default **:data-[slot=menu-trigger]:p-2 **:data-[slot=menu-trigger]:items-center sm:**:data-[slot=menu-trigger]:text-sm **:data-[slot=menu-trigger]:flex **:data-[slot=menu-trigger]:gap-x-2\",\n    \"**:data-[slot=menu-trigger]:data-hovered:bg-(--sidebar-accent) **:data-[slot=menu-trigger]:data-hovered:text-fg\",\n  ],\n  variants: {\n    collapsed: {\n      false: [\n        \"**:data-[slot=avatar]:size-8 **:data-[slot=avatar]:*:size-8\",\n        \"**:data-[slot=menu-trigger]:w-full **:data-[slot=menu-trigger]:**:data-[slot=chevron]:transition-transform **:data-[slot=menu-trigger]:data-pressed:**:data-[slot=chevron]:rotate-180 **:data-[slot=menu-trigger]:**:data-[slot=chevron]:ml-auto\",\n      ],\n      true: [\n        \"**:data-[slot=avatar]:size-6 **:data-[slot=avatar]:*:size-6\",\n        \"**:data-[slot=menu-label]:hidden **:data-[slot=chevron]:hidden\",\n        \"**:data-[slot=menu-trigger]:size-8 **:data-[slot=menu-trigger]:grid **:data-[slot=menu-trigger]:place-content-center\",\n      ],\n    },\n  },\n})\n\nconst SidebarFooter = ({ className, ...props }: React.ComponentProps<\"div\">) => {\n  const { state, isMobile } = useSidebar()\n  const collapsed = state === \"collapsed\" && !isMobile\n  return <div data-sidebar-footer=\"true\" className={footer({ collapsed, className })} {...props} />\n}\n\nconst SidebarContent = ({ className, ...props }: React.ComponentProps<\"div\">) => {\n  const { state } = useSidebar()\n  return (\n    <div\n      data-sidebar-content=\"true\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col overflow-auto scroll-mb-96\",\n        state === \"collapsed\" && \"items-center\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nconst SidebarSectionGroup = ({ className, ...props }: React.ComponentProps<\"section\">) => {\n  return <section data-sidebar-section-group=\"true\" className={cn(\"flex flex-col gap-y-6\", className)} {...props} />\n}\n\nconst SidebarSection = ({ className, ...props }: React.ComponentProps<\"div\"> & { title?: string }) => {\n  const { state } = useSidebar()\n  return (\n    <div\n      data-sidebar-section=\"true\"\n      className={cn(\"flex flex-col in-data-[sidebar-intent=fleet]:px-0 px-2 gap-y-0.5\", className)}\n      {...props}\n    >\n      {state !== \"collapsed\" && \"title\" in props && (\n        <Header className=\"duration-200 mb-1 flex shrink-0 items-center rounded-md px-2.5 text-xs font-medium text-sidebar-fg/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear data-focus-visible:ring-2 *:data-[slot=icon]:size-4 *:data-[slot=icon]:shrink-0 group-data-[sidebar-collapsible=dock]/sidebar-container:-mt-8 group-data-[sidebar-collapsible=dock]/sidebar-container:opacity-0\">\n          {props.title}\n        </Header>\n      )}\n      {props.children}\n    </div>\n  )\n}\n\nconst sidebarItem = tv({\n  base: [\n    \"text-sidebar-fg/70 relative px-2.5 py-2 overflow-hidden gap-x-2 w-full group cursor-pointer flex items-center sm:text-sm rounded-lg outline-hidden\",\n    \"**:data-[slot=menu-trigger]:absolute **:data-[slot=menu-trigger]:h-full **:data-[slot=menu-trigger]:items-center **:data-[slot=menu-trigger]:w-[calc(var(--sidebar-width)-90%)] **:data-[slot=menu-trigger]:right-0 **:data-[slot=menu-trigger]:flex **:data-[slot=menu-trigger]:justify-end **:data-[slot=menu-trigger]:pr-2.5\",\n    \"**:data-[slot=menu-trigger]:hidden\",\n    \"**:data-[slot=icon]:size-4 **:data-[slot=avatar]:size-4 **:data-[slot=avatar]:*:size-4 **:data-[slot=icon]:shrink-0 **:data-[slot=avatar]:shrink-0\",\n    \"**:data-[slot=menu-trigger]:bg-gradient-to-l **:data-[slot=menu-trigger]:from-(--sidebar-accent) **:data-[slot=menu-trigger]:from-65%\",\n    \"in-data-[sidebar-intent=fleet]:rounded-none\",\n  ],\n  variants: {\n    collapsed: {\n      true: \"size-9 justify-center p-0 gap-x-0\",\n    },\n    isCurrent: {\n      true: \"bg-primary text-primary-fg **:data-[slot=icon]:text-primary-fg **:data-[slot=menu-trigger]:from-primary data-hovered:bg-primary data-hovered:text-primary-fg [&_.text-muted-fg]:text-primary-fg/80\",\n    },\n    isActive: {\n      true: \"bg-(--sidebar-accent) text-sidebar-fg **:data-[slot=menu-trigger]:flex\",\n    },\n    isDisabled: {\n      true: \"opacity-50 cursor-default\",\n    },\n  },\n})\n\ninterface SidebarItemProps extends Omit<React.ComponentProps<typeof Link>, \"children\"> {\n  isCurrent?: boolean\n  tooltip?: React.ReactNode | string\n  children?:\n    | React.ReactNode\n    | ((values: LinkRenderProps & { defaultChildren: React.ReactNode; isCollapsed: boolean }) => React.ReactNode)\n  badge?: string | number | undefined\n}\n\nconst SidebarItem = ({ isCurrent, tooltip, children, badge, className, ref, ...props }: SidebarItemProps) => {\n  const { state, isMobile } = useSidebar()\n  const isCollapsed = state === \"collapsed\" && !isMobile\n  const link = (\n    <Link\n      ref={ref}\n      data-sidebar-item=\"true\"\n      aria-current={isCurrent ? \"page\" : undefined}\n      className={composeRenderProps(className, (cls, renderProps) =>\n        sidebarItem({\n          ...renderProps,\n          isCurrent,\n          collapsed: isCollapsed,\n          isActive: renderProps.isPressed || renderProps.isFocusVisible || renderProps.isHovered,\n          className: cls,\n        }),\n      )}\n      {...props}\n    >\n      {(values) => (\n        <>\n          {typeof children === \"function\" ? children({ ...values, isCollapsed }) : children}\n\n          {badge &&\n            (state !== \"collapsed\" ? (\n              <Badge\n                shape=\"square\"\n                intent=\"primary\"\n                data-slot=\"sidebar-badge\"\n                className=\"w-auto inset-y-1/2 text-[10px] dark:group-data-current:bg-[color-mix(in_oklab,var(--color-primary)_20%,white_15%)] group-data-current:bg-[color-mix(in_oklab,var(--color-primary)_20%,white_20%)] group-data-current:text-primary-fg inset-ring-1 inset-ring-primary/20 group-data-current:inset-ring-transparent dark:group-data-current:text-current transition-colors -translate-y-1/2 absolute right-1.5 h-5.5\"\n              >\n                {badge}\n              </Badge>\n            ) : (\n              <div aria-hidden className=\"absolute top-1 right-1 rounded-full size-1.5 bg-primary\" />\n            ))}\n        </>\n      )}\n    </Link>\n  )\n\n  return isCollapsed && tooltip ? (\n    <Tooltip delay={0}>\n      {link}\n      <Tooltip.Content\n        className=\"**:data-[slot=sidebar-label-mask]:hidden **:data-[slot=icon]:hidden\"\n        intent=\"inverse\"\n        showArrow={false}\n        placement=\"right\"\n      >\n        {tooltip}\n      </Tooltip.Content>\n    </Tooltip>\n  ) : (\n    link\n  )\n}\n\nconst SidebarLink = ({ className, ...props }: React.ComponentProps<typeof Link>) => {\n  const { state, isMobile } = useSidebar()\n  const collapsed = state === \"collapsed\" && !isMobile\n  return (\n    <Link\n      className={cn(\n        \"flex items-center focus:outline-hidden w-full gap-x-2\",\n        collapsed && \"absolute inset-0 size-full\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nconst SidebarInset = ({ className, ref, ...props }: React.ComponentProps<\"main\">) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative w-full flex min-h-svh flex-1 flex-col border border-transparent peer-data-[sidebar-intent=inset]:border-(--sidebar-border)\",\n        \"bg-bg peer-data-[sidebar-intent=inset]:bg-sidebar peer-data-[sidebar-intent=inset]:overflow-hidden\",\n        \"peer-data-[sidebar-intent=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[sidebar-intent=inset]:m-2 md:peer-data-[sidebar-state=collapsed]:peer-data-[sidebar-intent=inset]:ml-2 md:peer-data-[sidebar-intent=inset]:ml-0 md:peer-data-[sidebar-intent=inset]:rounded-xl md:peer-data-[sidebar-intent=inset]:shadow-xs\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nconst SidebarDisclosureGroup = ({\n  allowsMultipleExpanded = true,\n  className,\n  ...props\n}: React.ComponentProps<typeof DisclosureGroup>) => {\n  return (\n    <DisclosureGroup\n      data-sidebar-disclosure-group=\"true\"\n      allowsMultipleExpanded={allowsMultipleExpanded}\n      className={cn(\"flex flex-col gap-y-6\", className)}\n      {...props}\n    />\n  )\n}\n\nconst SidebarDisclosure = ({ className, ...props }: React.ComponentProps<typeof Disclosure>) => {\n  return (\n    <Disclosure\n      data-sidebar-disclosure=\"true\"\n      className={cn(\"px-2  in-data-[sidebar-intent=fleet]:px-0\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarDisclosureTrigger = tv({\n  base: [\n    \"text-sidebar-fg/70 relative px-2.5 py-2 overflow-hidden gap-x-2 w-full group cursor-pointer flex items-center sm:text-sm rounded-lg outline-hidden\",\n    \"in-data-[sidebar-intent=fleet]:rounded-none in-data-[sidebar-intent=fleet]:**:data-[slot=chevron]:hidden in-data-[sidebar-intent=fleet]:py-2\",\n  ],\n  variants: {\n    collapsed: {\n      true: \"size-9 justify-center p-0 gap-x-0\",\n    },\n    isActive: {\n      true: \"bg-(--sidebar-accent) text-sidebar-fg\",\n    },\n    isDisabled: {\n      true: \"opacity-50 cursor-default\",\n    },\n  },\n})\n\nconst SidebarDisclosureTrigger = ({ className, ...props }: React.ComponentProps<typeof Button>) => {\n  const { state, isMobile } = useSidebar()\n  const collapsed = state === \"collapsed\" && !isMobile\n  return (\n    <Heading level={3}>\n      <Trigger\n        slot=\"trigger\"\n        className={composeRenderProps(className, (className, renderProps) =>\n          sidebarDisclosureTrigger({\n            ...renderProps,\n            collapsed,\n            isActive: renderProps.isPressed || renderProps.isFocusVisible || renderProps.isHovered,\n            className,\n          }),\n        )}\n        {...props}\n      >\n        {(values) => (\n          <>\n            {typeof props.children === \"function\" ? props.children(values) : props.children}\n            {state !== \"collapsed\" && (\n              <IconChevronLgLeft\n                data-slot=\"chevron\"\n                className=\"z-10 ml-auto transition-transform size-3.5 group-aria-expanded:-rotate-90\"\n              />\n            )}\n          </>\n        )}\n      </Trigger>\n    </Heading>\n  )\n}\n\nconst SidebarDisclosurePanel = (props: React.ComponentProps<typeof DisclosurePanel>) => {\n  return <DisclosurePanel data-sidebar-disclosure-panel=\"true\" {...props} />\n}\n\nconst SidebarSeparator = ({ className, ...props }: React.ComponentProps<typeof Separator>) => {\n  return (\n    <Separator className={cn(\"mx-auto my-2 w-[calc(var(--sidebar-width)-theme(spacing.6))]\", className)} {...props} />\n  )\n}\n\nconst SidebarTrigger = ({ onPress, ...props }: React.ComponentProps<typeof Trigger>) => {\n  const { toggleSidebar } = useSidebar()\n  return (\n    <Button\n      aria-label={props[\"aria-label\"] || \"Toggle Sidebar\"}\n      data-sidebar-trigger=\"true\"\n      appearance=\"plain\"\n      size=\"square-petite\"\n      onPress={(event) => {\n        onPress?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <IconSidebarFill className=\"hidden md:inline\" />\n      <IconHamburger className=\"inline md:hidden\" />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nconst SidebarRail = ({ className, ref, ...props }: React.ComponentProps<\"button\">) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      title=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      className={cn(\n        \"absolute outline-hidden inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] data-hovered:after:bg-transparent group-data-[sidebar-side=left]/sidebar-container:-right-4 group-data-[sidebar-side=right]/sidebar-container:left-0 sm:flex\",\n        \"in-data-[sidebar-side=left]:cursor-w-resize in-data-[sidebar-side=right]:cursor-e-resize\",\n        \"[[data-sidebar-side=left][data-sidebar-state=collapsed]_&]:cursor-e-resize [[data-sidebar-side=right][data-sidebar-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[sidebar-collapsible=hidden]/sidebar-container:translate-x-0 group-data-[sidebar-collapsible=hidden]/sidebar-container:after:left-full group-data-[sidebar-collapsible=hidden]/sidebar-container:hover:bg-secondary\",\n        \"[[data-sidebar-side=left][data-sidebar-collapsible=hidden]_&]:-right-2 [[data-sidebar-side=right][data-sidebar-collapsible=hidden]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nconst SidebarLabel = ({ className, ...props }: React.ComponentProps<typeof Text>) => {\n  const { state, isMobile } = useSidebar()\n  const collapsed = state === \"collapsed\" && !isMobile\n  if (!collapsed) {\n    return (\n      <Text slot=\"label\" className={cn(\"flex flex-1 w-full overflow-hidden whitespace-nowrap\", className)} {...props}>\n        {props.children}\n      </Text>\n    )\n  }\n  return null\n}\n\nconst navStyles = tv({\n  base: \"md:w-full bg-sidebar isolate text-navbar-fg justify-between sm:justify-start h-[3.57rem] px-4 border-b flex items-center gap-x-2\",\n  variants: {\n    isSticky: {\n      true: \"sticky in-data-[sidebar-intent=inset]:static top-0 z-40\",\n    },\n  },\n})\n\ninterface SidebarNavProps extends React.ComponentProps<\"nav\"> {\n  isSticky?: boolean\n}\n\nconst SidebarNav = ({ isSticky = false, className, ...props }: SidebarNavProps) => {\n  return <nav data-slot=\"sidebar-nav\" {...props} className={navStyles({ isSticky, className })} />\n}\n\nexport {\n  SidebarProvider,\n  SidebarNav,\n  SidebarHeader,\n  SidebarContent,\n  SidebarSectionGroup,\n  SidebarSection,\n  SidebarItem,\n  SidebarLink,\n  SidebarFooter,\n  Sidebar,\n  SidebarDisclosureGroup,\n  SidebarDisclosure,\n  SidebarSeparator,\n  SidebarDisclosureTrigger,\n  SidebarDisclosurePanel,\n  SidebarTrigger,\n  SidebarLabel,\n  SidebarInset,\n  SidebarRail,\n  useSidebar,\n}\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/sidebar.tsx"
}