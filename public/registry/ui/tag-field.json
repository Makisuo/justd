{
  "name": "tag-field",
  "files": [
    {
      "name": "tag-field.tsx",
      "content": "\"use client\"\n\nimport { useCallback, useState } from \"react\"\n\nimport type { Key } from \"react-aria-components\"\nimport { Group, TextField } from \"react-aria-components\"\nimport type { ListData } from \"react-stately\"\nimport { twJoin } from \"tailwind-merge\"\nimport { tv } from \"tailwind-variants\"\n\nimport type { FieldProps } from \"./field\"\nimport { Description, Input, Label } from \"./field\"\nimport { cn } from \"./primitive\"\nimport type { RestrictedIntent, TagGroupProps } from \"./tag-group\"\nimport { Tag, TagGroup, TagList } from \"./tag-group\"\n\nconst tagFieldsStyles = tv({\n  base: [\"relative flex min-h-10 flex-row flex-wrap items-center\"],\n  variants: {\n    appearance: {\n      outline: [\n        \"px-1 rounded-lg shadow-xs border\",\n        \"has-[input[data-focused=true]]:border-primary\",\n        \"has-[input[data-invalid=true][data-focused=true]]:border-danger has-[input[data-invalid=true]]:border-danger has-[input[data-invalid=true]]:ring-danger/20\",\n        \"has-[input[data-focused=true]]:ring-4 has-[input[data-focused=true]]:ring-primary/20\",\n      ],\n      plain: [\"has-[input[data-focused=true]]:border-transparent\"],\n    },\n  },\n})\n\ninterface TagItemProps {\n  id: number\n  name: string\n}\n\ninterface TagFieldProps extends Pick<TagGroupProps, \"shape\">, FieldProps {\n  intent?: RestrictedIntent\n  isDisabled?: boolean\n  max?: number\n  className?: string\n  children?: React.ReactNode\n  name?: string\n  list: ListData<TagItemProps>\n  onItemInserted?: (tag: TagItemProps) => void\n  onItemCleared?: (tag: TagItemProps | undefined) => void\n  appearance?: \"outline\" | \"plain\"\n}\n\nconst TagField = ({\n  appearance = \"outline\",\n  name,\n  className,\n  list,\n  onItemCleared,\n  onItemInserted,\n  ...props\n}: TagFieldProps) => {\n  const [isInvalid, setIsInvalid] = useState(false)\n  const [inputValue, setInputValue] = useState(\"\")\n\n  const existingTagCount = list.items.length\n  const maxTags = props.max !== undefined ? props.max : Number.POSITIVE_INFINITY\n  const maxTagsToAdd = maxTags - existingTagCount\n\n  const insertTag = () => {\n    const tagNames = inputValue.split(/,/)\n    if (maxTagsToAdd <= 0) {\n      setIsInvalid(true)\n      setInputValue(\"\")\n      const timeoutId = setTimeout(() => {\n        setIsInvalid(false)\n      }, 2000)\n\n      return () => clearTimeout(timeoutId)\n    }\n\n    tagNames.slice(0, maxTagsToAdd).forEach((tagName) => {\n      const formattedName = tagName\n        .trim()\n        .replace(/\\s+/g, \" \")\n        .replace(/[\\t\\r\\n]/g, \"\")\n\n      if (formattedName && !list.items.some(({ name }) => name.toLowerCase() === formattedName.toLowerCase())) {\n        const tag = {\n          id: (list.items.at(-1)?.id ?? 0) + 1,\n          name: formattedName,\n        }\n\n        list.append(tag)\n        onItemInserted?.(tag)\n      }\n    })\n\n    setInputValue(\"\")\n  }\n\n  const clearInvalidFeedback = () => {\n    if (maxTags - list.items.length <= maxTagsToAdd) {\n      setIsInvalid(false)\n    }\n  }\n\n  const onRemove = (keys: Set<Key>) => {\n    list.remove(...keys)\n    onItemCleared?.(list.getItem([...keys][0]))\n    clearInvalidFeedback()\n  }\n\n  const onKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" || e.key === \",\") {\n      e.preventDefault()\n      insertTag()\n    }\n\n    if (e.key === \"Backspace\" && inputValue === \"\") {\n      popLast()\n      clearInvalidFeedback()\n    }\n  }\n\n  const popLast = useCallback(() => {\n    if (list.items.length === 0) {\n      return\n    }\n\n    const endKey = list.items[list.items.length - 1]\n\n    if (endKey !== null) {\n      list.remove(endKey.id)\n      onItemCleared?.(list.getItem(endKey.id))\n    }\n  }, [list, onItemCleared])\n\n  return (\n    <div className={cn(\"flex w-full flex-col gap-y-1.5\", className)}>\n      {props.label && <Label>{props.label}</Label>}\n      <Group className={twJoin(\"flex flex-col\", props.isDisabled && \"opacity-50\")}>\n        <TagGroup intent={props.intent} shape={props.shape} aria-label=\"List item inserted\" onRemove={onRemove}>\n          <div className={tagFieldsStyles({ appearance })}>\n            <div className=\"flex flex-wrap flex-1 items-center\">\n              <TagList\n                items={list.items}\n                className={twJoin(\n                  list.items.length !== 0 ? appearance === \"outline\" && \"gap-1.5 px-1 py-1.5\" : \"gap-0\",\n                  props.shape === \"square\" && \"[&_.jdt3lr2x]:rounded-[calc(var(--radius-lg)-4px)]\",\n                  \"[&_.jdt3lr2x]:last:-mr-1 outline-hidden [&_.jdt3lr2x]:cursor-default\",\n                )}\n              >\n                {(item) => <Tag>{item.name}</Tag>}\n              </TagList>\n              <TextField\n                isDisabled={props.isDisabled}\n                aria-label={props?.label ?? (props[\"aria-label\"] || props.placeholder)}\n                isInvalid={isInvalid}\n                onKeyDown={onKeyDown}\n                onChange={setInputValue}\n                value={inputValue}\n                {...props}\n              >\n                <Input\n                  className=\"inline w-auto\"\n                  placeholder={maxTagsToAdd <= 0 ? \"Remove one to add more\" : props.placeholder}\n                />\n              </TextField>\n            </div>\n          </div>\n        </TagGroup>\n        {name && <input hidden name={name} value={list.items.map((i) => i.name).join(\",\")} readOnly />}\n      </Group>\n      {props.description && <Description>{props.description}</Description>}\n    </div>\n  )\n}\n\nexport { TagField, type TagItemProps }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/tag-field.tsx"
}