{
  "name": "loader",
  "files": [
    {
      "name": "loader.tsx",
      "content": "\"use client\"\n\nimport { forwardRef } from \"react\"\n\nimport { IconLoader } from \"justd-icons\"\nimport { ProgressBar } from \"react-aria-components\"\nimport type { VariantProps } from \"tailwind-variants\"\nimport { tv } from \"tailwind-variants\"\n\nimport { cn } from \"./primitive\"\n\nconst loaderStyles = tv({\n  base: \"relative\",\n  variants: {\n    intent: {\n      current: \"text-current\",\n      primary: \"text-primary\",\n      secondary: \"text-muted-fg\",\n      success: \"text-success\",\n      warning: \"text-warning\",\n      danger: \"text-danger\",\n    },\n    size: {\n      small: \"size-4\",\n      medium: \"size-6\",\n      large: \"size-8\",\n      \"extra-large\": \"size-10\",\n    },\n  },\n  defaultVariants: {\n    intent: \"current\",\n    size: \"small\",\n  },\n})\n\ntype LoaderVariantProps = VariantProps<typeof loaderStyles>\n\nconst Bars = ({ className, ...props }: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    className={cn(\"size-4\", className)}\n    data-slot=\"icon\"\n    viewBox=\"0 0 135 140\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"currentColor\"\n    {...props}\n  >\n    <rect y=\"10\" width=\"15\" height=\"120\" rx=\"6\">\n      <animate\n        attributeName=\"height\"\n        begin=\"0.5s\"\n        dur=\"1s\"\n        values=\"120;110;100;90;80;70;60;50;40;140;120\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n      <animate\n        attributeName=\"y\"\n        begin=\"0.5s\"\n        dur=\"1s\"\n        values=\"10;15;20;25;30;35;40;45;50;0;10\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n    </rect>\n    <rect x=\"30\" y=\"10\" width=\"15\" height=\"120\" rx=\"6\">\n      <animate\n        attributeName=\"height\"\n        begin=\"0.25s\"\n        dur=\"1s\"\n        values=\"120;110;100;90;80;70;60;50;40;140;120\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n      <animate\n        attributeName=\"y\"\n        begin=\"0.25s\"\n        dur=\"1s\"\n        values=\"10;15;20;25;30;35;40;45;50;0;10\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n    </rect>\n    <rect x=\"60\" width=\"15\" height=\"140\" rx=\"6\">\n      <animate\n        attributeName=\"height\"\n        begin=\"0s\"\n        dur=\"1s\"\n        values=\"120;110;100;90;80;70;60;50;40;140;120\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n      <animate\n        attributeName=\"y\"\n        begin=\"0s\"\n        dur=\"1s\"\n        values=\"10;15;20;25;30;35;40;45;50;0;10\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n    </rect>\n    <rect x=\"90\" y=\"10\" width=\"15\" height=\"120\" rx=\"6\">\n      <animate\n        attributeName=\"height\"\n        begin=\"0.25s\"\n        dur=\"1s\"\n        values=\"120;110;100;90;80;70;60;50;40;140;120\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n      <animate\n        attributeName=\"y\"\n        begin=\"0.25s\"\n        dur=\"1s\"\n        values=\"10;15;20;25;30;35;40;45;50;0;10\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n    </rect>\n    <rect x=\"120\" y=\"10\" width=\"15\" height=\"120\" rx=\"6\">\n      <animate\n        attributeName=\"height\"\n        begin=\"0.5s\"\n        dur=\"1s\"\n        values=\"120;110;100;90;80;70;60;50;40;140;120\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n      <animate\n        attributeName=\"y\"\n        begin=\"0.5s\"\n        dur=\"1s\"\n        values=\"10;15;20;25;30;35;40;45;50;0;10\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n    </rect>\n  </svg>\n)\nconst Ring = (props: React.SVGProps<SVGSVGElement>) => <IconLoader {...props} />\nconst Spin = ({ className, ...props }: React.SVGProps<SVGSVGElement>) => (\n  <svg className={cn(\"size-4\", className)} data-slot=\"icon\" viewBox=\"0 0 2400 2400\" {...props}>\n    <g strokeWidth=\"200\" strokeLinecap=\"round\" fill=\"none\">\n      <line x1=\"1200\" y1=\"600\" x2=\"1200\" y2=\"100\" />\n      <line opacity=\"0.5\" x1=\"1200\" y1=\"2300\" x2=\"1200\" y2=\"1800\" />\n      <line opacity=\"0.917\" x1=\"900\" y1=\"680.4\" x2=\"650\" y2=\"247.4\" />\n      <line opacity=\"0.417\" x1=\"1750\" y1=\"2152.6\" x2=\"1500\" y2=\"1719.6\" />\n      <line opacity=\"0.833\" x1=\"680.4\" y1=\"900\" x2=\"247.4\" y2=\"650\" />\n      <line opacity=\"0.333\" x1=\"2152.6\" y1=\"1750\" x2=\"1719.6\" y2=\"1500\" />\n      <line opacity=\"0.75\" x1=\"600\" y1=\"1200\" x2=\"100\" y2=\"1200\" />\n      <line opacity=\"0.25\" x1=\"2300\" y1=\"1200\" x2=\"1800\" y2=\"1200\" />\n      <line opacity=\"0.667\" x1=\"680.4\" y1=\"1500\" x2=\"247.4\" y2=\"1750\" />\n      <line opacity=\"0.167\" x1=\"2152.6\" y1=\"650\" x2=\"1719.6\" y2=\"900\" />\n      <line opacity=\"0.583\" x1=\"900\" y1=\"1719.6\" x2=\"650\" y2=\"2152.6\" />\n      <line opacity=\"0.083\" x1=\"1750\" y1=\"247.4\" x2=\"1500\" y2=\"680.4\" />\n      <animateTransform\n        attributeName=\"transform\"\n        attributeType=\"XML\"\n        type=\"rotate\"\n        keyTimes=\"0;0.08333;0.16667;0.25;0.33333;0.41667;0.5;0.58333;0.66667;0.75;0.83333;0.91667\"\n        values=\"0 1199 1199;30 1199 1199;60 1199 1199;90 1199 1199;120 1199 1199;150 1199 1199;180 1199 1199;210 1199 1199;240 1199 1199;270 1199 1199;300 1199 1199;330 1199 1199\"\n        dur=\"0.83333s\"\n        begin=\"0.08333s\"\n        repeatCount=\"indefinite\"\n        calcMode=\"discrete\"\n      />\n    </g>\n  </svg>\n)\n\nconst LOADERS = {\n  bars: Bars,\n  ring: Ring,\n  spin: Spin,\n}\n\nconst DEFAULT_SPINNER = \"ring\"\n\ninterface LoaderProps\n  extends Omit<React.ComponentPropsWithoutRef<\"svg\">, \"display\" | \"opacity\" | \"intent\">,\n    LoaderVariantProps {\n  variant?: keyof typeof LOADERS\n  percentage?: number\n  isIndeterminate?: boolean\n  formatOptions?: Intl.NumberFormatOptions\n}\n\nconst Loader = forwardRef<SVGSVGElement, LoaderProps>(({ isIndeterminate = true, ...props }, ref) => {\n  const { className, variant = DEFAULT_SPINNER, intent, size, ...spinnerProps } = props\n  const LoaderPrimitive = LOADERS[variant in LOADERS ? variant : DEFAULT_SPINNER]\n\n  return (\n    <ProgressBar\n      aria-label={props[\"aria-label\"] ?? \"Loading...\"}\n      formatOptions={props.formatOptions}\n      isIndeterminate={isIndeterminate}\n    >\n      <LoaderPrimitive\n        role=\"presentation\"\n        className={loaderStyles({\n          intent,\n          size,\n          className: cn([\n            [\"ring\"].includes(variant) && \"animate-spin\",\n            variant === \"spin\" && \"stroke-current\",\n            className,\n          ]),\n        })}\n        ref={ref}\n        {...spinnerProps}\n      />\n    </ProgressBar>\n  )\n})\nLoader.displayName = \"Loader\"\n\nexport { Loader }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/loader.tsx"
}