{
  "name": "calendar",
  "files": [
    {
      "name": "calendar.tsx",
      "content": "\"use client\"\n\nimport { IconChevronLgLeft, IconChevronLgRight } from \"justd-icons\"\nimport {\n  Calendar as CalendarPrimitive,\n  CalendarCell,\n  CalendarGrid,\n  CalendarGridBody,\n  CalendarGridHeader as CalendarGridHeaderPrimitive,\n  CalendarHeaderCell,\n  type CalendarProps as CalendarPrimitiveProps,\n  composeRenderProps,\n  type DateValue,\n  Heading,\n  Text,\n  useLocale\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Button } from \"./button\"\nimport { composeTailwindRenderProps, focusRing } from \"./primitive\"\n\nconst cellStyles = tv({\n  extend: focusRing,\n  base: \"flex size-10 sm:size-9 cursor-default tabular-nums items-center justify-center rounded-full lg:text-sm forced-colors:outline-0\",\n  variants: {\n    isSelected: {\n      false: \"text-fg forced-colors:text-[ButtonText] data-hovered:bg-secondary-fg/15 data-pressed:bg-secondary-fg/20\",\n      true: \"bg-primary text-primary-fg data-invalid:bg-danger data-invalid:text-danger-fg forced-colors:bg-[Highlight] forced-colors:text-[Highlight] forced-colors:data-invalid:bg-[Mark]\"\n    },\n    isDisabled: {\n      true: \"text-muted-fg/70 forced-colors:text-[GrayText]\"\n    }\n  }\n})\n\ninterface CalendarProps<T extends DateValue> extends Omit<CalendarPrimitiveProps<T>, \"visibleDuration\"> {\n  errorMessage?: string\n  className?: string\n}\n\nconst Calendar = <T extends DateValue>({ errorMessage, className, ...props }: CalendarProps<T>) => {\n  return (\n    <CalendarPrimitive\n      className={composeTailwindRenderProps(className, \"max-w-[17.5rem] sm:max-w-[15.8rem]\")}\n      {...props}\n    >\n      <CalendarHeader />\n      <CalendarGrid className=\"[&_td]:border-collapse [&_td]:px-0\">\n        <CalendarGridHeader />\n        <CalendarGridBody>\n          {(date) => (\n            <CalendarCell\n              date={date}\n              className={composeRenderProps(className, (className, renderProps) =>\n                cellStyles({\n                  ...renderProps,\n                  className\n                })\n              )}\n            />\n          )}\n        </CalendarGridBody>\n      </CalendarGrid>\n      {errorMessage && (\n        <Text slot=\"errorMessage\" className=\"text-sm text-red-600\">\n          {errorMessage}\n        </Text>\n      )}\n    </CalendarPrimitive>\n  )\n}\n\nconst calendarHeaderStyles = tv({\n  slots: {\n    header: \"flex w-full justify-center gap-1 px-1 pb-5 sm:pb-4\",\n    heading: \"mr-2 text-muted-fg tracking-tight flex-1 text-left font-medium\",\n    calendarGridHeaderCell: \"text-sm lg:text-xs font-semibold text-muted-fg\"\n  }\n})\n\nconst { header, heading, calendarGridHeaderCell } = calendarHeaderStyles()\n\nconst CalendarHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n  const { direction } = useLocale()\n\n  return (\n    <header className={header({ className })} {...props}>\n      <Heading className={heading()} />\n      <div className=\"flex items-center gap-1\">\n        <Button\n          size=\"square-petite\"\n          className=\"**:data-[slot=icon]:text-fg size-8 sm:size-7\"\n          shape=\"circle\"\n          appearance=\"plain\"\n          slot=\"previous\"\n        >\n          {direction === \"rtl\" ? <IconChevronLgRight /> : <IconChevronLgLeft aria-hidden />}\n        </Button>\n        <Button\n          size=\"square-petite\"\n          className=\"**:data-[slot=icon]:text-fg size-8 sm:size-7\"\n          shape=\"circle\"\n          appearance=\"plain\"\n          slot=\"next\"\n        >\n          {direction === \"rtl\" ? <IconChevronLgLeft /> : <IconChevronLgRight />}\n        </Button>\n      </div>\n    </header>\n  )\n}\n\nconst CalendarGridHeader = () => {\n  return (\n    <CalendarGridHeaderPrimitive>\n      {(day) => <CalendarHeaderCell className={calendarGridHeaderCell()}>{day}</CalendarHeaderCell>}\n    </CalendarGridHeaderPrimitive>\n  )\n}\n\nCalendar.Header = CalendarHeader\nCalendar.GridHeader = CalendarGridHeader\nexport { Calendar }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/calendar.tsx"
}