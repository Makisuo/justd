{
  "name": "select",
  "files": [
    {
      "name": "select.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type { Placement } from \"@react-types/overlays\"\nimport { IconChevronLgDown } from \"justd-icons\"\nimport {\n  Button,\n  composeRenderProps,\n  Select as SelectPrimitive,\n  type SelectProps as SelectPrimitiveProps,\n  SelectValue,\n  type ValidationResult\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { DropdownItem, DropdownItemDetails, DropdownSection } from \"./dropdown\"\nimport { Description, FieldError, Label } from \"./field\"\nimport { ListBox } from \"./list-box\"\nimport { Popover } from \"./popover\"\nimport { composeTailwindRenderProps, focusStyles } from \"./primitive\"\n\nconst selectTriggerStyles = tv({\n  extend: focusStyles,\n  base: [\n    \"btr **:data-[slot=icon]:size-4 group-data-disabled:opacity-50 flex h-10 w-full cursor-default items-center gap-4 rounded-lg border border-input bg-bg py-2 pl-3 pr-2 text-start shadow-[inset_0_1px_0_0_rgba(255,255,255,0.1)] transition dark:shadow-none\",\n    \"group-data-open:border-ring/70 group-data-open:ring-4 group-data-open:ring-ring/20\",\n    \"text-fg group-data-invalid:border-danger group-data-invalid:ring-danger/20 forced-colors:group-data-invalid:border-[Mark]\"\n  ],\n  variants: {\n    isDisabled: {\n      true: \"opacity-50 forced-colors:border-[GrayText] forced-colors:text-[GrayText]\"\n    }\n  }\n})\n\ninterface SelectProps<T extends object> extends SelectPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  items?: Iterable<T>\n  className?: string\n}\n\nconst Select = <T extends object>({\n  label,\n  description,\n  errorMessage,\n  children,\n  className,\n  ...props\n}: SelectProps<T>) => {\n  return (\n    <SelectPrimitive\n      {...props}\n      className={composeTailwindRenderProps(className, \"group flex w-full flex-col gap-y-1.5\")}\n    >\n      {label && <Label>{label}</Label>}\n      <>{children as React.ReactNode}</>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </SelectPrimitive>\n  )\n}\n\ninterface ListProps<T extends object> {\n  items?: Iterable<T>\n  placement?: Placement\n  children: React.ReactNode | ((item: T) => React.ReactNode)\n  className?: string\n}\n\nconst List = <T extends object>({ className, children, items, placement }: ListProps<T>) => {\n  return (\n    <Popover.Picker className={className} trigger=\"Select\" placement={placement}>\n      <ListBox.Picker aria-label=\"items\" items={items}>\n        {children}\n      </ListBox.Picker>\n    </Popover.Picker>\n  )\n}\n\ninterface TriggerProps extends React.ComponentProps<typeof Button> {\n  prefix?: React.ReactNode\n  className?: string\n}\n\nconst Trigger = ({ className, ...props }: TriggerProps) => {\n  return (\n    <Button\n      className={composeRenderProps(className, (className, renderProps) =>\n        selectTriggerStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    >\n      {props.prefix && <span className=\"-mr-1\">{props.prefix}</span>}\n      <SelectValue className=\"flex-1 [&_[slot=description]]:hidden text-base placeholder-shown:text-muted-fg lg:text-sm\" />\n      <IconChevronLgDown\n        aria-hidden\n        className=\"text-muted-fg shrink-0 size-4 duration-300 group-data-open:rotate-180 group-data-open:text-fg group-data-disabled:opacity-50 forced-colors:text-[ButtonText] forced-colors:group-data-disabled:text-[GrayText]\"\n      />\n    </Button>\n  )\n}\n\nSelect.OptionDetails = DropdownItemDetails\nSelect.Option = DropdownItem\nSelect.Section = DropdownSection\nSelect.Trigger = Trigger\nSelect.List = List\n\nexport { Select }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/select.tsx"
}