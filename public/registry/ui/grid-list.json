{
  "name": "grid-list",
  "files": [
    {
      "name": "grid-list.tsx",
      "content": "\"use client\"\n\nimport type React from \"react\"\n\nimport { IconHamburger } from \"justd-icons\"\nimport type { GridListItemProps, GridListProps } from \"react-aria-components\"\nimport { Button, GridListItem, GridList as GridListPrimitive, composeRenderProps } from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Checkbox } from \"./checkbox\"\nimport { composeTailwindRenderProps } from \"./primitive\"\n\nconst gridListStyles = tv({\n  base: \"relative *:data-drop-target:border *:data-drop-target:border-accent [&::-webkit-scrollbar]:size-0.5 [scrollbar-width:thin] max-h-96 overflow-auto rounded-lg border\",\n})\n\nconst GridList = <T extends object>({ children, className, ...props }: GridListProps<T>) => (\n  <GridListPrimitive className={composeTailwindRenderProps(className, gridListStyles())} {...props}>\n    {children}\n  </GridListPrimitive>\n)\n\nconst itemStyles = tv({\n  base: \"[--selected-item:theme(--color-muted/80%)] [--selected-item-hovered:theme(--color-muted/70%)] relative group transition outline-hidden flex cursor-default select-none gap-3 border-y px-3 -mb-px py-2 sm:text-sm text-fg -outline-offset-2 first:rounded-t-md first:border-t-0 last:mb-0 last:rounded-b-md last:border-b-0\",\n  variants: {\n    isHovered: { true: \"bg-subtle\" },\n    isSelected: {\n      true: \"bg-(--selected-item) z-20 border-border/50 data-hovered:bg-(--selected-item-hovered)\",\n    },\n    isFocused: {\n      true: \"outline-hidden\",\n    },\n    isFocusVisible: {\n      true: \"ring-1 ring-ring outline-hidden bg-(--selected-item) data-selected:bg-(--selected-item) data-hovered:bg-(--selected-item-hovered)\",\n    },\n    isDisabled: {\n      true: \"text-muted-fg/70 forced-colors:text-[GrayText]\",\n    },\n  },\n})\n\nconst Item = ({ className, ...props }: GridListItemProps) => {\n  const textValue = typeof props.children === \"string\" ? props.children : undefined\n  return (\n    <GridListItem\n      textValue={textValue}\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) => itemStyles({ ...renderProps, className }))}\n    >\n      {({ selectionMode, selectionBehavior, allowsDragging }) => (\n        <>\n          {allowsDragging && (\n            <Button slot=\"drag\" className=\"cursor-grab data-dragging:cursor-grabbing *:data-[slot=icon]:text-muted-fg\">\n              <IconHamburger />\n            </Button>\n          )}\n\n          <span\n            aria-hidden\n            className=\"hidden absolute inset-y-0 left-0 w-0.5 h-full bg-primary group-data-selected:block\"\n          />\n          {selectionMode === \"multiple\" && selectionBehavior === \"toggle\" && (\n            <Checkbox className=\"-mr-2\" slot=\"selection\" />\n          )}\n          {props.children as React.ReactNode}\n        </>\n      )}\n    </GridListItem>\n  )\n}\n\nconst EmptyState = (props: React.HTMLAttributes<HTMLDivElement>) => <div className=\"p-6\" {...props} />\n\nGridList.Item = Item\nGridList.EmptyState = EmptyState\n\nexport { GridList }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/grid-list.tsx"
}