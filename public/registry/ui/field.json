{
  "name": "field",
  "files": [
    {
      "name": "field.tsx",
      "content": "\"use client\"\n\nimport { forwardRef } from \"react\"\n\nimport type {\n  FieldErrorProps,\n  GroupProps,\n  InputProps,\n  LabelProps,\n  TextFieldProps as TextFieldPrimitiveProps,\n  TextProps,\n  ValidationResult,\n} from \"react-aria-components\"\nimport {\n  FieldError as FieldErrorPrimitive,\n  Group,\n  Input as InputPrimitive,\n  Label as LabelPrimitive,\n  Text,\n  composeRenderProps,\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { composeTailwindRenderProps, focusStyles } from \"./primitive\"\n\ninterface FieldProps {\n  label?: string\n  placeholder?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  \"aria-label\"?: TextFieldPrimitiveProps[\"aria-label\"]\n  \"aria-labelledby\"?: TextFieldPrimitiveProps[\"aria-labelledby\"]\n}\n\nconst fieldStyles = tv({\n  slots: {\n    description: \"text-pretty text-base/6 text-muted-fg sm:text-sm/6\",\n    label: \"w-fit cursor-default font-medium text-secondary-fg text-sm\",\n    fieldError: \"text-sm/6 text-danger forced-colors:text-[Mark]\",\n    input: [\n      \"w-full min-w-0 [&::-ms-reveal]:hidden bg-transparent py-2 px-2.5 text-base text-fg placeholder-muted-fg outline-hidden data-focused:outline-hidden sm:text-sm\",\n    ],\n  },\n})\n\nconst { description, label, fieldError, input } = fieldStyles()\n\nconst Label = ({ className, ...props }: LabelProps) => {\n  return <LabelPrimitive {...props} className={label({ className })} />\n}\n\ninterface DescriptionProps extends TextProps {\n  isWarning?: boolean\n}\n\nconst Description = ({ className, ...props }: DescriptionProps) => {\n  const isWarning = props.isWarning ?? false\n  return (\n    <Text\n      {...props}\n      slot=\"description\"\n      className={description({ className: isWarning ? \"text-warning\" : className })}\n    />\n  )\n}\n\nconst FieldError = ({ className, ...props }: FieldErrorProps) => {\n  return <FieldErrorPrimitive {...props} className={composeTailwindRenderProps(className, fieldError())} />\n}\n\nconst fieldGroupStyles = tv({\n  base: [\n    \"group border border-input transition h-10 duration-200 ease-out overflow-hidden rounded-lg flex items-center\",\n    \"group-data-invalid:focus-within:border-danger focus-within:ring-4 group-data-invalid:focus-within:ring-danger/20\",\n    \"[&>[role=progressbar]]:mr-2.5\",\n    \"**:data-[slot=icon]:size-4 **:data-[slot=icon]:shrink-0\",\n    \"*:data-[slot=suffix]:mr-2.5 *:data-[slot=suffix]:text-muted-fg\",\n    \"*:data-[slot=prefix]:ml-2.5 *:data-[slot=prefix]:text-muted-fg\",\n  ],\n  variants: {\n    isFocusWithin: focusStyles.variants.isFocused,\n    isInvalid: focusStyles.variants.isInvalid,\n    isDisabled: {\n      true: \"opacity-50 forced-colors:border-[GrayText]\",\n    },\n  },\n})\n\nconst FieldGroup = ({ className, ...props }: GroupProps) => {\n  return (\n    <Group\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) =>\n        fieldGroupStyles({\n          ...renderProps,\n          className,\n        }),\n      )}\n    />\n  )\n}\n\nconst Input = forwardRef<HTMLInputElement, InputProps>(({ className, ...props }, ref) => {\n  return <InputPrimitive ref={ref} {...props} className={composeTailwindRenderProps(className, input())} />\n})\n\nInput.displayName = \"Input\"\n\nexport { Description, FieldError, FieldGroup, Input, Label, type FieldProps }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/field.tsx"
}