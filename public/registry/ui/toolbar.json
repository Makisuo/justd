{
  "name": "toolbar",
  "files": [
    {
      "name": "toolbar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type { GroupProps, SeparatorProps, ToolbarProps } from \"react-aria-components\"\nimport { composeRenderProps, Group, Toolbar as ToolbarPrimitive } from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { cn } from \"./primitive\"\nimport { Separator } from \"./separator\"\nimport { Toggle } from \"./toggle\"\n\nconst ToolbarContext = React.createContext<{ orientation?: ToolbarProps[\"orientation\"] }>({\n  orientation: \"horizontal\"\n})\n\nconst toolbarStyles = tv({\n  base: \"flex gap-2 group\",\n  variants: {\n    orientation: {\n      horizontal: \"flex-row [&::-webkit-scrollbar]:hidden [scrollbar-width:none] [-ms-overflow-style:none]\",\n      vertical: \"flex-col items-start\"\n    }\n  }\n})\n\nconst Toolbar = ({ orientation = \"horizontal\", className, ...props }: ToolbarProps) => {\n  return (\n    <ToolbarContext.Provider value={{ orientation }}>\n      <ToolbarPrimitive\n        orientation={orientation}\n        {...props}\n        className={composeRenderProps(className, (className, renderProps) =>\n          toolbarStyles({ ...renderProps, className })\n        )}\n      />\n    </ToolbarContext.Provider>\n  )\n}\n\nconst ToolbarGroupContext = React.createContext<{ isDisabled?: boolean }>({})\n\nconst ToolbarGroup = ({ isDisabled, className, ...props }: GroupProps) => {\n  return (\n    <ToolbarGroupContext.Provider value={{ isDisabled }}>\n      <Group\n        className={cn(\n          \"flex gap-2 group-data-[orientation=vertical]:flex-col group-data-[orientation=vertical]:items-start\",\n          className\n        )}\n        {...props}\n      >\n        {props.children}\n      </Group>\n    </ToolbarGroupContext.Provider>\n  )\n}\n\nconst Item = ({ isDisabled, ...props }: React.ComponentProps<typeof Toggle>) => {\n  const context = React.useContext(ToolbarGroupContext)\n  const effectiveIsDisabled = isDisabled || context.isDisabled\n\n  return <Toggle isDisabled={effectiveIsDisabled} {...props} />\n}\n\nconst ToolbarSeparator = ({ className, ...props }: SeparatorProps) => {\n  const { orientation } = React.useContext(ToolbarContext)\n  const effectiveOrientation = orientation === \"vertical\" ? \"horizontal\" : \"vertical\"\n  return (\n    <Separator\n      orientation={effectiveOrientation}\n      className={cn(effectiveOrientation === \"vertical\" ? \"mx-1.5\" : \"my-1.5 w-9\", className)}\n      {...props}\n    />\n  )\n}\n\nToolbar.Group = ToolbarGroup\nToolbar.Separator = ToolbarSeparator\nToolbar.Item = Item\n\nexport { Toolbar }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/toolbar.tsx"
}