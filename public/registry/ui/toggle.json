{
  "name": "toggle",
  "files": [
    {
      "name": "toggle.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type { ToggleButtonGroupProps, ToggleButtonProps } from \"react-aria-components\"\nimport { composeRenderProps, ToggleButton, ToggleButtonGroup } from \"react-aria-components\"\nimport type { VariantProps } from \"tailwind-variants\"\nimport { tv } from \"tailwind-variants\"\n\nimport { focusButtonStyles } from \"./primitive\"\n\ninterface ToggleGroupContextProps {\n  appearance?: \"outline\" | \"plain\" | \"solid\"\n}\n\nconst ToggleGroupContext = React.createContext<ToggleGroupContextProps>({\n  appearance: \"plain\"\n})\n\nconst toggleGroupStyles = tv({\n  base: [\"flex gap-1\"],\n  variants: {\n    orientation: {\n      horizontal: \"flex-row [&::-webkit-scrollbar]:hidden [scrollbar-width:none] [-ms-overflow-style:none]\",\n      vertical: \"flex-col items-start\"\n    }\n  }\n})\n\nconst ToggleGroup = ({\n  className,\n  orientation = \"horizontal\",\n  appearance = \"plain\",\n  ...props\n}: ToggleButtonGroupProps & ToggleGroupContextProps) => {\n  return (\n    <ToggleGroupContext.Provider value={{ appearance }}>\n      <ToggleButtonGroup\n        orientation={orientation}\n        className={composeRenderProps(className, (className, renderProps) =>\n          toggleGroupStyles({\n            ...renderProps,\n            orientation,\n            className\n          })\n        )}\n        {...props}\n      />\n    </ToggleGroupContext.Provider>\n  )\n}\n\nconst toggleStyles = tv({\n  extend: focusButtonStyles,\n  base: [\n    \"inline-flex relative items-center gap-x-2 bg-transparent justify-center border border-transparent rounded-lg text-sm font-medium ring-offset-bg transition-colors\",\n    \"data-hovered:bg-secondary data-hovered:text-secondary-fg\",\n    \"forced-colors:[--button-icon:ButtonText] forced-colors:hover:[--button-icon:ButtonText]\",\n    \"*:data-[slot=icon]:-mx-0.5 *:data-[slot=icon]:my-1 *:data-[slot=icon]:size-4 *:data-[slot=icon]:shrink-0 *:data-[slot=icon]:text-(--button-icon)\"\n  ],\n  variants: {\n    isDisabled: {\n      true: \"opacity-50 cursor-default forced-colors:border-[GrayText]\"\n    },\n    appearance: {\n      plain: [\n        \"data-selected:bg-secondary data-selected:text-secondary-fg\",\n        \"[--button-icon:var(--color-secondary-fg)]/60 data-selected:[--button-icon:var(--color-secondary-fg)] data-hovered:[--button-icon:var(--color-secondary-fg)]/80\"\n      ],\n      solid: [\n        \"bg-white border-border data-selected:border-primary data-hovered:bg-white/95 data-hovered:text-black text-black data-selected:bg-primary data-selected:text-primary-fg\",\n        \"[--button-icon:var(--color-black)]/60 data-selected:[--button-icon:var(--color-white)] data-hovered:[--button-icon:var(--color-black)]/80\"\n      ],\n      outline: [\n        \"border-border data-selected:bg-secondary data-selected:backdrop-blur-sm data-selected:text-secondary-fg data-hovered:bg-secondary/50 data-hovered:text-secondary-fg\",\n        \"[--button-icon:var(--color-secondary-fg)]/60 data-selected:[--button-icon:var(--color-secondary-fg)] data-hovered:[--button-icon:var(--color-secondary-fg)]/80\"\n      ]\n    },\n    size: {\n      small: \"h-9 px-3.5\",\n      medium: \"h-10 px-4\",\n      large: \"h-11 px-5\",\n      \"square-petite\": \"size-9 shrink-0\"\n    },\n    shape: {\n      square: \"rounded-lg\",\n      circle: \"rounded-full\"\n    }\n  },\n  defaultVariants: {\n    appearance: \"plain\",\n    size: \"small\",\n    shape: \"square\"\n  }\n})\n\ntype ToggleProps = ToggleButtonProps & VariantProps<typeof toggleStyles>\n\nconst Toggle = ({ className, appearance, ...props }: ToggleProps) => {\n  const { appearance: groupAppearance } = React.useContext(ToggleGroupContext)\n  return (\n    <ToggleButton\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) =>\n        toggleStyles({\n          ...renderProps,\n          appearance: appearance ?? groupAppearance,\n          size: props.size,\n          shape: props.shape,\n          className\n        })\n      )}\n    />\n  )\n}\n\nexport { ToggleGroup, Toggle }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/toggle.tsx"
}