{
  "name": "modal",
  "files": [
    {
      "name": "modal.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type { DialogProps, DialogTriggerProps, ModalOverlayProps } from \"react-aria-components\"\nimport { composeRenderProps, DialogTrigger, Modal as ModalPrimitive, ModalOverlay } from \"react-aria-components\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { Dialog } from \"./dialog\"\n\nconst modalOverlayStyles = tv({\n  base: [\n    \"fixed left-0 top-0 isolate z-50 h-(--visual-viewport-height) w-full\",\n    \"flex items-end text-center sm:block bg-fg/15 dark:bg-bg/40\",\n    \"[--visual-viewport-vertical-padding:16px] sm:[--visual-viewport-vertical-padding:32px]\"\n  ],\n  variants: {\n    isBlurred: {\n      true: \"backdrop-blur bg-bg/15 dark:bg-bg/40\"\n    },\n    isEntering: {\n      true: \"ease-out animate-in duration-300 fade-in\"\n    },\n    isExiting: {\n      true: \"duration-200 ease-in animate-out fade-out\"\n    }\n  }\n})\nconst modalContentStyles = tv({\n  base: [\n    \"max-h-full w-full rounded-t-2xl ring-1 ring-fg/5 bg-overlay text-overlay-fg text-left align-middle shadow-lg\",\n    \"dark:ring-border sm:rounded-2xl overflow-hidden\",\n    \"sm:fixed sm:left-[50vw] sm:top-1/2 sm:-translate-x-1/2 sm:-translate-y-1/2\"\n  ],\n  variants: {\n    isEntering: {\n      true: [\n        \"animate-in ease-out fade-in duration-300 slide-in-from-bottom-[20%]\",\n        \"sm:slide-in-from-bottom-auto sm:slide-in-from-top-12\"\n      ]\n    },\n    isExiting: {\n      true: [\"duration-200 ease-in animate-out slide-out-to-bottom-56\", \"sm:slide-out-to-top-12\"]\n    },\n    size: {\n      xs: \"sm:max-w-xs\",\n      sm: \"sm:max-w-sm\",\n      md: \"sm:max-w-md\",\n      lg: \"sm:max-w-lg sm:has-[[role=alertdialog]]:max-w-lg sm:has-[[role=dialog]]:max-w-lg\",\n      xl: \"sm:max-w-xl\",\n      \"2xl\": \"sm:max-w-2xl\",\n      \"3xl\": \"sm:max-w-3xl\",\n      \"4xl\": \"sm:max-w-4xl\",\n      \"5xl\": \"sm:max-w-5xl\"\n    }\n  },\n  defaultVariants: {\n    size: \"lg\"\n  }\n})\n\ntype ModalProps = DialogTriggerProps\nconst Modal = (props: ModalProps) => {\n  return <DialogTrigger {...props} />\n}\n\ninterface ModalContentProps\n  extends Omit<React.ComponentProps<typeof Modal>, \"children\">,\n    Omit<ModalOverlayProps, \"className\">,\n    VariantProps<typeof modalContentStyles> {\n  \"aria-label\"?: DialogProps[\"aria-label\"]\n  \"aria-labelledby\"?: DialogProps[\"aria-labelledby\"]\n  role?: DialogProps[\"role\"]\n  closeButton?: boolean\n  isBlurred?: boolean\n  classNames?: {\n    overlay?: ModalOverlayProps[\"className\"]\n    content?: ModalOverlayProps[\"className\"]\n  }\n}\n\nconst ModalContent = ({\n  classNames,\n  isDismissable = true,\n  isBlurred = false,\n  children,\n  size,\n  role,\n  closeButton = true,\n  ...props\n}: ModalContentProps) => {\n  const _isDismissable = role === \"alertdialog\" ? false : isDismissable\n  return (\n    <ModalOverlay\n      isDismissable={_isDismissable}\n      className={composeRenderProps(classNames?.overlay, (className, renderProps) => {\n        return modalOverlayStyles({\n          ...renderProps,\n          isBlurred,\n          className\n        })\n      })}\n      {...props}\n    >\n      <ModalPrimitive\n        className={composeRenderProps(classNames?.content, (className, renderProps) =>\n          modalContentStyles({\n            ...renderProps,\n            size,\n            className\n          })\n        )}\n        {...props}\n      >\n        {(values) => (\n          <Dialog role={role}>\n            {typeof children === \"function\" ? children(values) : children}\n            {closeButton && <Dialog.CloseIndicator isDismissable={_isDismissable} />}\n          </Dialog>\n        )}\n      </ModalPrimitive>\n    </ModalOverlay>\n  )\n}\n\nModal.Trigger = Dialog.Trigger\nModal.Header = Dialog.Header\nModal.Title = Dialog.Title\nModal.Description = Dialog.Description\nModal.Footer = Dialog.Footer\nModal.Body = Dialog.Body\nModal.Close = Dialog.Close\nModal.Content = ModalContent\n\nexport { Modal }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/modal.tsx"
}