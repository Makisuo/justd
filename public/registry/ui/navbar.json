{
  "name": "navbar",
  "files": [
    {
      "name": "navbar.tsx",
      "content": "\"use client\"\n\nimport { createContext, use, useCallback, useId, useMemo, useState } from \"react\"\n\nimport { IconHamburger } from \"justd-icons\"\nimport { LayoutGroup, motion } from \"motion/react\"\nimport type { LinkProps } from \"react-aria-components\"\nimport { Link, composeRenderProps } from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Button } from \"./button\"\nimport { cn, useMediaQuery } from \"./primitive\"\nimport { Sheet } from \"./sheet\"\n\ntype NavbarOptions = {\n  side?: \"left\" | \"right\"\n  isSticky?: boolean\n  intent?: \"navbar\" | \"floating\" | \"inset\"\n}\n\ntype NavbarContextProps = {\n  open: boolean\n  setOpen: (open: boolean) => void\n  isCompact: boolean\n  toggleNavbar: () => void\n} & NavbarOptions\n\nconst NavbarContext = createContext<NavbarContextProps | null>(null)\n\nfunction useNavbar() {\n  const context = use(NavbarContext)\n  if (!context) {\n    throw new Error(\"useNavbar must be used within a Navbar.\")\n  }\n\n  return context\n}\n\ninterface NavbarProviderProps extends React.ComponentProps<\"header\">, NavbarOptions {\n  defaultOpen?: boolean\n  isOpen?: boolean\n  onOpenChange?: (open: boolean) => void\n}\n\nconst navbarStyles = tv({\n  base: \"relative @container isolate flex w-full flex-col\",\n  variants: {\n    intent: {\n      floating: \"pt-2 px-2.5\",\n      navbar: \"\",\n      inset: \"bg-bg min-h-svh\",\n    },\n  },\n})\n\nconst Navbar = ({\n  children,\n  isOpen: openProp,\n  onOpenChange: setOpenProp,\n  defaultOpen = false,\n  className,\n  side = \"left\",\n  isSticky = false,\n  intent = \"navbar\",\n  ...props\n}: NavbarProviderProps) => {\n  const isCompact = useMediaQuery(\"(max-width: 768px)\")\n  const [_open, _setOpen] = useState(defaultOpen)\n  const open = openProp ?? _open\n\n  const setOpen = useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      if (setOpenProp) {\n        return setOpenProp?.(typeof value === \"function\" ? value(open) : value)\n      }\n\n      _setOpen(value)\n    },\n    [setOpenProp, open],\n  )\n\n  const toggleNavbar = useCallback(() => {\n    setOpen((open) => !open)\n  }, [setOpen])\n\n  const contextValue = useMemo<NavbarContextProps>(\n    () => ({\n      open,\n      setOpen,\n      isCompact,\n      toggleNavbar,\n      intent,\n      isSticky,\n      side,\n    }),\n    [open, setOpen, isCompact, toggleNavbar, intent, isSticky, side],\n  )\n  return (\n    <NavbarContext value={contextValue}>\n      <header data-navbar-intent={intent} className={navbarStyles({ intent, className })} {...props}>\n        {children}\n      </header>\n    </NavbarContext>\n  )\n}\n\nconst navStyles = tv({\n  base: [\n    \"hidden h-(--navbar-height) [--navbar-height:3.5rem] px-4 group peer md:flex items-center w-full\",\n    \"[&>div]:max-w-[1680px] md:[&>div]:flex [&>div]:items-center [&>div]:w-full [&>div]:mx-auto\",\n  ],\n  variants: {\n    isSticky: {\n      true: \"sticky z-40 top-0\",\n    },\n    intent: {\n      floating:\n        \"bg-navbar text-navbar-fg w-full max-w-7xl 2xl:max-w-(--breakpoint-2xl) mx-auto border rounded-xl md:px-4\",\n      navbar: \"bg-navbar text-navbar-fg border-b md:px-6\",\n      inset: [\n        \"mx-auto dark:md:px-6\",\n        \"2xl:[&>div]:max-w-(--breakpoint-2xl) md:[&>div]:flex [&>div]:items-center [&>div]:w-full [&>div]:mx-auto\",\n      ],\n    },\n  },\n})\n\ninterface NavbarProps extends React.ComponentProps<\"div\"> {\n  intent?: \"navbar\" | \"floating\" | \"inset\"\n  isSticky?: boolean\n  side?: \"left\" | \"right\"\n}\n\nconst Nav = ({ className, ...props }: NavbarProps) => {\n  const { isCompact, side, intent, isSticky, open, setOpen } = useNavbar()\n\n  if (isCompact) {\n    return (\n      <Sheet isOpen={open} onOpenChange={setOpen} {...props}>\n        <Sheet.Content\n          side={side}\n          aria-label=\"Compact Navbar\"\n          data-navbar=\"compact\"\n          classNames={{\n            content: \"text-fg [&>button]:hidden\",\n          }}\n          isStack={intent === \"floating\"}\n        >\n          <Sheet.Body className=\"px-2 md:px-4\">{props.children}</Sheet.Body>\n        </Sheet.Content>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div data-navbar-nav=\"true\" className={navStyles({ isSticky, intent, className })} {...props}>\n      <div>{props.children}</div>\n    </div>\n  )\n}\n\nconst Trigger = ({ className, onPress, ...props }: React.ComponentProps<typeof Button>) => {\n  const { toggleNavbar } = useNavbar()\n  return (\n    <Button\n      data-navbar-trigger=\"true\"\n      appearance=\"plain\"\n      aria-label={props[\"aria-label\"] || \"Toggle Navbar\"}\n      size=\"square-petite\"\n      className={className}\n      onPress={(event) => {\n        onPress?.(event)\n        toggleNavbar()\n      }}\n      {...props}\n    >\n      <IconHamburger />\n      <span className=\"sr-only\">Toggle Navbar</span>\n    </Button>\n  )\n}\n\nconst Section = ({ className, ...props }: React.ComponentProps<\"div\">) => {\n  const { isCompact } = useNavbar()\n  const id = useId()\n  return (\n    <LayoutGroup id={id}>\n      <div\n        data-navbar-section=\"true\"\n        className={cn(\"flex\", isCompact ? \"flex-col gap-y-4\" : \"flex-row items-center gap-x-3\", className)}\n        {...props}\n      >\n        {props.children}\n      </div>\n    </LayoutGroup>\n  )\n}\n\nconst navItemStyles = tv({\n  base: [\n    \"relative no-underline cursor-pointer md:text-sm px-2 flex forced-colors:outline-0 items-center gap-x-2 *:data-[slot=icon]:-mx-0.5 text-muted-fg outline-hidden forced-colors:data-disabled:text-[GrayText] forced-colors:transform-none transition-colors\",\n    \"data-hovered:text-fg data-focused:text-fg data-pressed:text-fg data-focus-visible:outline-1 data-focus-visible:outline-primary\",\n    \"**:data-[slot=chevron]:size-4 **:data-[slot=chevron]:transition-transform\",\n    \"data-pressed:**:data-[slot=chevron]:rotate-180 *:data-[slot=icon]:size-4 *:data-[slot=icon]:shrink-0\",\n    \"data-disabled:opacity-50 data-disabled:cursor-default data-disabled:forced-colors:text-[GrayText]\",\n  ],\n  variants: {\n    isCurrent: {\n      true: \"text-navbar-fg cursor-default\",\n    },\n  },\n})\n\ninterface ItemProps extends LinkProps {\n  isCurrent?: boolean\n}\n\nconst Item = ({ className, isCurrent, ...props }: ItemProps) => {\n  const { intent, isCompact } = useNavbar()\n  return (\n    <Link\n      data-navbar-item=\"true\"\n      aria-current={isCurrent ? \"page\" : undefined}\n      className={composeRenderProps(className, (className, ...renderProps) =>\n        navItemStyles({ ...renderProps, isCurrent, className }),\n      )}\n      {...props}\n    >\n      {(values) => (\n        <>\n          {typeof props.children === \"function\" ? props.children(values) : props.children}\n\n          {(isCurrent || values.isCurrent) && !isCompact && intent !== \"floating\" && (\n            <motion.span\n              layoutId=\"current-indicator\"\n              className=\"absolute inset-x-2 bottom-[calc(var(--navbar-height)*-0.33)] h-0.5 rounded-full bg-fg\"\n            />\n          )}\n        </>\n      )}\n    </Link>\n  )\n}\n\nconst Logo = ({ className, ...props }: LinkProps) => {\n  return (\n    <Link\n      className={cn(\n        \"flex items-center gap-x-2 px-2 py-4 text-fg data-focus-visible:outline-1 data-focus-visible:outline-primary data-focused:outline-hidden md:mr-4 md:px-0 md:py-0\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nconst Flex = ({ className, ...props }: React.ComponentProps<\"div\">) => {\n  return <div className={cn(\"flex items-center gap-2 md:gap-3\", className)} {...props} />\n}\n\nconst compactStyles = tv({\n  base: \"md:hidden flex peer-has-[[data-navbar-intent=floating]]:border bg-navbar text-navbar-fg justify-between\",\n  variants: {\n    intent: {\n      floating: \"border h-12 rounded-lg px-3.5\",\n      inset: \"h-14 px-4\",\n      navbar: \"h-14 border-b px-4\",\n    },\n  },\n})\n\nconst Compact = ({ className, ...props }: React.ComponentProps<\"div\">) => {\n  const { intent } = useNavbar()\n  return <div className={compactStyles({ intent, className })} {...props} />\n}\n\nconst insetStyles = tv({\n  base: \"grow\",\n  variants: {\n    intent: {\n      floating: \"\",\n      inset: \"bg-muted/40 md:rounded-lg md:shadow-xs md:ring-1 md:ring-fg/15 md:dark:ring-border\",\n      navbar: \"\",\n    },\n  },\n})\n\nconst Inset = ({ className, ...props }: React.ComponentProps<\"div\">) => {\n  const { intent } = useNavbar()\n  return (\n    <main\n      data-navbar-intent={intent}\n      className={cn(\"flex flex-1 flex-col\", intent === \"inset\" && \"pb-2 md:px-2\", className)}\n    >\n      <div className={insetStyles({ intent, className })}>{props.children}</div>\n    </main>\n  )\n}\n\nNavbar.Nav = Nav\nNavbar.Inset = Inset\nNavbar.Compact = Compact\nNavbar.Flex = Flex\nNavbar.Trigger = Trigger\nNavbar.Logo = Logo\nNavbar.Item = Item\nNavbar.Section = Section\n\nexport { Navbar }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/navbar.tsx"
}