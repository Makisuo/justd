{
  "name": "date-field",
  "files": [
    {
      "name": "date-field.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport {\n  DateField as DateFieldPrimitive,\n  type DateFieldProps as DateFieldPrimitiveProps,\n  DateInput as DateInputPrimitive,\n  type DateInputProps,\n  DateSegment,\n  type DateValue,\n  type ValidationResult\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Description, FieldError, FieldGroup, Label } from \"./field\"\nimport { cn, composeTailwindRenderProps } from \"./primitive\"\n\ninterface DateFieldProps<T extends DateValue> extends DateFieldPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  prefix?: React.ReactNode\n  suffix?: React.ReactNode\n}\n\nconst DateField = <T extends DateValue>({\n  prefix,\n  suffix,\n  label,\n  description,\n  errorMessage,\n  ...props\n}: DateFieldProps<T>) => {\n  return (\n    <DateFieldPrimitive\n      {...props}\n      className={composeTailwindRenderProps(props.className, \"flex group flex-col gap-y-1.5\")}\n    >\n      {label && <Label>{label}</Label>}\n      <FieldGroup>\n        {prefix ? <span data-slot=\"prefix\">{prefix}</span> : null}\n        <DateInput />\n        {suffix ? <span data-slot=\"suffix\">{suffix}</span> : null}\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </DateFieldPrimitive>\n  )\n}\n\nconst segmentStyles = tv({\n  base: \"inline shrink-0 sm:uppercase tabular-nums rounded p-0.5 tracking-wider text-fg caret-transparent outline outline-0 forced-color-adjust-none type-literal:px-0 lg:text-sm forced-colors:text-[ButtonText]\",\n  variants: {\n    isPlaceholder: {\n      true: \"text-muted-fg\"\n    },\n    isDisabled: {\n      true: \"text-fg/50 forced-colors:text-[GrayText]\"\n    },\n    isFocused: {\n      true: [\n        \"bg-primary text-primary-fg forced-colors:bg-[Highlight] forced-colors:text-[HighlightText]\",\n        \"data-invalid:bg-danger data-invalid:text-danger-fg\"\n      ]\n    }\n  }\n})\n\nconst DateInput = ({ className, ...props }: Omit<DateInputProps, \"children\">) => {\n  return (\n    <DateInputPrimitive\n      className={cn(\"bg-transparent p-2 text-base text-fg placeholder-muted-fg lg:text-sm\", className)}\n      {...props}\n    >\n      {(segment) => <DateSegment segment={segment} className={segmentStyles} />}\n    </DateInputPrimitive>\n  )\n}\n\nexport { DateField, DateInput, segmentStyles, type DateFieldProps }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/date-field.tsx"
}