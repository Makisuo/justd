{
  "name": "combo-box",
  "files": [
    {
      "name": "combo-box.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconChevronLgDown, IconX } from \"justd-icons\"\nimport type { InputProps } from \"react-aria-components\"\nimport {\n  ComboBoxContext,\n  ComboBoxStateContext,\n  ComboBox as ComboboxPrimitive,\n  type ComboBoxProps as ComboboxPrimitiveProps,\n  type PopoverProps as PopoverPrimitiveProps,\n  type ValidationResult,\n  useSlottedContext,\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Button, ButtonPrimitive } from \"./button\"\nimport { DropdownItem, DropdownSection } from \"./dropdown\"\nimport { Description, FieldError, FieldGroup, Input, Label } from \"./field\"\nimport { ListBox } from \"./list-box\"\nimport { Popover } from \"./popover\"\nimport { composeTailwindRenderProps } from \"./primitive\"\n\nconst comboboxStyles = tv({\n  slots: {\n    base: \"group w-full flex flex-col gap-y-1.5\",\n    chevronButton:\n      \"h-7 w-8 **:data-[slot=icon]:text-muted-fg **:data-[slot=icon]:hover:text-fg **:data-[slot=icon]:data-pressed:text-fg rounded outline-offset-0 active:bg-transparent data-hovered:bg-transparent data-pressed:bg-transparent\",\n    chevronIcon: \"transition shrink-0 size-4 duration-200 group-open:rotate-180 group-open:text-fg\",\n    clearButton:\n      \"data-focused:outline-hidden absolute inset-y-0 right-0 flex items-center pr-2 text-muted-fg data-hovered:text-fg\",\n  },\n})\n\nconst { base, chevronButton, chevronIcon, clearButton } = comboboxStyles()\n\ninterface ComboBoxProps<T extends object> extends Omit<ComboboxPrimitiveProps<T>, \"children\"> {\n  label?: string\n  placeholder?: string\n  description?: string | null\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  children: React.ReactNode\n}\n\nconst ComboBox = <T extends object>({\n  label,\n  description,\n  errorMessage,\n  children,\n  className,\n  ...props\n}: ComboBoxProps<T>) => {\n  return (\n    <ComboboxPrimitive {...props} className={composeTailwindRenderProps(className, base())}>\n      {label && <Label>{label}</Label>}\n      {children}\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </ComboboxPrimitive>\n  )\n}\n\ntype ListBoxPickerProps<T extends object> = React.ComponentProps<typeof ListBox<T>>\n\ninterface ListProps<T extends object>\n  extends ListBoxPickerProps<T>,\n    Omit<PopoverPrimitiveProps, \"children\" | \"className\" | \"style\"> {}\n\nconst List = <T extends object>({ children, items, ...props }: ListProps<T>) => {\n  return (\n    <Popover.Picker trigger=\"ComboBox\" isNonModal placement={props.placement}>\n      <ListBox.Picker items={items} {...props}>\n        {children}\n      </ListBox.Picker>\n    </Popover.Picker>\n  )\n}\n\nconst ComboBoxInput = (props: InputProps) => {\n  const context = useSlottedContext(ComboBoxContext)!\n  return (\n    <FieldGroup className=\"relative pl-0\">\n      <Input {...props} placeholder={props?.placeholder} />\n      <Button size=\"square-petite\" appearance=\"plain\" className={chevronButton()}>\n        {!context?.inputValue && <IconChevronLgDown className={chevronIcon()} />}\n      </Button>\n      {context?.inputValue && <ComboBoxClearButton />}\n    </FieldGroup>\n  )\n}\n\nconst ComboBoxClearButton = () => {\n  const state = React.use(ComboBoxStateContext)\n\n  return (\n    <ButtonPrimitive\n      className={clearButton()}\n      slot={null}\n      aria-label=\"Clear\"\n      onPress={() => {\n        state?.setSelectedKey(null)\n        state?.open()\n      }}\n    >\n      <IconX className=\"size-4 animate-in\" />\n    </ButtonPrimitive>\n  )\n}\n\nComboBox.Input = ComboBoxInput\nComboBox.List = List\nComboBox.Option = DropdownItem\nComboBox.Section = DropdownSection\n\nexport { ComboBox }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/combo-box.tsx"
}