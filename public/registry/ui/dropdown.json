{
  "name": "dropdown",
  "files": [
    {
      "name": "dropdown.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconCheck } from \"justd-icons\"\nimport {\n  Collection,\n  composeRenderProps,\n  Header,\n  ListBoxItem as ListBoxItemPrimitive,\n  type ListBoxItemProps,\n  ListBoxSection,\n  type SectionProps,\n  Text,\n  type TextProps\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { cn } from \"./primitive\"\n\nconst dropdownItemStyles = tv({\n  base: [\n    \"group text-fg forced-colors:text-[LinkText] flex cursor-default forced-color-adjust-none select-none items-center gap-x-1.5 rounded-[calc(var(--radius-lg)-1px)] py-2 px-2.5 relative text-base outline outline-0 forced-color:text-[Highlight] lg:text-sm\",\n    \"has-submenu:data-open:data-danger:bg-danger/20 has-submenu:data-open:data-danger:text-danger\",\n    \"data-has-submenu:data-open:bg-accent data-has-submenu:data-open:text-accent-fg data-has-submenu:data-open:*:data-[slot=icon]:text-accent-fg data-has-submenu:data-open:*:[.text-muted-fg]:text-accent-fg\",\n    \"**:data-[slot=avatar]:-mr-0.5 **:data-[slot=avatar]:size-6 sm:**:data-[slot=avatar]:size-5\",\n    \"**:data-[slot=icon]:size-4 **:data-[slot=icon]:shrink-0 **:data-[slot=icon]:text-muted-fg data-hovered:**:data-[slot=icon]:text-accent-fg data-focused:**:data-[slot=icon]:text-accent-fg data-danger:**data-[slot=icon]:text-danger/60 data-focused:data-danger:**:data-[slot=icon]:text-danger-fg\",\n    \"data-[slot=menu-radio]:*:data-[slot=icon]:size-3\",\n    \"forced-colors:**:data-[slot=icon]:text-[CanvasText] forced-colors:group-data-focused:**:data-[slot=icon]:text-[Canvas] \"\n  ],\n  variants: {\n    isDisabled: {\n      true: \"text-muted-fg forced-colors:text-[GrayText]\"\n    },\n    isFocused: {\n      false: \"data-danger:text-danger\",\n      true: [\n        \"bg-accent text-accent-fg forced-colors:text-[HighlightText] forced-colors:bg-[Highlight]\",\n        \"data-danger:bg-danger data-danger:text-danger-fg\",\n        \"[&_.text-muted-fg]:text-accent-fg/80 data-[slot=label]:text-accent-fg data-[slot=description]:text-accent-fg\"\n      ]\n    }\n  },\n  compoundVariants: [\n    {\n      isFocused: false,\n      isOpen: true,\n      className: \"bg-secondary\"\n    }\n  ]\n})\n\nconst dropdownSectionStyles = tv({\n  slots: {\n    section: \"first:-mt-[5px] xss3 flex flex-col gap-y-0.5 after:content-[''] after:block after:h-[5px]\",\n    header:\n      \"text-sm font-medium text-muted-fg px-4 py-2 truncate min-w-(--trigger-width) sticky -top-[5px] bg-secondary -mb-0.5 -mx-1 z-10 supports-[-moz-appearance:none]:bg-secondary border-y [&+*]:mt-1\"\n  }\n})\n\nconst { section, header } = dropdownSectionStyles()\n\ninterface DropdownSectionProps<T> extends SectionProps<T> {\n  title?: string\n}\n\nconst DropdownSection = <T extends object>({ className, ...props }: DropdownSectionProps<T>) => {\n  return (\n    <ListBoxSection className={section({ className })}>\n      {\"title\" in props && <Header className={header()}>{props.title}</Header>}\n      <Collection items={props.items}>{props.children}</Collection>\n    </ListBoxSection>\n  )\n}\n\nconst DropdownItem = ({ className, ...props }: ListBoxItemProps) => {\n  const textValue = props.textValue || (typeof props.children === \"string\" ? props.children : undefined)\n  return (\n    <ListBoxItemPrimitive\n      textValue={textValue}\n      className={composeRenderProps(className, (className, renderProps) =>\n        dropdownItemStyles({ ...renderProps, className })\n      )}\n      {...props}\n    >\n      {composeRenderProps(props.children, (children, { isSelected }) => (\n        <>\n          <span className=\"flex flex-1 items-center gap-2 truncate font-normal group-data-selected:font-medium\">\n            {children}\n          </span>\n\n          {isSelected && (\n            <span className=\"absolute right-2 top-3 lg:top-2.5\">\n              <IconCheck />\n            </span>\n          )}\n        </>\n      ))}\n    </ListBoxItemPrimitive>\n  )\n}\n\ninterface DropdownItemSlot extends TextProps {\n  label?: TextProps[\"children\"]\n  description?: TextProps[\"children\"]\n  classNames?: {\n    label?: TextProps[\"className\"]\n    description?: TextProps[\"className\"]\n  }\n}\n\nconst DropdownItemDetails = ({ label, description, classNames, ...props }: DropdownItemSlot) => {\n  const { slot, children, title, ...restProps } = props\n\n  return (\n    <div className=\"flex flex-col gap-y-1\" {...restProps}>\n      {label && (\n        <Text slot={slot ?? \"label\"} className={cn(\"font-medium lg:text-sm\", classNames?.label)} {...restProps}>\n          {label}\n        </Text>\n      )}\n      {description && (\n        <Text\n          slot={slot ?? \"description\"}\n          className={cn(\"text-muted-fg text-xs\", classNames?.description)}\n          {...restProps}\n        >\n          {description}\n        </Text>\n      )}\n      {!title && children}\n    </div>\n  )\n}\n\n// Note: This is not exposed component, but it's used in other components to render dropdowns.\nexport { DropdownItem, dropdownItemStyles, DropdownItemDetails, DropdownSection, dropdownSectionStyles }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/dropdown.tsx"
}