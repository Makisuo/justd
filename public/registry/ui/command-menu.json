{
  "name": "command-menu",
  "files": [
    {
      "name": "command-menu.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { IconSearch, IconX } from \"justd-icons\"\nimport type { ModalOverlayProps, SeparatorProps, TextProps } from \"react-aria-components\"\nimport { Button, Dialog, Modal, ModalOverlay, Text } from \"react-aria-components\"\nimport { twJoin } from \"tailwind-merge\"\nimport { tv } from \"tailwind-variants\"\n\nimport type { KeyboardProps } from \"./keyboard\"\nimport { Keyboard } from \"./keyboard\"\nimport { useMediaQuery } from \"./primitive\"\nimport { Separator } from \"./separator\"\n\nconst commandStyles = tv({\n  slots: {\n    command: [\n      \"flex h-svh w-full flex-col overflow-hidden rounded-md sm:h-full\",\n      \"[&_[cmdk-group-heading]]:ml-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:-mb-1.5 [&_[cmdk-group-heading]]:text-muted-fg [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_[data-slot=icon]]:size-5 [&_[cmdk-input]]:h-12\",\n      \"[&_[cmdk-item]]:py-2.5 [&_[cmdk-item]]:pl-2.5 [&_[cmdk-item]]:pr-4\"\n    ],\n    list: \"overflow-y-auto lg:pb-0 max-h-[calc(100vh-35%)] pb-16 [&:not(:has(.xda32kfseccmd))]:p-2 [&:not(:has(.xda32kfseccmd))_.s3xsprt]:my-2 overflow-x-hidden md:max-h-[456px]\",\n    input: [\n      \"flex w-full rounded-md forced-colors:focus:outline-0 bg-transparent text-base placeholder:text-muted-fg\",\n      \"focus:outline-hidden\",\n      \"disabled:opacity-50 disabled:cursor-not-allowed\"\n    ],\n    section: [\n      \"xda32kfseccmd overflow-hidden py-2 px-2 text-fg\",\n      \"[&_[cmdk-group-heading]]:select-none [&_[cmdk-group-heading]]:ml-[1px] [&_[cmdk-group-heading]]:py-2 [&_[cmdk-group-heading]]:text-[0.8rem] [&_[cmdk-group-heading]]:text-muted-fg\"\n    ],\n    modal: [\n      \"fixed bottom-0 left-[50%] top-auto z-50 grid h-[calc(100vh-35%)] w-full max-w-full translate-x-[-50%] gap-4 overflow-hidden rounded-t-2xl bg-overlay text-overlay-fg shadow-lg forced-colors:border ring-1 ring-fg/10 dark:ring-border sm:bottom-auto sm:top-[6rem] sm:h-auto sm:w-full sm:max-w-2xl sm:rounded-xl\",\n      \"sm:data-entering:slide-in-from-bottom-auto data-entering:duration-300 data-entering:animate-in data-entering:fade-in-0 data-entering:slide-in-from-bottom-1/2 data-entering:[transition-timing-function:ease-out] sm:data-entering:duration-300 sm:data-entering:slide-in-from-top-[2rem]\",\n      \"data-exiting:duration-200 data-exiting:animate-out data-exiting:fade-out-0 data-exiting:slide-out-to-bottom-1/2 data-exiting:[transition-timing-function:ease] sm:data-exiting:slide-out-to-top-[4rem]\"\n    ],\n    closeButton: [\n      \"absolute right-3 top-1.5 [&>span>[data-slot=icon]]:text-muted-fg **:data-[slot=icon]:data-pressed:text-fg lg:top-3.5 rounded-full border lg:border-border border-transparent lg:bg-secondary/50 py-2.5 px-2.5 lg:py-0.5 text-xs transition-opacity data-[state=open]:bg-secondary data-[state=open]:text-muted-fg lg:focus:border-fg/70 data-focused:outline-hidden lg:focus:ring-2 lg:data-focused:ring-ring data-disabled:pointer-events-none\",\n      \"focus:outline-hidden lg:data-focused:bg-primary/10 lg:data-focused:ring-2 lg:data-focused:ring-primary/20 lg:data-focused:border-primary/70\",\n      \"disabled:pointer-events-none\"\n    ],\n    empty: \"py-6 text-center text-sm text-muted-fg x3tmpy\",\n    kbdKeyboard: \"lg:block hidden group-data-[selected=true]:opacity-60\",\n    description: \"sm:inline hidden text-sm ml-auto\",\n    item: [\n      \"group relative flex forced-colors:outline-0 cursor-default select-none text-fg items-center rounded-lg py-2 text-sm outline-hidden\",\n      \"data-[selected=true]:bg-accent forced-colors:data-[selected=true]:bg-[Highlight] forced-colors:data-[selected=true]:text-[ActiveCaption] forced-colors:text-[WindowText] data-[selected=true]:text-accent-fg [&[data-selected=true]_[data-slot=icon]]:text-accent-fg\",\n      \"focus-visible:bg-accent focus-visible:text-accent-fg [&:focus-visible_[data-slot=icon]]:text-accent-fg\",\n      \"data-[danger=true]:text-danger data-[danger=true]:data-[selected=true]:bg-danger data-[danger=true]:data-[selected=true]:text-danger-fg\",\n      \"data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50\",\n      \"**:data-[slot=icon]:mr-2 **:data-[slot=icon]:size-[1.10rem] **:data-[slot=icon]:shrink-0 **:data-[slot=icon]:text-muted-fg\",\n      \"**:data-[slot=avatar]:mr-2 **:data-[slot=avatar]:size-[1.10rem] **:data-[slot=avatar]:shrink-0\",\n      \"forced-colors:**:data-[slot=icon]:text-[CanvasText] forced-colors:group-data-[focus]:**:data-[slot=icon]:text-[Canvas] \"\n    ]\n  },\n\n  variants: {\n    isDanger: {\n      true: \"text-danger data-[selected=true]:bg-danger data-[selected=true]:text-danger-fg [&[data-selected=true]_[data-slot=icon]]:text-danger-fg\"\n    }\n  }\n})\n\nconst { command, empty, section, list, item, closeButton, modal, input, kbdKeyboard, description } = commandStyles()\n\ninterface CommandMenuContextProps {\n  hideSearchIndicator?: boolean\n  hideCloseButton?: boolean\n  messageOnEmpty?: boolean | string\n  isBlurred?: boolean\n}\n\nconst CommandMenuContext = React.createContext<CommandMenuContextProps>({})\n\ninterface CommandMenuRootProps {\n  CommandMenuEmpty?: typeof CommandMenuEmpty\n  CommandMenuInput?: typeof CommandMenuInput\n  CommandMenuItem?: typeof CommandMenuItem\n  CommandMenuKeyboard?: typeof CommandMenuKeyboard\n  CommandMenuList?: typeof CommandMenuList\n  CommandMenuSection?: typeof CommandMenuSection\n  CommandMenuSeparator?: typeof CommandMenuSeparator\n  CommandMenuDescription?: typeof CommandMenuDescription\n}\n\nconst modalOverlay = tv({\n  base: [\n    \"fixed inset-0 max-h-(--visual-viewport-height) z-50 bg-dark/15 dark:bg-dark/40 data-entering:animate-in data-entering:fade-in-0 exiting:animate-in exiting:fade-out-0\"\n  ],\n  variants: {\n    isBlurred: {\n      true: \"backdrop-blur\",\n      false: \"bg-dark/15 dark:bg-dark/40\"\n    }\n  }\n})\ninterface CommandMenuProps extends ModalOverlayProps, CommandMenuRootProps, CommandMenuContextProps {\n  children: React.ReactNode\n  value?: string\n  messageOnEmpty?: boolean | string\n  onValueChange?: (value: string) => void\n  classNames?: {\n    overlay?: string\n    content?: string\n  }\n}\n\nconst CommandMenu = ({\n  classNames,\n  hideSearchIndicator = false,\n  hideCloseButton = false,\n  messageOnEmpty,\n  value,\n  onValueChange,\n  children,\n  isBlurred = false,\n  ...props\n}: CommandMenuProps) => {\n  const isDesktop = useMediaQuery(\"(min-width: 1024px)\")\n\n  return (\n    <CommandMenuContext.Provider value={{ hideSearchIndicator, hideCloseButton, messageOnEmpty }}>\n      <ModalOverlay\n        isDismissable\n        className={modalOverlay({\n          isBlurred,\n          className: classNames?.overlay\n        })}\n        {...props}\n      >\n        <Modal className={modal({ className: classNames?.content })}>\n          <Dialog className=\"outline-hidden\" aria-label=\"Command Palette\">\n            <>\n              <CommandPrimitive value={value} onValueChange={onValueChange} className={command()}>\n                {children}\n              </CommandPrimitive>\n              {!hideCloseButton && (\n                <Button autoFocus={!isDesktop} slot=\"close\" className={closeButton()}>\n                  <span className=\"lg:block hidden\">Esc</span>\n                  <span className=\"lg:hidden -mr-2 block\">\n                    <IconX />\n                    <span className=\"sr-only\">Close command palette</span>\n                  </span>\n                </Button>\n              )}\n            </>\n          </Dialog>\n        </Modal>\n      </ModalOverlay>\n    </CommandMenuContext.Provider>\n  )\n}\n\ntype CommandMenuInputProps = React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n\nconst CommandMenuInput = React.forwardRef<React.ElementRef<typeof CommandPrimitive.Input>, CommandMenuInputProps>(\n  ({ className, ...props }, ref) => {\n    const { hideSearchIndicator } = React.useContext(CommandMenuContext)\n    return (\n      <div className=\"flex border-b items-center px-3\">\n        {!hideSearchIndicator && <IconSearch className=\"mr-2 size-5 shrink-0 opacity-50\" />}\n        <CommandPrimitive.Input\n          autoFocus\n          ref={ref}\n          className={input({ className: hideSearchIndicator ? \"pl-1\" : className })}\n          {...props}\n        />\n      </div>\n    )\n  }\n)\n\nCommandMenuInput.displayName = CommandPrimitive.Input.displayName\n\ntype CommandMenuListProps = React.ComponentProps<typeof CommandPrimitive.List>\n\nconst CommandMenuList = ({ className, ...props }: CommandMenuListProps) => {\n  const { messageOnEmpty } = React.useContext(CommandMenuContext)\n  return (\n    <CommandPrimitive.List className={list({ className })} {...props}>\n      {messageOnEmpty !== false && (\n        <CommandMenuEmpty>{typeof messageOnEmpty === \"string\" ? messageOnEmpty : \"No results found.\"}</CommandMenuEmpty>\n      )}\n      {props.children}\n    </CommandPrimitive.List>\n  )\n}\n\ntype CommandMenuEmptyProps = React.ComponentProps<typeof CommandPrimitive.Empty>\n\nconst CommandMenuEmpty = ({ className, ...props }: CommandMenuEmptyProps) => {\n  return <CommandPrimitive.Empty className={empty({ className })} {...props} />\n}\n\ninterface CommandSectionProps extends React.ComponentProps<typeof CommandPrimitive.Group> {\n  separator?: boolean\n}\n\nconst CommandMenuSection = ({ className, separator, ...props }: CommandSectionProps) => {\n  return (\n    <>\n      <CommandPrimitive.Group className={section({ className })} {...props}>\n        {props.children}\n        {separator && <CommandMenuSeparator className=\"mt-2\" />}\n      </CommandPrimitive.Group>\n    </>\n  )\n}\n\nconst CommandMenuSeparator = ({ className, ...props }: SeparatorProps) => {\n  return (\n    <div className=\"-mx-4 s3xsprt\">\n      <Separator className={className} {...props} orientation=\"horizontal\" />\n    </div>\n  )\n}\n\ninterface CommandItemProps extends React.ComponentProps<typeof CommandPrimitive.Item> {\n  isDanger?: boolean\n}\n\nconst CommandMenuItem = ({ isDanger, className, ...props }: CommandItemProps) => {\n  return (\n    <CommandPrimitive.Item\n      data-danger={isDanger ? \"true\" : undefined}\n      className={item({ isDanger, className })}\n      {...props}\n    />\n  )\n}\n\ninterface CommandMenuDescriptionProps extends TextProps {\n  intent?: \"danger\" | \"warning\" | \"primary\" | \"secondary\" | \"success\"\n}\n\nconst CommandMenuDescription = ({ intent, className, ...props }: CommandMenuDescriptionProps) => {\n  return (\n    <Text\n      {...props}\n      slot=\"description\"\n      className={description({\n        className: twJoin(\n          intent === \"danger\"\n            ? \"group-data-[selected=true]:text-accent-fg/70 text-danger/90\"\n            : intent === \"warning\"\n              ? \"group-data-[selected=true]:text-accent-fg/70 text-warning/90\"\n              : intent === \"success\"\n                ? \"group-data-[selected=true]:text-accent-fg/70 text-success/90\"\n                : intent === \"primary\"\n                  ? \"group-data-[selected=true]:text-white/70 text-accent/90\"\n                  : \"group-data-[selected=true]:text-accent-fg/70 text-muted-fg\",\n          className\n        )\n      })}\n    />\n  )\n}\n\nconst CommandMenuKeyboard = (props: KeyboardProps) => (\n  <Keyboard classNames={{ kbd: kbdKeyboard(), base: \"-mr-2.5\" }} {...props} />\n)\n\nCommandMenu.Empty = CommandMenuEmpty\nCommandMenu.Input = CommandMenuInput\nCommandMenu.Item = CommandMenuItem\nCommandMenu.Keyboard = CommandMenuKeyboard\nCommandMenu.List = CommandMenuList\nCommandMenu.Section = CommandMenuSection\nCommandMenu.Separator = CommandMenuSeparator\nCommandMenu.Description = CommandMenuDescription\n\nexport { CommandMenu }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/command-menu.tsx"
}