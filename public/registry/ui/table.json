{
  "name": "table",
  "files": [
    {
      "name": "table.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconChevronLgDown, IconHamburger } from \"justd-icons\"\nimport type {\n  CellProps,\n  ColumnProps,\n  ColumnResizerProps,\n  RowProps,\n  TableBodyProps,\n  TableHeaderProps,\n  TableProps as TablePrimitiveProps\n} from \"react-aria-components\"\nimport {\n  Button,\n  Cell,\n  Collection,\n  Column,\n  ColumnResizer as ColumnResizerPrimitive,\n  composeRenderProps,\n  ResizableTableContainer,\n  Row,\n  Table as TablePrimitive,\n  TableBody,\n  TableHeader,\n  useTableOptions\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Checkbox } from \"./checkbox\"\nimport { cn } from \"./primitive\"\n\nconst table = tv({\n  slots: {\n    root: \"table **:data-drop-target:border **:data-drop-target:border-primary w-full caption-bottom border-spacing-0 text-sm outline-hidden\",\n    header: \"border-b x32\",\n    row: \"tr group relative cursor-default border-b text-fg/70 outline-hidden ring-primary data-focused:ring-0 data-focus-visible:ring-1 data-selected:bg-accent-subtle data-selected:data-hovered:bg-accent-subtle/50 dark:data-selected:data-hovered:bg-accent-subtle/60\",\n    cellIcon:\n      \"flex-none rounded bg-secondary text-fg *:data-[slot=icon]:shrink-0 *:data-[slot=icon]:size-3.5 *:data-[slot=icon]:transition-transform *:data-[slot=icon]:duration-200 size-[1.15rem] grid place-content-center shrink-0\",\n    columnResizer: [\n      \"touch-none absolute [&[data-resizing]>div]:bg-primary right-0 top-0 bottom-0 w-px px-1 grid place-content-center\",\n      \"data-[resizable-direction=both]:cursor-ew-resize &[data-resizable-direction=left]:cursor-e-resize &[data-resizable-direction=right]:cursor-w-resize\"\n    ]\n  }\n})\n\nconst { root, header, row, cellIcon, columnResizer } = table()\n\ninterface TableProps extends TablePrimitiveProps {\n  className?: string\n  allowResize?: boolean\n}\n\nconst TableContext = React.createContext<TableProps>({\n  allowResize: false\n})\n\nconst useTableContext = () => React.useContext(TableContext)\n\nconst Table = ({ children, className, ...props }: TableProps) => (\n  <TableContext.Provider value={props}>\n    <div className=\"relative w-full overflow-auto\">\n      {props.allowResize ? (\n        <ResizableTableContainer className=\"overflow-auto\">\n          <TablePrimitive {...props} className={root({ className })}>\n            {children}\n          </TablePrimitive>\n        </ResizableTableContainer>\n      ) : (\n        <TablePrimitive {...props} className={root({ className })}>\n          {children}\n        </TablePrimitive>\n      )}\n    </div>\n  </TableContext.Provider>\n)\n\nconst ColumnResizer = ({ className, ...props }: ColumnResizerProps) => (\n  <ColumnResizerPrimitive\n    {...props}\n    className={composeRenderProps(className, (className, renderProps) =>\n      columnResizer({\n        ...renderProps,\n        className\n      })\n    )}\n  >\n    <div className=\"bg-border h-full w-px py-3\" />\n  </ColumnResizerPrimitive>\n)\n\nconst Body = <T extends object>(props: TableBodyProps<T>) => (\n  <TableBody {...props} className={cn(\"[&_.tr:last-child]:border-0\")} />\n)\n\ninterface TableCellProps extends CellProps {\n  className?: string\n}\n\nconst cellStyles = tv({\n  base: \"group px-3 py-3 outline-hidden\",\n  variants: {\n    allowResize: {\n      true: \"overflow-hidden truncate\"\n    }\n  }\n})\nconst TableCell = ({ children, className, ...props }: TableCellProps) => {\n  const { allowResize } = useTableContext()\n  return (\n    <Cell {...props} className={cellStyles({ allowResize, className })}>\n      {children}\n    </Cell>\n  )\n}\n\nconst columnStyles = tv({\n  base: \"whitespace-nowrap relative allows-sorting:cursor-pointer px-3 py-3 text-left data-dragging:cursor-grabbing font-medium outline-hidden [&:has([slot=selection])]:pr-0\",\n  variants: {\n    isResizable: {\n      true: \"overflow-hidden truncate\"\n    }\n  }\n})\n\ninterface TableColumnProps extends ColumnProps {\n  className?: string\n  isResizable?: boolean\n}\n\nconst TableColumn = ({ isResizable = false, className, ...props }: TableColumnProps) => {\n  return (\n    <Column\n      {...props}\n      className={columnStyles({\n        isResizable,\n        className\n      })}\n    >\n      {({ allowsSorting, sortDirection, isHovered }) => (\n        <div className=\"flex **:data-[slot=icon]:shrink-0 items-center gap-2\">\n          <>\n            {props.children as React.ReactNode}\n            {allowsSorting && (\n              <>\n                <span className={cellIcon({ className: isHovered ? \"bg-secondary-fg/10\" : \"\" })}>\n                  <IconChevronLgDown className={sortDirection === \"ascending\" ? \"rotate-180\" : \"\"} />\n                </span>\n              </>\n            )}\n            {isResizable && <ColumnResizer />}\n          </>\n        </div>\n      )}\n    </Column>\n  )\n}\n\ninterface HeaderProps<T extends object> extends TableHeaderProps<T> {\n  className?: string\n}\n\nconst Header = <T extends object>({ children, className, columns, ...props }: HeaderProps<T>) => {\n  const { selectionBehavior, selectionMode, allowsDragging } = useTableOptions()\n  return (\n    <TableHeader {...props} className={header({ className })}>\n      {allowsDragging && <Column className=\"w-0\" />}\n      {selectionBehavior === \"toggle\" && (\n        <Column className=\"pl-4 w-0\">{selectionMode === \"multiple\" && <Checkbox slot=\"selection\" />}</Column>\n      )}\n      <Collection items={columns}>{children}</Collection>\n    </TableHeader>\n  )\n}\n\ninterface TableRowProps<T extends object> extends RowProps<T> {\n  className?: string\n}\n\nconst TableRow = <T extends object>({ children, className, columns, id, ...props }: TableRowProps<T>) => {\n  const { selectionBehavior, allowsDragging } = useTableOptions()\n  return (\n    <Row\n      id={id}\n      {...props}\n      className={row({\n        className:\n          \"href\" in props\n            ? cn(\"cursor-pointer data-hovered:bg-secondary/50 data-hovered:text-secondary-fg\", className)\n            : \"\"\n      })}\n    >\n      {allowsDragging && (\n        <Cell className=\"ring-primary pr-0 group cursor-grab data-dragging:cursor-grabbing\">\n          <Button className=\"relative bg-transparent pl-3.5 py-1.5 text-muted-fg data-pressed:text-fg\" slot=\"drag\">\n            <IconHamburger />\n          </Button>\n        </Cell>\n      )}\n      {selectionBehavior === \"toggle\" && (\n        <Cell className=\"pl-4\">\n          <span\n            aria-hidden\n            className=\"absolute inset-y-0 left-0 hidden h-full w-0.5 bg-primary group-data-selected:block\"\n          />\n          <Checkbox slot=\"selection\" />\n        </Cell>\n      )}\n      <Collection items={columns}>{children}</Collection>\n    </Row>\n  )\n}\n\nTable.Body = Body\nTable.Cell = TableCell\nTable.Column = TableColumn\nTable.Header = Header\nTable.Row = TableRow\n\nexport { Table }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/table.tsx"
}