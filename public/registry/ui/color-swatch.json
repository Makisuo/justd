{
  "name": "color-swatch",
  "files": [
    {
      "name": "color-swatch.tsx",
      "content": "\"use client\"\n\nimport { parseColor } from \"@react-stately/color\"\nimport { ColorSwatch as ColorSwatchPrimitive, type ColorSwatchProps } from \"react-aria-components\"\n\nimport { cn } from \"./primitive\"\n\nconst hexToRgb = (hex: string): { r: number; g: number; b: number } | null => {\n  const normalizeHex = hex.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, (_m, r, g, b) => r + r + g + g + b + b)\n\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(normalizeHex)\n  return result\n    ? {\n        r: Number.parseInt(result[1], 16),\n        g: Number.parseInt(result[2], 16),\n        b: Number.parseInt(result[3], 16),\n      }\n    : null\n}\n\nconst hsbToRgb = (h: number, s: number, b: number): { r: number; g: number; b: number } => {\n  const saturation = s / 100\n  const brightness = b / 100\n  const k = (n: number) => (n + h / 60) % 6\n  const f = (n: number) => brightness * (1 - saturation * Math.max(0, Math.min(k(n), 4 - k(n), 1)))\n  return {\n    r: Math.round(255 * f(5)),\n    g: Math.round(255 * f(3)),\n    b: Math.round(255 * f(1)),\n  }\n}\n\nconst luminance = (r: number, g: number, b: number): number => {\n  const a = [r, g, b].map((v) => {\n    const normalized = v / 255\n    return normalized <= 0.03928 ? normalized / 12.92 : ((normalized + 0.055) / 1.055) ** 2.4\n  })\n  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722\n}\n\ntype HSBColor = {\n  hue: number\n  saturation: number\n  brightness: number\n}\n\nconst isBrightColor = (color: string | HSBColor): boolean => {\n  let r: number\n  let g: number\n  let b: number\n\n  if (typeof color === \"string\") {\n    if (color.startsWith(\"#\")) {\n      const rgb = hexToRgb(color)\n      if (rgb) {\n        r = rgb.r\n        g = rgb.g\n        b = rgb.b\n      } else {\n        return false\n      }\n    } else if (color.startsWith(\"rgb\")) {\n      const rgbValues = color.match(/\\d+/g)\n      if (rgbValues) {\n        r = Number.parseInt(rgbValues[0], 10)\n        g = Number.parseInt(rgbValues[1], 10)\n        b = Number.parseInt(rgbValues[2], 10)\n      } else {\n        return false\n      }\n    } else {\n      const namedColors: Record<string, string> = {\n        white: \"#ffffff\",\n        black: \"#000000\",\n      }\n      const hex = namedColors[color.toLowerCase()]\n      if (hex) {\n        const rgb = hexToRgb(hex)\n        if (rgb) {\n          r = rgb.r\n          g = rgb.g\n          b = rgb.b\n        } else {\n          return false\n        }\n      } else {\n        return false\n      }\n    }\n  } else if (typeof color === \"object\" && \"hue\" in color && \"saturation\" in color && \"brightness\" in color) {\n    const rgb = hsbToRgb(color.hue, color.saturation, color.brightness)\n    r = rgb.r\n    g = rgb.g\n    b = rgb.b\n  } else {\n    return false\n  }\n\n  const lum = luminance(r, g, b)\n  return lum > 0.75\n}\n\nconst defaultColor = parseColor(\"hsl(216, 98%, 52%)\")\n\nconst ColorSwatch = ({ className, ...props }: ColorSwatchProps) => {\n  const color = props.color?.toString() ?? \"\"\n  const needRing = color ? isBrightColor(color) : false\n  return (\n    <ColorSwatchPrimitive\n      data-slot=\"color-swatch\"\n      aria-label={props[\"aria-label\"] ?? \"Color swatch\"}\n      className={cn(\"cs size-8 shrink-0 rounded-md\", needRing && \"ring-1 ring-fg/10 ring-inset\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { ColorSwatch, isBrightColor, defaultColor }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/color-swatch.tsx"
}