{
  "name": "text-field",
  "files": [
    {
      "name": "text-field.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\n\nimport type { TextInputDOMProps } from \"@react-types/shared\"\nimport { IconEye, IconEyeClosed } from \"justd-icons\"\nimport {\n  Button as ButtonPrimitive,\n  TextField as TextFieldPrimitive,\n  type TextFieldProps as TextFieldPrimitiveProps,\n} from \"react-aria-components\"\nimport { twJoin } from \"tailwind-merge\"\n\nimport type { FieldProps } from \"./field\"\nimport { Description, FieldError, FieldGroup, Input, Label } from \"./field\"\nimport { Loader } from \"./loader\"\nimport { composeTailwindRenderProps } from \"./primitive\"\n\ntype InputType = Exclude<TextInputDOMProps[\"type\"], \"password\">\n\ninterface BaseTextFieldProps extends TextFieldPrimitiveProps, FieldProps {\n  prefix?: React.ReactNode\n  suffix?: React.ReactNode\n  isPending?: boolean\n  className?: string\n}\n\ninterface RevealableTextFieldProps extends BaseTextFieldProps {\n  isRevealable: true\n  type: \"password\"\n}\n\ninterface NonRevealableTextFieldProps extends BaseTextFieldProps {\n  isRevealable?: never\n  type?: InputType\n}\n\ntype TextFieldProps = RevealableTextFieldProps | NonRevealableTextFieldProps\n\nconst TextField = ({\n  placeholder,\n  label,\n  description,\n  errorMessage,\n  prefix,\n  suffix,\n  isPending,\n  className,\n  isRevealable,\n  type,\n  ...props\n}: TextFieldProps) => {\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false)\n  const inputType = isRevealable ? (isPasswordVisible ? \"text\" : \"password\") : type\n  const handleTogglePasswordVisibility = () => {\n    setIsPasswordVisible((prev) => !prev)\n  }\n  return (\n    <TextFieldPrimitive\n      type={inputType}\n      {...props}\n      className={composeTailwindRenderProps(className, \"group flex flex-col gap-y-1.5\")}\n    >\n      {label && <Label>{label}</Label>}\n      <FieldGroup\n        isInvalid={!!errorMessage}\n        isDisabled={props.isDisabled}\n        className={twJoin(\n          \"**:[button]:size-7 **:[button]:shrink-0 **:[button]:p-0\",\n          \"[&>[data-slot=suffix]>button]:mr-[calc(var(--spacing)*-1.15)] [&>[data-slot=suffix]>button]:rounded-md [&>[data-slot=suffix]>button]:data-focus-visible:outline-1 [&>[data-slot=suffix]>button]:data-focus-visible:outline-offset-1\",\n          \"[&>[data-slot=prefix]>button]:mr-[calc(var(--spacing)*-1.15)] [&>[data-slot=prefix]>button]:rounded-md [&>[data-slot=prefix]>button]:data-focus-visible:outline-1 [&>[data-slot=prefix]>button]:data-focus-visible:outline-offset-1\",\n        )}\n        data-loading={isPending ? \"true\" : undefined}\n      >\n        {prefix ? (\n          <span data-slot=\"prefix\" className=\"atrs x2e2\">\n            {prefix}\n          </span>\n        ) : null}\n        <Input placeholder={placeholder} />\n        {isRevealable ? (\n          <ButtonPrimitive\n            type=\"button\"\n            aria-label=\"Toggle password visibility\"\n            onPress={handleTogglePasswordVisibility}\n            className=\"relative mr-1 grid shrink-0 place-content-center rounded-sm border-transparent outline-hidden data-focus-visible:*:data-[slot=icon]:text-primary *:data-[slot=icon]:text-muted-fg\"\n          >\n            {isPasswordVisible ? <IconEyeClosed /> : <IconEye />}\n          </ButtonPrimitive>\n        ) : isPending ? (\n          <Loader variant=\"spin\" data-slot=\"suffix\" />\n        ) : suffix ? (\n          <span data-slot=\"suffix\">{suffix}</span>\n        ) : null}\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </TextFieldPrimitive>\n  )\n}\n\nexport { TextField, TextFieldPrimitive, type TextFieldProps }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/text-field.tsx"
}