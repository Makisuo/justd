{
  "name": "popover",
  "files": [
    {
      "name": "popover.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type {\n  DialogTriggerProps,\n  ModalOverlayProps,\n  PopoverProps as PopoverPrimitiveProps\n} from \"react-aria-components\"\nimport {\n  composeRenderProps,\n  type DialogProps,\n  DialogTrigger,\n  Modal,\n  ModalOverlay,\n  OverlayArrow,\n  Popover as PopoverPrimitive,\n  PopoverContext,\n  useSlottedContext\n} from \"react-aria-components\"\nimport { twJoin } from \"tailwind-merge\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Dialog } from \"./dialog\"\nimport { cn, useMediaQuery } from \"./primitive\"\n\nconst Popover = ({ children, ...props }: DialogTriggerProps) => {\n  return <DialogTrigger {...props}>{children}</DialogTrigger>\n}\n\nconst Title = ({ level = 2, className, ...props }: React.ComponentProps<typeof Dialog.Title>) => (\n  <Dialog.Title className={cn(\"sm:leading-none\", level === 2 && \"sm:text-lg\", className)} {...props} />\n)\n\nconst Header = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <Dialog.Header className={cn(\"p-0 sm:pt-0\", className)} {...props} />\n)\n\nconst Footer = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <Dialog.Footer className={cn(\"pb-0 pt-4 sm:pb-0\", className)} {...props} />\n)\n\nconst Body = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <Dialog.Body className={cn(\"sm:p-0\", className)} {...props} />\n)\n\nconst popoverContentStyles = tv({\n  base: [\n    \"max-w-xs transition-transform p-4 rounded-xl border bg-overlay bg-clip-padding text-overlay-fg shadow-xs dark:backdrop-saturate-200 lg:text-sm sm:max-w-3xl forced-colors:bg-[Canvas] [&::-webkit-scrollbar]:size-0.5 [scrollbar-width:thin]\"\n  ],\n  variants: {\n    isPicker: { true: \"max-h-72 min-w-(--trigger-width) overflow-y-auto p-0\", false: \"min-w-80\" },\n    isMenu: {\n      true: {\n        true: \"p-0\"\n      }\n    },\n    isEntering: {\n      true: [\n        \"duration-100 ease-out animate-in fade-in\",\n        \"data-[placement=left]:slide-in-from-right-1 data-[placement=right]:slide-in-from-left-1 data-[placement=top]:slide-in-from-bottom-1 data-[placement=bottom]:slide-in-from-top-1\"\n      ]\n    },\n    isExiting: {\n      true: [\n        \"duration-50 ease-in animate-out fade-out\",\n        \"data-[placement=left]:slide-out-to-right-1 data-[placement=right]:slide-out-to-left-1 data-[placement=top]:slide-out-to-bottom-1 data-[placement=bottom]:slide-out-to-top-1\"\n      ]\n    }\n  }\n})\n\nconst drawerStyles = tv({\n  base: [\n    \"fixed max-h-full bottom-0 top-auto z-50 w-full bg-overlay max-w-2xl border border-b-transparent outline-hidden\"\n  ],\n  variants: {\n    isMenu: {\n      true: \"p-0 [&_[role=dialog]]:px-0 rounded-t-xl\",\n      false: \"py-4 rounded-t-2xl\"\n    },\n    isEntering: {\n      true: [\n        \"[will-change:transform] [transition:transform_0.5s_cubic-bezier(0.32,_0.72,_0,_1)]\",\n        \"animate-in duration-200 fade-in-0 slide-in-from-bottom-56\",\n        \"[transition:translate3d(0,_100%,_0)]\",\n        \"sm:slide-in-from-bottom-auto sm:slide-in-from-top-[20%]\"\n      ]\n    },\n    isExiting: {\n      true: \"duration-200 ease-in animate-out slide-out-to-bottom-56\"\n    }\n  }\n})\n\ninterface PopoverProps\n  extends Omit<React.ComponentProps<typeof Modal>, \"children\">,\n    Omit<PopoverPrimitiveProps, \"children\" | \"className\">,\n    Omit<ModalOverlayProps, \"className\"> {\n  children: React.ReactNode\n  showArrow?: boolean\n  style?: React.CSSProperties\n  respectScreen?: boolean\n  \"aria-label\"?: DialogProps[\"aria-label\"]\n  \"aria-labelledby\"?: DialogProps[\"aria-labelledby\"]\n  className?: string | ((values: { defaultClassName?: string }) => string)\n}\n\nconst Content = ({ respectScreen = true, children, showArrow = true, className, ...props }: PopoverProps) => {\n  const isMobile = useMediaQuery(\"(max-width: 600px)\")\n  const popoverContext = useSlottedContext(PopoverContext)!\n  const isMenuTrigger = popoverContext?.trigger === \"MenuTrigger\"\n  const isSubmenuTrigger = popoverContext?.trigger === \"SubmenuTrigger\"\n  const isMenu = isMenuTrigger || isSubmenuTrigger\n  const offset = showArrow ? 12 : 8\n  const effectiveOffset = isSubmenuTrigger ? offset - 5 : offset\n  return isMobile && respectScreen ? (\n    <ModalOverlay\n      className={twJoin(\n        \"fixed left-0 top-0 isolate z-50 h-(--visual-viewport-height) w-full bg-overlay/10 [--visual-viewport-vertical-padding:16px]\",\n        isSubmenuTrigger ? \"bg-overlay/10\" : \"\"\n      )}\n      {...props}\n      isDismissable\n    >\n      <Modal\n        className={composeRenderProps(className, (className, renderProps) =>\n          drawerStyles({ ...renderProps, isMenu, className })\n        )}\n      >\n        <Dialog aria-label={isMenu ? \"Menu\" : props[\"aria-label\"]} className=\"touch-none data-focused:outline-hidden\">\n          {children}\n        </Dialog>\n      </Modal>\n    </ModalOverlay>\n  ) : (\n    <PopoverPrimitive\n      offset={effectiveOffset}\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) =>\n        popoverContentStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    >\n      {showArrow && (\n        <OverlayArrow className=\"group\">\n          <svg\n            width={12}\n            height={12}\n            viewBox=\"0 0 12 12\"\n            className=\"block fill-overlay stroke-border group-data-[placement=left]:-rotate-90 group-data-[placement=right]:rotate-90 group-data-[placement=bottom]:rotate-180 forced-colors:fill-[Canvas] forced-colors:stroke-[ButtonBorder]\"\n          >\n            <path d=\"M0 0 L6 6 L12 0\" />\n          </svg>\n        </OverlayArrow>\n      )}\n      {children}\n    </PopoverPrimitive>\n  )\n}\n\nconst Picker = ({ children, className, ...props }: PopoverProps) => {\n  return (\n    <PopoverPrimitive\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) =>\n        popoverContentStyles({\n          ...renderProps,\n          isPicker: true,\n          class: cn(\"max-h-72 min-w-(--trigger-width) overflow-y-auto p-0\", className)\n        })\n      )}\n    >\n      {children}\n    </PopoverPrimitive>\n  )\n}\n\nPopover.Primitive = PopoverPrimitive\nPopover.Trigger = Dialog.Trigger\nPopover.Close = Dialog.Close\nPopover.Content = Content\nPopover.Description = Dialog.Description\nPopover.Body = Body\nPopover.Footer = Footer\nPopover.Header = Header\nPopover.Picker = Picker\nPopover.Title = Title\n\nexport { Popover, drawerStyles, popoverContentStyles }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/popover.tsx"
}