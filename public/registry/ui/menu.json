{
  "name": "menu",
  "files": [
    {
      "name": "menu.tsx",
      "content": "\"use client\"\n\nimport { createContext, use } from \"react\"\n\nimport { IconBulletFill, IconCheck, IconChevronLgRight } from \"justd-icons\"\nimport type {\n  ButtonProps,\n  MenuItemProps as MenuItemPrimitiveProps,\n  MenuProps as MenuPrimitiveProps,\n  MenuSectionProps,\n  MenuTriggerProps as MenuTriggerPrimitiveProps,\n  PopoverProps,\n  SeparatorProps,\n} from \"react-aria-components\"\nimport {\n  Button,\n  Collection,\n  Header,\n  MenuItem,\n  Menu as MenuPrimitive,\n  MenuSection,\n  MenuTrigger as MenuTriggerPrimitive,\n  Separator,\n  SubmenuTrigger as SubmenuTriggerPrimitive,\n  composeRenderProps,\n} from \"react-aria-components\"\nimport type { VariantProps } from \"tailwind-variants\"\nimport { tv } from \"tailwind-variants\"\n\nimport { DropdownItemDetails, dropdownItemStyles, dropdownSectionStyles } from \"./dropdown\"\nimport { Keyboard } from \"./keyboard\"\nimport { Popover } from \"./popover\"\nimport { cn } from \"./primitive\"\n\ninterface MenuContextProps {\n  respectScreen: boolean\n}\n\nconst MenuContext = createContext<MenuContextProps>({ respectScreen: true })\n\ninterface MenuProps extends MenuTriggerPrimitiveProps {\n  respectScreen?: boolean\n}\n\nconst Menu = ({ respectScreen = true, ...props }: MenuProps) => {\n  return (\n    <MenuContext value={{ respectScreen }}>\n      <MenuTriggerPrimitive {...props}>{props.children}</MenuTriggerPrimitive>\n    </MenuContext>\n  )\n}\n\nconst SubMenu = ({ delay = 0, ...props }) => (\n  <SubmenuTriggerPrimitive {...props} delay={delay}>\n    {props.children}\n  </SubmenuTriggerPrimitive>\n)\n\nconst menuStyles = tv({\n  slots: {\n    menu: \"max-h-[calc(var(--visual-viewport-height)-10rem)] sm:max-h-[inherit] overflow-auto rounded-xl p-1 outline-hidden [clip-path:inset(0_0_0_0_round_calc(var(--radius-lg)-2px))]\",\n    popover: \"z-50 sm:min-w-40 p-0 outline-hidden shadow-xs\",\n    trigger: [\n      \"inline relative text-left data-focused:outline-hidden data-focus-visible:ring-1 data-focus-visible:ring-primary data-pressed:outline-hidden\",\n    ],\n  },\n})\n\nconst { menu, popover, trigger } = menuStyles()\n\ninterface MenuTriggerProps extends ButtonProps {\n  className?: string\n}\n\nconst Trigger = ({ className, ...props }: MenuTriggerProps) => (\n  <Button data-slot=\"menu-trigger\" className={trigger({ className })} {...props}>\n    {(values) => <>{typeof props.children === \"function\" ? props.children(values) : props.children}</>}\n  </Button>\n)\n\ninterface MenuContentProps<T> extends Omit<PopoverProps, \"children\" | \"style\">, MenuPrimitiveProps<T> {\n  className?: string\n  popoverClassName?: string\n  showArrow?: boolean\n  respectScreen?: boolean\n}\n\nconst Content = <T extends object>({\n  className,\n  showArrow = false,\n  popoverClassName,\n  ...props\n}: MenuContentProps<T>) => {\n  const { respectScreen } = use(MenuContext)\n  return (\n    <Popover.Content\n      respectScreen={respectScreen}\n      showArrow={showArrow}\n      className={popover({\n        className: cn([\n          showArrow && \"data-[placement=left]:mt-[-0.38rem] data-[placement=right]:mt-[-0.38rem]\",\n          popoverClassName,\n        ]),\n      })}\n      {...props}\n    >\n      <MenuPrimitive className={menu({ className })} {...props} />\n    </Popover.Content>\n  )\n}\n\ninterface MenuItemProps extends MenuItemPrimitiveProps, VariantProps<typeof dropdownItemStyles> {\n  isDanger?: boolean\n}\n\nconst Item = ({ className, isDanger = false, children, ...props }: MenuItemProps) => {\n  const textValue = props.textValue || (typeof children === \"string\" ? children : undefined)\n  return (\n    <MenuItem\n      className={composeRenderProps(className, (className, renderProps) =>\n        dropdownItemStyles({\n          ...renderProps,\n          className,\n        }),\n      )}\n      textValue={textValue}\n      data-danger={isDanger ? \"true\" : undefined}\n      {...props}\n    >\n      {(values) => (\n        <>\n          {typeof children === \"function\" ? children(values) : children}\n          {values.hasSubmenu && <IconChevronLgRight className=\"ml-auto gpfw size-3.5\" />}\n        </>\n      )}\n    </MenuItem>\n  )\n}\n\nexport interface MenuHeaderProps extends React.ComponentProps<typeof Header> {\n  separator?: boolean\n}\n\nconst MenuHeader = ({ className, separator = false, ...props }: MenuHeaderProps) => (\n  <Header\n    className={cn(\n      \"p-2 font-semibold text-base sm:text-sm\",\n      separator && \"-mx-1 border-b px-4 py-3 sm:px-3 sm:pb-[0.625rem]\",\n      className,\n    )}\n    {...props}\n  />\n)\n\nconst MenuSeparator = ({ className, ...props }: SeparatorProps) => (\n  <Separator className={cn(\"-mx-1 my-1 h-px border-b\", className)} {...props} />\n)\n\nconst Checkbox = ({ className, children, ...props }: MenuItemProps) => (\n  <Item className={cn(\"relative pr-8\", className)} {...props}>\n    {(values) => (\n      <>\n        {typeof children === \"function\" ? children(values) : children}\n        {values.isSelected && (\n          <span className=\"flex absolute right-2 justify-center items-center size-4 shrink-0 animate-in\">\n            <IconCheck />\n          </span>\n        )}\n      </>\n    )}\n  </Item>\n)\n\nconst Radio = ({ className, children, ...props }: MenuItemProps) => (\n  <Item className={cn(\"relative \", className)} {...props}>\n    {(values) => (\n      <>\n        {typeof children === \"function\" ? children(values) : children}\n\n        {values.isSelected && (\n          <span\n            data-slot=\"menu-radio\"\n            className=\"absolute right-3 flex animate-in items-center justify-center **:data-[slot=indicator]:size-2.5 **:data-[slot=indicator]:shrink-0\"\n          >\n            <IconBulletFill data-slot=\"indicator\" />\n          </span>\n        )}\n      </>\n    )}\n  </Item>\n)\n\nconst { section, header } = dropdownSectionStyles()\n\ninterface SectionProps<T> extends MenuSectionProps<T> {\n  title?: string\n}\n\nconst Section = <T extends object>({ className, ...props }: SectionProps<T>) => {\n  return (\n    <MenuSection className={section({ className })} {...props}>\n      {\"title\" in props && <Header className={header()}>{props.title}</Header>}\n      <Collection items={props.items}>{props.children}</Collection>\n    </MenuSection>\n  )\n}\n\nMenu.Primitive = MenuPrimitive\nMenu.Content = Content\nMenu.Header = MenuHeader\nMenu.Item = Item\nMenu.Content = Content\nMenu.Keyboard = Keyboard\nMenu.Checkbox = Checkbox\nMenu.Radio = Radio\nMenu.Section = Section\nMenu.Separator = MenuSeparator\nMenu.Trigger = Trigger\nMenu.ItemDetails = DropdownItemDetails\nMenu.Submenu = SubMenu\n\nexport { Menu, type MenuContentProps }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/menu.tsx"
}