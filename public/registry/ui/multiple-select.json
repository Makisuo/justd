{
  "name": "multiple-select",
  "files": [
    {
      "name": "multiple-select.tsx",
      "content": "\"use client\"\n\nimport { useCallback, useEffect, useId, useRef, useState } from \"react\"\n\nimport { IconChevronLgDown } from \"justd-icons\"\nimport { useFilter } from \"react-aria\"\nimport type { ComboBoxProps as ComboBoxPrimitiveProps, Key, ValidationResult } from \"react-aria-components\"\nimport { ComboBox } from \"react-aria-components\"\nimport type { ListData } from \"react-stately\"\nimport { useListData } from \"react-stately\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Button } from \"./button\"\nimport type { FieldProps } from \"./field\"\nimport { Description, FieldError, Input, Label } from \"./field\"\nimport { ListBox } from \"./list-box\"\nimport { Popover } from \"./popover\"\nimport { cn } from \"./primitive\"\nimport type { RestrictedIntent, TagGroupProps } from \"./tag-group\"\nimport { Tag, TagGroup, TagList } from \"./tag-group\"\nimport { VisuallyHidden } from \"./visually-hidden\"\n\nconst multiSelectStyles = tv({\n  slots: {\n    multiSelectField: \"group flex w-full min-w-80 flex-col\",\n    multiSelect: [\n      \"relative px-1 flex min-h-10 flex-row flex-wrap items-center rounded-lg shadow-xs border\",\n      \"has-[input[data-focused=true]]:border-ring/85\",\n      \"has-[input[data-invalid=true][data-focused=true]]:border-blue-500\",\n      \"has-[input[data-invalid=true]]:border-danger\",\n      \"has-[input[data-focused=true]]:ring-4 has-[input[data-focused=true]]:ring-ring/20\",\n    ],\n    chevronButton:\n      \"size-8 -mr-2 grid place-content-center rounded-sm data-hovered:text-fg data-focused:text-fg text-muted-fg\",\n    input: \"flex-1 py-1 px-0.5 ml-1 shadow-none ring-0\",\n    comboBoxChild: \"inline-flex flex-1 flex-wrap items-center px-0\",\n    comboBox: \"group peer flex flex-1\",\n  },\n})\n\nconst { multiSelectField, multiSelect, chevronButton, input, comboBox, comboBoxChild } = multiSelectStyles()\n\ninterface SelectedKey {\n  id: Key\n  name: string\n}\n\ninterface MultipleSelectProps<T extends object>\n  extends FieldProps,\n    Omit<\n      ComboBoxPrimitiveProps<T>,\n      | \"children\"\n      | \"validate\"\n      | \"allowsEmptyCollection\"\n      | \"inputValue\"\n      | \"selectedKey\"\n      | \"className\"\n      | \"value\"\n      | \"onSelectionChange\"\n      | \"onInputChange\"\n    >,\n    Pick<TagGroupProps, \"shape\"> {\n  intent?: RestrictedIntent\n  items: Array<T>\n  selectedItems: ListData<T>\n  className?: string\n  onItemInserted?: (key: Key) => void\n  onItemCleared?: (key: Key) => void\n  renderEmptyState?: (inputValue: string) => React.ReactNode\n  tag: (item: T) => React.ReactNode\n  children: React.ReactNode | ((item: T) => React.ReactNode)\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst MultipleSelect = <T extends SelectedKey>({\n  children,\n  items,\n  selectedItems,\n  onItemCleared,\n  onItemInserted,\n  className,\n  name,\n  renderEmptyState,\n  errorMessage,\n  ...props\n}: MultipleSelectProps<T>) => {\n  const tagGroupIdentifier = useId()\n  const triggerRef = useRef<HTMLDivElement | null>(null)\n  const [width, setWidth] = useState(0)\n\n  const { contains } = useFilter({ sensitivity: \"base\" })\n  const selectedKeys = selectedItems.items.map((i) => i.id)\n\n  const filter = useCallback(\n    (item: T, filterText: string) => {\n      return !selectedKeys.includes(item.id) && contains(item.name, filterText)\n    },\n    [contains, selectedKeys],\n  )\n\n  const accessibleList = useListData({\n    initialItems: items,\n    filter,\n  })\n\n  const [fieldState, setFieldState] = useState<{\n    selectedKey: Key | null\n    inputValue: string\n  }>({\n    selectedKey: null,\n    inputValue: \"\",\n  })\n\n  const onRemove = useCallback(\n    (keys: Set<Key>) => {\n      const key = keys.values().next().value\n      if (key) {\n        selectedItems.remove(key)\n        setFieldState({\n          inputValue: \"\",\n          selectedKey: null,\n        })\n        onItemCleared?.(key)\n      }\n    },\n    [selectedItems, onItemCleared],\n  )\n\n  const onSelectionChange = (id: Key | null) => {\n    if (!id) {\n      return\n    }\n\n    const item = accessibleList.getItem(id)\n\n    if (!item) {\n      return\n    }\n\n    if (!selectedKeys.includes(id)) {\n      selectedItems.append(item)\n      setFieldState({\n        inputValue: \"\",\n        selectedKey: id,\n      })\n      onItemInserted?.(id)\n    }\n\n    accessibleList.setFilterText(\"\")\n  }\n\n  const onInputChange = (value: string) => {\n    setFieldState((prev) => ({\n      inputValue: value,\n      selectedKey: value === \"\" ? null : prev.selectedKey,\n    }))\n\n    accessibleList.setFilterText(value)\n  }\n\n  const popLast = useCallback(() => {\n    if (selectedItems.items.length === 0) {\n      return\n    }\n\n    const endKey = selectedItems.items[selectedItems.items.length - 1]\n\n    if (endKey !== null) {\n      selectedItems.remove(endKey.id)\n      onItemCleared?.(endKey.id)\n    }\n\n    setFieldState({\n      inputValue: \"\",\n      selectedKey: null,\n    })\n  }, [selectedItems, onItemCleared])\n\n  const onKeyDownCapture = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === \"Backspace\" && fieldState.inputValue === \"\") {\n        popLast()\n      }\n    },\n    [popLast, fieldState.inputValue],\n  )\n\n  useEffect(() => {\n    const trigger = triggerRef.current\n    if (!trigger) return\n\n    const observer = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        setWidth(entry.target.clientWidth)\n      }\n    })\n\n    observer.observe(trigger)\n    return () => {\n      observer.unobserve(trigger)\n    }\n  }, [])\n\n  const triggerButtonRef = useRef<HTMLButtonElement | null>(null)\n\n  return (\n    <div className={multiSelectField({ className })}>\n      {props.label && <Label className=\"mb-1\">{props.label}</Label>}\n      <div className={props.isDisabled ? \"opacity-50\" : \"\"}>\n        <div ref={triggerRef} className={multiSelect({ className })}>\n          <TagGroup\n            shape={props.shape}\n            intent={props.intent}\n            aria-label=\"Selected items\"\n            id={tagGroupIdentifier}\n            onRemove={onRemove}\n          >\n            <TagList\n              items={selectedItems.items}\n              className={cn(\n                selectedItems.items.length !== 0 && \"px-1 py-1.5\",\n                \"[&_.jdt3lr2x]:last:-mr-1 gap-1.5 outline-hidden\",\n                props.shape === \"square\" && \"[&_.jdt3lr2x]:rounded-[calc(var(--radius-lg)-4px)]\",\n              )}\n            >\n              {props.tag}\n            </TagList>\n          </TagGroup>\n          <ComboBox\n            {...props}\n            allowsEmptyCollection\n            aria-label=\"Available items\"\n            className={comboBox()}\n            items={accessibleList.items}\n            selectedKey={fieldState.selectedKey}\n            inputValue={fieldState.inputValue}\n            onSelectionChange={onSelectionChange}\n            onInputChange={onInputChange}\n          >\n            <div className={comboBoxChild({ className })}>\n              <Input\n                placeholder={props.placeholder}\n                className={input()}\n                onBlur={() => {\n                  setFieldState({\n                    inputValue: \"\",\n                    selectedKey: null,\n                  })\n                  accessibleList.setFilterText(\"\")\n                }}\n                onKeyDownCapture={onKeyDownCapture}\n              />\n\n              <VisuallyHidden>\n                <Button\n                  slot=\"remove\"\n                  type=\"button\"\n                  aria-label=\"Remove\"\n                  appearance=\"plain\"\n                  size=\"square-petite\"\n                  ref={triggerButtonRef}\n                >\n                  <IconChevronLgDown />\n                </Button>\n              </VisuallyHidden>\n            </div>\n            <Popover.Picker\n              isNonModal\n              className=\"max-w-none\"\n              style={{ width: `${width}px` }}\n              triggerRef={triggerRef}\n              trigger=\"ComboBox\"\n            >\n              <ListBox.Picker\n                renderEmptyState={() =>\n                  renderEmptyState ? (\n                    renderEmptyState(fieldState.inputValue)\n                  ) : (\n                    <Description className=\"block p-3\">\n                      {fieldState.inputValue ? (\n                        <>\n                          No results found for: <strong className=\"font-medium text-fg\">{fieldState.inputValue}</strong>\n                        </>\n                      ) : (\n                        \"No options\"\n                      )}\n                    </Description>\n                  )\n                }\n                selectionMode=\"multiple\"\n              >\n                {children}\n              </ListBox.Picker>\n            </Popover.Picker>\n          </ComboBox>\n          <div className=\"flex relative justify-center items-center px-1 ml-auto\" aria-hidden>\n            <button\n              type=\"button\"\n              className={chevronButton()}\n              onClick={() => triggerButtonRef.current?.click()}\n              tabIndex={-1}\n            >\n              <IconChevronLgDown className=\"size-4 peer/[data-open]:rotate-180\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      {props.description && <Description>{props.description}</Description>}\n      {<FieldError>{errorMessage}</FieldError>}\n      {name && <input hidden name={name} value={selectedKeys.join(\",\")} readOnly />}\n    </div>\n  )\n}\n\nMultipleSelect.Tag = Tag\nMultipleSelect.Option = ListBox.Item\n\nexport { MultipleSelect, type SelectedKey }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/multiple-select.tsx"
}