{
  "name": "number-field",
  "files": [
    {
      "name": "number-field.tsx",
      "content": "\"use client\"\n\nimport { IconChevronDown, IconChevronUp, IconMinus, IconPlus } from \"justd-icons\"\nimport {\n  Button,\n  type ButtonProps,\n  NumberField as NumberFieldPrimitive,\n  type NumberFieldProps as NumberFieldPrimitiveProps,\n  type ValidationResult,\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Description, FieldError, FieldGroup, Input, Label } from \"./field\"\nimport { composeTailwindRenderProps, useMediaQuery } from \"./primitive\"\n\nconst fieldBorderStyles = tv({\n  base: \"group-data-focused:border-primary/70 forced-colors:border-[Highlight]\",\n  variants: {\n    isInvalid: {\n      true: \"group-data-focused:border-danger/70 forced-colors:border-[Mark]\",\n    },\n    isDisabled: {\n      true: \"group-data-focused:border-input/70\",\n    },\n  },\n})\n\nconst numberFieldStyles = tv({\n  slots: {\n    base: \"group flex flex-col gap-y-1.5\",\n    stepperButton:\n      \"h-10 cursor-default px-3 text-muted-fg data-pressed:bg-primary data-pressed:text-primary-fg group-data-disabled:bg-secondary/70 forced-colors:group-data-disabled:text-[GrayText]\",\n  },\n})\n\nconst { base, stepperButton } = numberFieldStyles()\n\ninterface NumberFieldProps extends NumberFieldPrimitiveProps {\n  label?: string\n  description?: string\n  placeholder?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst NumberField = ({ label, placeholder, description, className, errorMessage, ...props }: NumberFieldProps) => {\n  const isMobile = useMediaQuery(\"(max-width: 768px)\")\n  return (\n    <NumberFieldPrimitive {...props} className={composeTailwindRenderProps(className, base())}>\n      {label && <Label>{label}</Label>}\n      <FieldGroup className=\"overflow-hidden\">\n        {(renderProps) => (\n          <>\n            {isMobile ? <StepperButton slot=\"decrement\" className=\"border-r\" /> : null}\n            <Input className=\"tabular-nums\" placeholder={placeholder} />\n            <div\n              className={fieldBorderStyles({\n                ...renderProps,\n                className: \"grid h-10 place-content-center border-s\",\n              })}\n            >\n              {isMobile ? (\n                <StepperButton slot=\"increment\" />\n              ) : (\n                <div className=\"flex flex-col h-full\">\n                  <StepperButton slot=\"increment\" emblemType=\"chevron\" className=\"px-1 h-5\" />\n                  <div\n                    className={fieldBorderStyles({\n                      ...renderProps,\n                      className: \"border-input border-b\",\n                    })}\n                  />\n                  <StepperButton slot=\"decrement\" emblemType=\"chevron\" className=\"px-1 h-5\" />\n                </div>\n              )}\n            </div>\n          </>\n        )}\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </NumberFieldPrimitive>\n  )\n}\n\ninterface StepperButtonProps extends ButtonProps {\n  slot: \"increment\" | \"decrement\"\n  emblemType?: \"chevron\" | \"default\"\n  className?: string\n}\n\nconst StepperButton = ({ slot, className, emblemType = \"default\", ...props }: StepperButtonProps) => {\n  const icon =\n    emblemType === \"chevron\" ? (\n      slot === \"increment\" ? (\n        <IconChevronUp className=\"size-5\" />\n      ) : (\n        <IconChevronDown className=\"size-5\" />\n      )\n    ) : slot === \"increment\" ? (\n      <IconPlus />\n    ) : (\n      <IconMinus />\n    )\n  return (\n    <Button className={stepperButton({ className })} slot={slot} {...props}>\n      {icon}\n    </Button>\n  )\n}\n\nexport { NumberField }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/number-field.tsx"
}