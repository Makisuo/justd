{
  "name": "tag-group",
  "files": [
    {
      "name": "tag-group.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconX } from \"justd-icons\"\nimport type {\n  TagGroupProps as TagGroupPrimitiveProps,\n  TagListProps,\n  TagProps as TagPrimitiveProps\n} from \"react-aria-components\"\nimport {\n  Button,\n  composeRenderProps,\n  Tag as TagPrimitive,\n  TagGroup as TagGroupPrimitive,\n  TagList as TagListPrimitive\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { badgeIntents, badgeShapes, badgeStyles } from \"./badge\"\nimport { Description, Label } from \"./field\"\nimport { cn, composeTailwindRenderProps, focusStyles } from \"./primitive\"\n\nconst intents = {\n  primary: {\n    base: [badgeIntents.primary, \"[&_[slot=remove]:hover]:bg-primary [&_[slot=remove]:hover]:text-primary-fg\"],\n    selected: [\n      \"bg-primary dark:data-hovered:bg-primary dark:bg-primary data-hovered:bg-primary ring-primary ring-inset text-primary-fg dark:text-primary-fg data-hovered:text-primary-fg\",\n      \"[&_[slot=remove]:hover]:bg-primary-fg/50 [&_[slot=remove]:hover]:text-primary\"\n    ]\n  },\n  secondary: {\n    base: [badgeIntents.secondary, \"[&_[slot=remove]:hover]:bg-fg [&_[slot=remove]:hover]:text-bg\"],\n    selected: [\n      \"bg-fg ring-fg/50 text-bg dark:bg-fg/90 dark:text-secondary ring-inset\",\n      \"[&_[slot=remove]:hover]:bg-bg [&_[slot=remove]:hover]:text-secondary-fg\"\n    ]\n  },\n  success: {\n    base: [badgeIntents.success, \"[&_[slot=remove]:hover]:bg-success [&_[slot=remove]:hover]:text-success-fg\"],\n    selected: [\n      \"bg-success dark:bg-success ring-success ring-inset dark:text-success-fg dark:data-hovered:bg-success data-hovered:bg-success text-success-fg data-hovered:text-success-fg\",\n      \"[&_[slot=remove]:hover]:bg-success-fg/80 [&_[slot=remove]:hover]:text-success\"\n    ]\n  },\n  warning: {\n    base: [badgeIntents.warning, \"[&_[slot=remove]:hover]:bg-warning [&_[slot=remove]:hover]:text-warning-fg\"],\n    selected: [\n      \"bg-warning dark:data-hovered:bg-warning dark:bg-warning dark:text-bg data-hovered:bg-warning text-warning-fg data-hovered:text-warning-fg\",\n      \"[&_[slot=remove]:hover]:bg-warning-fg/80 [&_[slot=remove]:hover]:text-warning\"\n    ]\n  },\n  danger: {\n    base: [badgeIntents.danger, \"[&_[slot=remove]:hover]:bg-danger [&_[slot=remove]:hover]:text-danger-fg\"],\n    selected: [\n      \"bg-danger dark:bg-danger dark:data-hovered:bg-danger/90 data-hovered:bg-danger text-danger-fg ring-danger data-hovered:text-danger-fg\",\n      \"[&_[slot=remove]:hover]:bg-danger-fg/80 [&_[slot=remove]:hover]:text-danger\"\n    ]\n  }\n}\n\ntype RestrictedIntent = \"primary\" | \"secondary\"\n\ntype Intent = \"primary\" | \"secondary\" | \"warning\" | \"danger\" | \"success\"\n\ntype Shape = keyof typeof badgeShapes\n\ntype TagGroupContextValue = {\n  intent: Intent\n  shape: Shape\n}\n\nconst TagGroupContext = React.createContext<TagGroupContextValue>({\n  intent: \"primary\",\n  shape: \"square\"\n})\n\nexport interface TagGroupProps extends TagGroupPrimitiveProps {\n  intent?: Intent\n  shape?: \"square\" | \"circle\"\n  errorMessage?: string\n  label?: string\n  description?: string\n}\n\nconst TagGroup = ({ children, ...props }: TagGroupProps) => {\n  return (\n    <TagGroupPrimitive {...props} className={cn(\"flex flex-wrap flex-col\", props.className)}>\n      <TagGroupContext.Provider\n        value={{\n          intent: props.intent || \"primary\",\n          shape: props.shape || \"square\"\n        }}\n      >\n        {props.label && <Label className=\"mb-1\">{props.label}</Label>}\n        {children}\n        {props.description && <Description>{props.description}</Description>}\n      </TagGroupContext.Provider>\n    </TagGroupPrimitive>\n  )\n}\n\nconst TagList = <T extends object>({ className, ...props }: TagListProps<T>) => {\n  return <TagListPrimitive {...props} className={composeTailwindRenderProps(className, \"flex flex-wrap gap-2\")} />\n}\n\nconst tagStyles = tv({\n  extend: focusStyles,\n  base: [badgeStyles.base, \"cursor-pointer jdt3lr2x\"],\n  variants: {\n    isFocused: { true: \"ring-1\" },\n    isDisabled: { true: \"opacity-50 cursor-default\" },\n    allowsRemoving: { true: \"pr-1\" }\n  }\n})\n\ninterface TagProps extends TagPrimitiveProps {\n  intent?: Intent\n  shape?: Shape\n}\n\nconst TagItem = ({ className, intent, shape, ...props }: TagProps) => {\n  const textValue = typeof props.children === \"string\" ? props.children : undefined\n  const groupContext = React.useContext(TagGroupContext)\n\n  return (\n    <TagPrimitive\n      textValue={textValue}\n      {...props}\n      className={composeRenderProps(className, (_, renderProps) => {\n        const finalIntent = intent || groupContext.intent\n        const finalShape = shape || groupContext.shape\n\n        return tagStyles({\n          ...renderProps,\n          className: cn([\n            intents[finalIntent]?.base,\n            badgeShapes[finalShape],\n            renderProps.isSelected ? intents[finalIntent].selected : undefined\n          ])\n        })\n      })}\n    >\n      {({ allowsRemoving }) => {\n        return (\n          <>\n            {props.children as React.ReactNode}\n            {allowsRemoving && (\n              <Button\n                slot=\"remove\"\n                className=\"rounded [&>[data-slot=icon]]:size-3 [&>[data-slot=icon]]:shrink-0 focus:outline-none size-3.5 grid place-content-center -mr-0.5 focus-visible:ring-1 focus-visible:ring-primary\"\n              >\n                <IconX />\n              </Button>\n            )}\n          </>\n        )\n      }}\n    </TagPrimitive>\n  )\n}\n\nconst Tag = {\n  Group: TagGroup,\n  Item: TagItem,\n  List: TagList\n}\n\nexport { Tag, type RestrictedIntent }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/tag-group.tsx"
}