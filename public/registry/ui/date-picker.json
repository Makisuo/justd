{
  "name": "date-picker",
  "files": [
    {
      "name": "date-picker.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconCalendarDays } from \"justd-icons\"\nimport {\n  DatePicker as DatePickerPrimitive,\n  type DatePickerProps as DatePickerPrimitiveProps,\n  type DateValue,\n  type DialogProps,\n  type PopoverProps,\n  type ValidationResult\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Button } from \"./button\"\nimport { Calendar } from \"./calendar\"\nimport { DateInput } from \"./date-field\"\nimport { Description, FieldError, FieldGroup, Label } from \"./field\"\nimport { Popover } from \"./popover\"\nimport { composeTailwindRenderProps } from \"./primitive\"\nimport { RangeCalendar } from \"./range-calendar\"\n\nconst datePickerStyles = tv({\n  slots: {\n    base: \"group flex flex-col gap-y-1.5\",\n    datePickerIcon:\n      \"group mr-1 h-7 **:data-[slot=icon]:text-muted-fg w-8 rounded outline-offset-0data-hovered:bg-transparent data-pressed:bg-transparent\",\n    calendarIcon: \"group-open:text-fg\",\n    datePickerInput: \"w-full px-2 text-base lg:text-sm\",\n    dateRangePickerInputStart: \"px-2 lg:text-sm text-base\",\n    dateRangePickerInputEnd: \"flex-1 px-2 py-1.5 lg:text-sm text-base\",\n    dateRangePickerDash:\n      \"text-fg group-data-disabled:opacity-50 forced-colors:text-[ButtonText] forced-colors:group-data-disabled:text-[GrayText]\"\n  }\n})\n\nconst { base, datePickerIcon, calendarIcon, datePickerInput } = datePickerStyles()\n\ninterface DatePickerOverlayProps\n  extends Omit<DialogProps, \"children\" | \"className\" | \"style\">,\n    Omit<PopoverProps, \"children\" | \"className\" | \"style\"> {\n  className?: string | ((values: { defaultClassName?: string }) => string)\n  children?: React.ReactNode\n  closeButton?: boolean\n  range?: boolean\n}\n\nconst DatePickerOverlay = ({ closeButton = true, range, ...props }: DatePickerOverlayProps) => {\n  return (\n    <Popover.Content\n      showArrow={false}\n      className=\"flex justify-center p-4 sm:p-2 sm:pt-3 sm:max-w-[17.2rem] sm:min-w-[17rem]\"\n      {...props}\n    >\n      {range ? <RangeCalendar /> : <Calendar />}\n      {closeButton && (\n        <div className=\"sm:hidden py-2.5 flex justify-center mx-auto w-full max-w-[inherit]\">\n          <Popover.Close shape=\"circle\" className=\"w-full\">\n            Close\n          </Popover.Close>\n        </div>\n      )}\n    </Popover.Content>\n  )\n}\n\nconst DatePickerIcon = () => (\n  <Button size=\"square-petite\" appearance=\"plain\" className={datePickerIcon()}>\n    <IconCalendarDays aria-hidden className={calendarIcon()} />\n  </Button>\n)\n\ninterface DatePickerProps<T extends DateValue> extends DatePickerPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst DatePicker = <T extends DateValue>({\n  label,\n  className,\n  description,\n  errorMessage,\n  ...props\n}: DatePickerProps<T>) => {\n  return (\n    <DatePickerPrimitive {...props} className={composeTailwindRenderProps(className, base())}>\n      {label && <Label>{label}</Label>}\n      <FieldGroup className=\"min-w-40\">\n        <DateInput className={datePickerInput()} />\n        <DatePickerIcon />\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n      <DatePickerOverlay />\n    </DatePickerPrimitive>\n  )\n}\n\nexport { DatePicker, DatePickerIcon, DatePickerOverlay, type DatePickerProps, type DateValue, type ValidationResult }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/date-picker.tsx"
}