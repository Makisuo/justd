{
  "name": "tree",
  "files": [
    {
      "name": "tree.tsx",
      "content": "\"use client\"\n\nimport { IconChevronRight } from \"justd-icons\"\nimport type { TreeItemProps, TreeProps } from \"react-aria-components\"\nimport {\n  Button,\n  UNSTABLE_TreeItemContent as TreeItemContent,\n  UNSTABLE_TreeItem as TreeItemPrimitive,\n  UNSTABLE_Tree as TreePrimitive,\n  composeRenderProps,\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Checkbox } from \"./checkbox\"\n\nconst treeStyles = tv({\n  base: \"flex border max-h-96 min-w-72 [&::-webkit-scrollbar]:size-0.5 [scrollbar-width:thin] py-2 rounded-lg cursor-default sm:text-sm flex-col overflow-auto forced-color-adjust-none outline-hidden\",\n  variants: {\n    isFocusVisible: {\n      true: \"outline-offset-[-1px] outline-2 outline-primary\",\n    },\n  },\n})\n\nconst Tree = <T extends object>({ className, ...props }: TreeProps<T>) => {\n  return (\n    <TreePrimitive\n      className={composeRenderProps(className, (className, renderProps) =>\n        treeStyles({\n          ...renderProps,\n          className,\n        }),\n      )}\n      {...props}\n    >\n      {props.children}\n    </TreePrimitive>\n  )\n}\n\nconst itemStyles = tv({\n  base: [\n    \"[&_[data-expanded]_[slot=chevron]_[data-slot=icon]]:rotate-90 outline-hidden [--padding:20px] p-[0.286rem_0.286rem_0.286rem_0.571rem] pl-[calc((var(--tree-item-level)-1)*20px+0.571rem+var(--padding))]\",\n    \"[&_[slot=chevron]]:outline-hidden [&_[slot=chevron]_[data-slot=icon]]:text-muted-fg\",\n    \"data-has-child-rows:[--padding:0px]\",\n  ],\n  variants: {\n    isExpanded: {\n      true: \"[&_[slot=chevron]_[data-slot=icon]]:text-fg [&_[slot=chevron]_[data-slot=icon]]:rotate-90 [&_[slot=chevron]_[data-slot=icon]]:transition [&_[slot=chevron]_[data-slot=icon]]:duration-200\",\n    },\n    isFocusVisible: {\n      true: \"[&_[slot=chevron]_[data-slot=icon]]:text-fg data-focused:outline-hidden data-focus-visible:ring-1 data-focus-visible:ring-primary\",\n    },\n    isDisabled: {\n      true: \"opacity-50 forced-colors:text-[GrayText]\",\n    },\n  },\n})\n\nconst TreeItem = <T extends object>({ className, ...props }: TreeItemProps<T>) => {\n  return (\n    <TreeItemPrimitive\n      className={composeRenderProps(className, (className, renderProps) =>\n        itemStyles({\n          ...renderProps,\n          className,\n        }),\n      )}\n      {...props}\n    >\n      {props.children}\n    </TreeItemPrimitive>\n  )\n}\n\nconst ItemContent = (props: React.ComponentProps<typeof TreeItemContent>) => {\n  return (\n    <TreeItemContent {...props}>\n      <div className=\"flex items-center\">{props.children as React.ReactNode}</div>\n    </TreeItemContent>\n  )\n}\n\nconst Indicator = () => {\n  return (\n    <Button className=\"relative shrink-0\" slot=\"chevron\">\n      <IconChevronRight className=\"size-5\" />\n    </Button>\n  )\n}\n\nconst ItemCheckbox = () => {\n  return <Checkbox slot=\"selection\" />\n}\n\nconst ItemLabel = (props: React.HtmlHTMLAttributes<HTMLSpanElement>) => {\n  return <span {...props} />\n}\n\nTreeItem.Label = ItemLabel\nTreeItem.Indicator = Indicator\nTreeItem.Checkbox = ItemCheckbox\nTreeItem.Content = ItemContent\n\nexport { Tree, TreeItem }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/tree.tsx"
}