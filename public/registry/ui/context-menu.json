{
  "name": "context-menu",
  "files": [
    {
      "name": "context-menu.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\n\nimport { tv } from \"tailwind-variants\"\n\nimport type { MenuContentProps } from \"./menu\"\nimport { Menu } from \"./menu\"\nimport { focusButtonStyles } from \"./primitive\"\n\ninterface ContextMenuTriggerContextType {\n  buttonRef: React.RefObject<HTMLButtonElement | null>\n  contextMenuOffset: { offset: number; crossOffset: number } | null\n  setContextMenuOffset: React.Dispatch<React.SetStateAction<{ offset: number; crossOffset: number } | null>>\n}\n\nconst ContextMenuTriggerContext = React.createContext<ContextMenuTriggerContextType | undefined>(undefined)\n\nconst useContextMenuTrigger = () => {\n  const context = React.useContext(ContextMenuTriggerContext)\n  if (!context) {\n    throw new Error(\"useContextMenuTrigger must be used within a ContextMenuTrigger\")\n  }\n  return context\n}\n\ninterface ContextMenuRootComponent {\n  children: React.ReactNode\n}\n\nconst ContextMenu = ({ children }: ContextMenuRootComponent) => {\n  const [contextMenuOffset, setContextMenuOffset] = React.useState<{\n    offset: number\n    crossOffset: number\n  } | null>(null)\n  const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n  return (\n    <ContextMenuTriggerContext.Provider value={{ buttonRef, contextMenuOffset, setContextMenuOffset }}>\n      {children}\n    </ContextMenuTriggerContext.Provider>\n  )\n}\n\nconst contextMenuTriggerStyles = tv({\n  extend: focusButtonStyles,\n  base: \"data-focused:outline-hidden cursor-default\",\n  variants: {\n    isDisabled: {\n      false: \"forced-colors:data-disabled:text-[GrayText]\",\n      true: \"cursor-default opacity-60 forced-colors:data-disabled:text-[GrayText]\"\n    }\n  }\n})\n\ntype ContextMenuTriggerProps = React.ButtonHTMLAttributes<HTMLButtonElement>\n\nconst ContextMenuTrigger = ({ className, ...props }: ContextMenuTriggerProps) => {\n  const { buttonRef, setContextMenuOffset } = useContextMenuTrigger()\n\n  const onContextMenu = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault()\n    const rect = e.currentTarget.getBoundingClientRect()\n    setContextMenuOffset({\n      offset: e.clientY - rect.bottom,\n      crossOffset: e.clientX - rect.left\n    })\n  }\n  return (\n    <button\n      className={contextMenuTriggerStyles({ isDisabled: props.disabled, className })}\n      ref={buttonRef}\n      aria-haspopup=\"menu\"\n      onContextMenu={onContextMenu}\n      {...props}\n    />\n  )\n}\n\ntype ContextMenuContentProps<T> = Omit<\n  MenuContentProps<T>,\n  \"showArrow\" | \"isOpen\" | \"onOpenChange\" | \"triggerRef\" | \"placement\" | \"shouldFlip\"\n>\n\nconst ContextMenuContent = <T extends object>(props: ContextMenuContentProps<T>) => {\n  const { contextMenuOffset, setContextMenuOffset, buttonRef } = useContextMenuTrigger()\n  return contextMenuOffset ? (\n    <Menu.Content\n      isOpen={!!contextMenuOffset}\n      onOpenChange={() => setContextMenuOffset(null)}\n      triggerRef={buttonRef}\n      shouldFlip={false}\n      placement=\"bottom left\"\n      offset={contextMenuOffset?.offset}\n      crossOffset={contextMenuOffset?.crossOffset}\n      onClose={() => setContextMenuOffset(null)}\n      {...props}\n    />\n  ) : null\n}\n\nContextMenu.Trigger = ContextMenuTrigger\nContextMenu.Content = ContextMenuContent\nContextMenu.Item = Menu.Item\nContextMenu.Separator = Menu.Separator\nContextMenu.ItemDetails = Menu.ItemDetails\nContextMenu.Section = Menu.Section\nContextMenu.Header = Menu.Header\nContextMenu.Keyboard = Menu.Keyboard\n\nexport { ContextMenu }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/context-menu.tsx"
}