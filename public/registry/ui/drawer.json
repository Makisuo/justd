{
  "name": "drawer",
  "files": [
    {
      "name": "drawer.tsx",
      "content": "\"use client\"\n\nimport { createContext, forwardRef, use, useState } from \"react\"\n\nimport type { PanInfo } from \"motion/react\"\nimport {\n  AnimatePresence,\n  type Inertia,\n  animate,\n  motion,\n  useMotionTemplate,\n  useMotionValue,\n  useMotionValueEvent,\n  useTransform,\n} from \"motion/react\"\nimport type { DialogProps } from \"react-aria-components\"\nimport { type ButtonProps, Modal, ModalOverlay } from \"react-aria-components\"\nimport { twJoin } from \"tailwind-merge\"\n\nimport { Dialog } from \"./dialog\"\nimport { cn } from \"./primitive\"\n\nconst inertiaTransition: Inertia = {\n  type: \"inertia\",\n  bounceStiffness: 300,\n  bounceDamping: 60,\n  timeConstant: 300,\n}\nconst staticTransition = {\n  duration: 0.4,\n  ease: [0.32, 0.72, 0, 1],\n}\nconst drawerMargin = 60\nconst drawerRadius = 32\n\ninterface DrawerContextType {\n  isOpen: boolean\n  openDrawer: () => void\n  closeDrawer: () => void\n  withNotch?: boolean\n}\n\nconst DrawerContext = createContext<DrawerContextType | undefined>(undefined)\n\nconst useDrawerContext = () => {\n  const context = use(DrawerContext)\n  if (context === undefined) {\n    throw new Error(\"useDrawerContext must be used within a Drawer\")\n  }\n  return context\n}\n\nconst ModalWrapper = forwardRef<HTMLDivElement, React.ComponentProps<typeof Modal>>((props, ref) => (\n  <Modal ref={ref} {...props} />\n))\nModalWrapper.displayName = \"ModalWrapper\"\n\nconst ModalOverlayWrapper = forwardRef<HTMLDivElement, React.ComponentProps<typeof ModalOverlay>>((props, ref) => (\n  <ModalOverlay ref={ref} {...props} />\n))\nModalOverlayWrapper.displayName = \"ModalOverlayWrapper\"\n\nconst ModalPrimitive = motion.create(ModalWrapper)\nconst ModalOverlayPrimitive = motion.create(ModalOverlayWrapper)\n\ninterface DrawerOverlayPrimitiveProps\n  extends Omit<React.ComponentProps<typeof ModalOverlayPrimitive>, \"isOpen\" | \"onOpenChange\" | \"style\"> {\n  \"aria-label\"?: DialogProps[\"aria-label\"]\n  \"aria-labelledby\"?: DialogProps[\"aria-labelledby\"]\n  role?: DialogProps[\"role\"]\n  children?: React.ReactNode\n}\n\nconst DrawerContentPrimitive = ({ children, ...props }: DrawerOverlayPrimitiveProps) => {\n  const { closeDrawer, withNotch } = useDrawerContext()\n  const [contentHeight, setContentHeight] = useState(0)\n\n  const h = Math.min(contentHeight + drawerMargin, window.innerHeight - drawerMargin)\n  const y = useMotionValue(h)\n  const bgOpacity = useTransform(y, [0, h], [0.15, 0])\n  const bg = useMotionTemplate`rgba(0, 0, 0, ${bgOpacity})`\n\n  const root = document.getElementsByTagName(\"main\")[0] as HTMLElement\n\n  const bodyBorderRadius = useTransform(y, [0, h], [drawerRadius, 0])\n\n  useMotionValueEvent(bodyBorderRadius, \"change\", (v) => {\n    root.style.borderRadius = `${v}px`\n  })\n\n  const onDragEnd = (_: any, { offset, velocity }: PanInfo) => {\n    if (offset.y > h * 0.4 || velocity.y > 10) {\n      closeDrawer()\n    } else {\n      animate(y, 0, { ...inertiaTransition, min: 0, max: 0 })\n    }\n  }\n\n  return (\n    <>\n      <ModalOverlayPrimitive\n        isDismissable\n        isOpen\n        onOpenChange={closeDrawer}\n        className={twJoin([\n          \"fixed top-0 left-0 isolate z-50 h-(--visual-viewport-height) w-full touch-none will-change-transform\",\n          \"flex items-end [--visual-viewport-vertical-padding:100px]\",\n        ])}\n        style={{\n          backgroundColor: bg as any,\n        }}\n      >\n        <ModalPrimitive\n          className={cn(\n            \"flex max-h-full w-full flex-col overflow-hidden rounded-t-2xl bg-overlay text-left align-middle text-overlay-fg shadow-lg sm:rounded-lg\",\n            \"ring-1 ring-dark/5 dark:ring-light/15\",\n          )}\n          initial={{ y: h }}\n          animate={{ y: 0 }}\n          exit={{ y: h }}\n          transition={staticTransition}\n          style={{\n            y,\n            top: \"auto\",\n            height: contentHeight > 0 ? `${contentHeight + drawerMargin}px` : \"auto\",\n            maxHeight: `calc(100% - ${drawerMargin}px)`,\n          }}\n          drag=\"y\"\n          dragConstraints={{ top: 0, bottom: h }}\n          onDragEnd={onDragEnd}\n          {...props}\n        >\n          <div className=\"overflow-hidden\">\n            {withNotch && (\n              <div className=\"sticky top-0 mx-auto mt-2.5 w-10 h-1.5 rounded-full notch shrink-0 touch-pan-y bg-fg/20\" />\n            )}\n            <div\n              className=\"overflow-y-auto mt-3\"\n              ref={(el) => {\n                if (el) {\n                  const resizeObserver = new ResizeObserver((entries) => {\n                    for (const entry of entries) {\n                      setContentHeight(entry.contentRect.height)\n                    }\n                  })\n                  resizeObserver.observe(el)\n                  return () => resizeObserver.disconnect()\n                }\n              }}\n            >\n              {children}\n            </div>\n          </div>\n        </ModalPrimitive>\n      </ModalOverlayPrimitive>\n    </>\n  )\n}\n\ninterface DrawerPrimitiveProps extends Omit<React.ComponentProps<typeof Modal>, \"children\"> {\n  \"aria-label\"?: DialogProps[\"aria-label\"]\n  \"aria-labelledby\"?: DialogProps[\"aria-labelledby\"]\n  role?: DialogProps[\"role\"]\n  children?: DialogProps[\"children\"]\n}\n\nconst DrawerPrimitive = (props: DrawerPrimitiveProps) => {\n  const { isOpen } = useDrawerContext()\n\n  const h = window.innerHeight - drawerMargin\n  const y = useMotionValue(h)\n  const bodyBorderRadius = useTransform(y, [0, h], [drawerRadius, 0])\n  return (\n    <motion.div\n      style={{\n        borderRadius: bodyBorderRadius,\n        transformOrigin: \"center 0\",\n      }}\n    >\n      <AnimatePresence>{isOpen && (props.children as React.ReactNode)}</AnimatePresence>\n    </motion.div>\n  )\n}\n\nconst DrawerTrigger = (props: ButtonProps) => {\n  const { openDrawer } = useDrawerContext()\n\n  return <Dialog.Trigger onPress={openDrawer} {...props} />\n}\n\ninterface DrawerProps {\n  children: React.ReactNode\n  isOpen?: boolean\n  withNotch?: boolean\n  onOpenChange?: (isOpen: boolean) => void\n}\n\nconst Drawer = ({ children, withNotch = true, isOpen: controlledIsOpen, onOpenChange }: DrawerProps) => {\n  const [internalIsOpen, setInternalIsOpen] = useState(false)\n\n  const isControlled = controlledIsOpen !== undefined\n  const isOpen = isControlled ? controlledIsOpen : internalIsOpen\n\n  const openDrawer = () => {\n    if (isControlled && onOpenChange) {\n      onOpenChange(true)\n    } else {\n      setInternalIsOpen(true)\n    }\n  }\n\n  const closeDrawer = () => {\n    if (isControlled && onOpenChange) {\n      onOpenChange(false)\n    } else {\n      setInternalIsOpen(false)\n    }\n  }\n\n  if (typeof window === \"undefined\") {\n    return null\n  }\n\n  return (\n    <DrawerContext.Provider value={{ isOpen, openDrawer, closeDrawer, withNotch }}>{children}</DrawerContext.Provider>\n  )\n}\n\nconst Content = ({ children, ...props }: React.ComponentProps<typeof DrawerPrimitive>) => {\n  return (\n    <DrawerPrimitive>\n      <DrawerContentPrimitive {...props}>\n        <Dialog\n          role={props.role ?? \"dialog\"}\n          aria-label={props[\"aria-label\"] ?? undefined}\n          aria-labelledby={props[\"aria-labelledby\"] ?? undefined}\n          className=\"mx-auto sm:max-w-lg\"\n        >\n          {(values) => <>{typeof children === \"function\" ? children(values) : children}</>}\n        </Dialog>\n      </DrawerContentPrimitive>\n    </DrawerPrimitive>\n  )\n}\n\nconst DrawerHeader = ({ className, ...props }: React.ComponentProps<typeof Dialog.Header>) => (\n  <Dialog.Header className={cn(\"pt-2\", className)} {...props} />\n)\n\nconst DrawerBody = ({ children, className, ...props }: React.ComponentProps<typeof Dialog.Body>) => (\n  <Dialog.Body {...props} className={cn(\"px-4\", className)}>\n    {children}\n  </Dialog.Body>\n)\n\nconst DrawerFooter = ({ children, className, ...props }: React.ComponentProps<typeof Dialog.Footer>) => (\n  <Dialog.Footer {...props} className={cn(\"pb-2\", className)}>\n    {children}\n  </Dialog.Footer>\n)\n\nDrawer.Body = DrawerBody\nDrawer.Close = Dialog.Close\nDrawer.Content = Content\nDrawer.Description = Dialog.Description\nDrawer.Footer = DrawerFooter\nDrawer.Header = DrawerHeader\nDrawer.Title = Dialog.Title\nDrawer.Trigger = DrawerTrigger\n\nexport { Drawer }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/drawer.tsx"
}