{
  "name": "sheet",
  "files": [
    {
      "name": "sheet.tsx",
      "content": "\"use client\"\n\nimport type { DialogProps, DialogTriggerProps, ModalOverlayProps } from \"react-aria-components\"\nimport { DialogTrigger, Modal, ModalOverlay, composeRenderProps } from \"react-aria-components\"\nimport { type VariantProps, tv } from \"tailwind-variants\"\n\nimport { Dialog } from \"./dialog\"\n\nconst overlayStyles = tv({\n  base: [\n    \"fixed top-0 left-0 w-full bg-fg/15 dark:bg-bg/40 h-(--visual-viewport-height) isolate z-50 flex items-center justify-center p-4\",\n  ],\n  variants: {\n    isBlurred: {\n      true: \"backdrop-blur bg-bg/15 dark:bg-bg/40\",\n    },\n    isEntering: {\n      true: \"animate-in fade-in duration-300 ease-out\",\n    },\n    isExiting: {\n      true: \"animate-out fade-out duration-200 ease-in\",\n    },\n  },\n})\n\ntype Sides = \"top\" | \"bottom\" | \"left\" | \"right\"\nconst generateCompoundVariants = (sides: Array<Sides>) => {\n  return sides.map((side) => ({\n    side,\n    isStack: true,\n    className:\n      side === \"top\"\n        ? \"top-2 inset-x-2 rounded-xl ring-1 border-b-0\"\n        : side === \"bottom\"\n          ? \"bottom-2 inset-x-2 rounded-xl ring-1 border-t-0\"\n          : side === \"left\"\n            ? \"left-2 inset-y-2 rounded-xl ring-1 border-r-0\"\n            : \"right-2 inset-y-2 rounded-xl ring-1 border-l-0\",\n  }))\n}\n\nconst contentStyles = tv({\n  base: \"fixed z-50 grid gap-4 bg-overlay border-fg/5 dark:border-border text-overlay-fg shadow-lg transition ease-in-out\",\n  variants: {\n    isEntering: {\n      true: \"duration-300 animate-in \",\n    },\n    isExiting: {\n      true: \"duration-200 animate-out\",\n    },\n    side: {\n      top: \"inset-x-0 top-0 rounded-b-2xl border-b data-entering:slide-in-from-top data-exiting:slide-out-to-top\",\n      bottom:\n        \"inset-x-0 bottom-0 rounded-t-2xl border-t data-entering:slide-in-from-bottom data-exiting:slide-out-to-bottom\",\n      left: \"inset-y-0 left-0 h-auto w-[18rem] sm:w-[19rem] sm:w-3/4 overflow-y-auto border-r data-entering:slide-in-from-left data-exiting:slide-out-to-left sm:max-w-xs\",\n      right:\n        \"inset-y-0 right-0 h-auto w-[18rem] sm:w-[19rem] sm:w-3/4 overflow-y-auto border-l data-entering:slide-in-from-right data-exiting:slide-out-to-right sm:max-w-xs\",\n    },\n    isStack: {\n      false: \"border-fg/20 dark:border-border\",\n      true: \"ring-fg/5 dark:ring-border\",\n    },\n  },\n  compoundVariants: generateCompoundVariants([\"top\", \"bottom\", \"left\", \"right\"]),\n})\n\nconst Sheet = (props: DialogTriggerProps) => {\n  return <DialogTrigger {...props} />\n}\n\ninterface SheetContentProps\n  extends Omit<React.ComponentProps<typeof Modal>, \"children\" | \"className\">,\n    Omit<ModalOverlayProps, \"className\">,\n    VariantProps<typeof overlayStyles> {\n  \"aria-label\"?: DialogProps[\"aria-label\"]\n  \"aria-labelledby\"?: DialogProps[\"aria-labelledby\"]\n  role?: DialogProps[\"role\"]\n  closeButton?: boolean\n  isBlurred?: boolean\n  isStack?: boolean\n  side?: Sides\n  classNames?: {\n    overlay?: ModalOverlayProps[\"className\"]\n    content?: ModalOverlayProps[\"className\"]\n  }\n}\n\nconst Content = ({\n  classNames,\n  isBlurred = false,\n  isDismissable = true,\n  side = \"right\",\n  role = \"dialog\",\n  closeButton = true,\n  isStack = true,\n  children,\n  ...props\n}: SheetContentProps) => {\n  const _isDismissable = role === \"alertdialog\" ? false : isDismissable\n  return (\n    <ModalOverlay\n      isDismissable={_isDismissable}\n      className={composeRenderProps(classNames?.overlay, (className, renderProps) => {\n        return overlayStyles({\n          ...renderProps,\n          isBlurred,\n          className,\n        })\n      })}\n      {...props}\n    >\n      <Modal\n        className={composeRenderProps(classNames?.content, (className, renderProps) =>\n          contentStyles({\n            ...renderProps,\n            side,\n            isStack,\n            className,\n          }),\n        )}\n        {...props}\n      >\n        {(values) => (\n          <Dialog role={role} aria-label={props[\"aria-label\"] ?? undefined} className=\"h-full\">\n            <>\n              {typeof children === \"function\" ? children(values) : children}\n              {closeButton && <Dialog.CloseIndicator className=\"top-2.5 right-2.5\" isDismissable={_isDismissable} />}\n            </>\n          </Dialog>\n        )}\n      </Modal>\n    </ModalOverlay>\n  )\n}\n\nSheet.Trigger = Dialog.Trigger\nSheet.Footer = Dialog.Footer\nSheet.Content = Content\nSheet.Header = Dialog.Header\nSheet.Title = Dialog.Title\nSheet.Description = Dialog.Description\nSheet.Body = Dialog.Body\nSheet.Close = Dialog.Close\n\nexport { Sheet }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/sheet.tsx"
}