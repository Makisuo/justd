{
  "name": "disclosure",
  "files": [
    {
      "name": "disclosure.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconChevronLeft } from \"justd-icons\"\nimport type {\n  ButtonProps,\n  DisclosureGroupProps as DisclosureGroupPrimitiveProps,\n  DisclosurePanelProps,\n  DisclosureProps\n} from \"react-aria-components\"\nimport {\n  Button,\n  composeRenderProps,\n  Disclosure as DisclosurePrimitive,\n  DisclosureGroup as DisclosureGroupPrimitive,\n  DisclosurePanel\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { cn } from \"./primitive\"\n\ninterface DisclosureGroupProps extends DisclosureGroupPrimitiveProps {\n  hideBorder?: boolean\n  hideIndicator?: boolean\n  className?: string\n}\n\nconst DisclosureGroupContext = React.createContext<DisclosureGroupProps>({})\n\nconst DisclosureGroup = ({ children, hideIndicator, hideBorder, className, ...props }: DisclosureGroupProps) => {\n  return (\n    <DisclosureGroupPrimitive\n      {...props}\n      className={({ isDisabled }) =>\n        cn([\n          isDisabled ? \"cursor-not-allowed opacity-75\" : \"cursor-pointer\",\n          hideBorder ? \"**:data-[slot=accordion-item]:border-none\" : \"**:data-[slot=accordion-item]:border-b\"\n        ])\n      }\n    >\n      {(values) => (\n        <div data-slot=\"accordion-item-content\" className={className}>\n          <DisclosureGroupContext.Provider value={{ hideIndicator, hideBorder }}>\n            {typeof children === \"function\" ? children(values) : children}\n          </DisclosureGroupContext.Provider>\n        </div>\n      )}\n    </DisclosureGroupPrimitive>\n  )\n}\n\nconst disclosureStyles = tv({\n  base: \"flex group relative w-full flex-col\",\n  variants: {\n    isDisabled: {\n      true: \"cursor-not-allowed opacity-75\"\n    },\n    isExpanded: {\n      true: \"pb-3\"\n    }\n  },\n  compoundVariants: [\n    {\n      hideBorder: true,\n      isExpanded: true,\n      className: \"pb-2\"\n    }\n  ]\n})\n\nconst Disclosure = ({ className, ...props }: DisclosureProps) => {\n  return (\n    <DisclosurePrimitive\n      data-slot=\"accordion-item\"\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) =>\n        disclosureStyles({ ...renderProps, className })\n      )}\n    >\n      {props.children}\n    </DisclosurePrimitive>\n  )\n}\n\nconst accordionTriggerStyles = tv({\n  base: [\n    \"flex flex-1 group rounded-lg aria-expanded:text-fg text-muted-fg sm:text-sm items-center gap-x-2 font-medium\"\n  ],\n  variants: {\n    hideBorder: {\n      true: \"py-2\",\n      false: \"py-3\"\n    },\n    isFocused: {\n      true: \"outline-hidden text-fg\"\n    },\n    isOpen: {\n      true: \"text-fg\"\n    },\n    isDisabled: {\n      true: \"opacity-50 cursor-default\"\n    }\n  }\n})\n\nconst Trigger = ({ className, ...props }: ButtonProps) => {\n  const { hideIndicator, hideBorder } = React.useContext(DisclosureGroupContext)\n  return (\n    <Button\n      {...props}\n      slot=\"trigger\"\n      className={composeRenderProps(className, (className, renderProps) =>\n        accordionTriggerStyles({\n          ...renderProps,\n          hideBorder,\n          className\n        })\n      )}\n    >\n      {(values) => (\n        <>\n          {typeof props.children === \"function\" ? props.children(values) : props.children}\n          {!hideIndicator && (\n            <IconChevronLeft\n              className={cn(\"ml-auto transition shrink-0 duration-300 group-aria-expanded:-rotate-90\")}\n            />\n          )}\n        </>\n      )}\n    </Button>\n  )\n}\n\nconst Panel = ({ className, ...props }: DisclosurePanelProps) => {\n  return (\n    <DisclosurePanel {...props} className={cn(\"sm:text-sm\", className)}>\n      {props.children}\n    </DisclosurePanel>\n  )\n}\n\nDisclosure.Trigger = Trigger\nDisclosure.Panel = Panel\n\nexport { DisclosureGroup, Disclosure }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/disclosure.tsx"
}