{
  "name": "disclosure",
  "files": [
    {
      "name": "disclosure.tsx",
      "content": "\"use client\"\n\nimport { IconChevronLeft } from \"justd-icons\"\nimport type {\n  DisclosureGroupProps as AccordionProps,\n  ButtonProps,\n  DisclosurePanelProps,\n  DisclosureProps,\n} from \"react-aria-components\"\nimport {\n  DisclosureGroup as Accordion,\n  Button,\n  Disclosure as Collapsible,\n  DisclosurePanel as CollapsiblePanel,\n  Heading,\n  composeRenderProps,\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { cn } from \"./primitive\"\n\nconst DisclosureGroup = ({ children, className, ...props }: AccordionProps) => {\n  return (\n    <Accordion\n      data-slot=\"disclosure-group\"\n      {...props}\n      className={({ isDisabled }) =>\n        cn(isDisabled ? \"cursor-not-allowed opacity-75\" : \"cursor-pointer\", \"peer\", className)\n      }\n    >\n      {(values) => (\n        <div data-slot=\"disclosure-content\">{typeof children === \"function\" ? children(values) : children}</div>\n      )}\n    </Accordion>\n  )\n}\n\nconst disclosure = tv({\n  base: [\"peer border-b border-border min-w-60 w-full group/disclosure\"],\n  variants: {\n    isDisabled: {\n      true: \"cursor-not-allowed opacity-70\",\n    },\n  },\n})\n\nconst Disclosure = ({ className, ...props }: DisclosureProps) => {\n  return (\n    <Collapsible\n      data-slot=\"disclosure\"\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) => disclosure({ ...renderProps, className }))}\n    >\n      {props.children}\n    </Collapsible>\n  )\n}\n\nconst disclosureTrigger = tv({\n  base: [\n    \"flex items-center gap-x-2 group/trigger [&[aria-expanded=true]_[data-slot=chevron]]:-rotate-90 **:data-[slot=chevron]:size-5 **:data-[slot=chevron]:size-5 **:data-[slot=icon]:shrink-0 sm:text-sm **:data-[slot=icon]:-mx-0.5 **:data-[slot=icon]:text-muted-fg justify-between py-3 **:[span]:*:data-[slot=icon]:mr-1 **:[span]:flex **:[span]:items-center **:[span]:gap-x-1 w-full text-left font-medium\",\n  ],\n  variants: {\n    isFocused: {\n      true: \"outline-hidden text-fg\",\n    },\n    isOpen: {\n      true: \"text-fg\",\n    },\n    isDisabled: {\n      true: \"opacity-50 cursor-default\",\n    },\n  },\n})\n\nconst DisclosureTrigger = ({ className, ...props }: ButtonProps) => {\n  return (\n    <Heading>\n      <Button\n        {...props}\n        slot=\"trigger\"\n        className={composeRenderProps(className, (className, renderProps) =>\n          disclosureTrigger({\n            ...renderProps,\n            className,\n          }),\n        )}\n      >\n        {(values) => (\n          <>\n            {typeof props.children === \"function\" ? props.children(values) : props.children}\n            <IconChevronLeft\n              data-slot=\"chevron\"\n              className=\"ml-auto transition duration-300 internal-chevron size-4 shrink-0\"\n            />\n          </>\n        )}\n      </Button>\n    </Heading>\n  )\n}\n\nconst DisclosurePanel = ({ className, ...props }: DisclosurePanelProps) => {\n  return (\n    <CollapsiblePanel\n      data-slot=\"disclosure-panel\"\n      {...props}\n      className={cn(\n        \"overflow-hidden text-muted-fg text-sm transition-all has-data-[slot=disclosure-group]:**:[button]:px-4\",\n        \"**:data-[slot=disclosure-group]:border-t **:data-[slot=disclosure-group]:**:[.internal-chevron]:hidden\",\n        className,\n      )}\n    >\n      <div\n        data-slot=\"disclosure-panel-content\"\n        className={cn(\n          \"pt-0 not-has-data-[slot=disclosure-group]:group-data-expanded/disclosure:pb-3 [&:has([data-slot=disclosure-group])_&]:px-11\",\n          className,\n        )}\n      >\n        {props.children}\n      </div>\n    </CollapsiblePanel>\n  )\n}\n\nexport { DisclosureGroup, Disclosure, DisclosurePanel, DisclosureTrigger }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/disclosure.tsx"
}