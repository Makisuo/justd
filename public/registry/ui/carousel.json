{
  "name": "carousel",
  "files": [
    {
      "name": "carousel.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport useEmblaCarousel, { type UseEmblaCarouselType } from \"embla-carousel-react\"\nimport { IconChevronLgLeft, IconChevronLgRight } from \"justd-icons\"\nimport type { ListBoxItemProps, SectionProps } from \"react-aria-components\"\nimport { ListBox, ListBoxItem, ListBoxSection } from \"react-aria-components\"\n\nimport type { ButtonProps } from \"./button\"\nimport { Button } from \"./button\"\nimport { cn } from \"./primitive\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nconst useCarousel = () => {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\ninterface CarouselRootProps {\n  CarouselContent?: typeof CarouselContent\n  CarouselHandler?: typeof CarouselHandler\n  CarouselItem?: typeof CarouselItem\n  CarouselButton?: typeof CarouselButton\n}\n\ninterface CarouselProps extends React.HTMLAttributes<HTMLDivElement>, CarouselRootProps {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\nconst Carousel = ({\n  orientation = \"horizontal\",\n  opts,\n  setApi,\n  plugins,\n  className,\n  children,\n  ...props\n}: CarouselProps) => {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === \"horizontal\" ? \"x\" : \"y\"\n    },\n    plugins\n  )\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) {\n      return\n    }\n\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === \"ArrowLeft\") {\n        event.preventDefault()\n        scrollPrev()\n      } else if (event.key === \"ArrowRight\") {\n        event.preventDefault()\n        scrollNext()\n      }\n    },\n    [scrollPrev, scrollNext]\n  )\n\n  React.useEffect(() => {\n    if (!api || !setApi) {\n      return\n    }\n\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) {\n      return\n    }\n\n    onSelect(api)\n    api.on(\"reInit\", onSelect)\n    api.on(\"select\", onSelect)\n\n    return () => {\n      api?.off(\"select\", onSelect)\n    }\n  }, [api, onSelect])\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation: orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext\n      }}\n    >\n      <div\n        onKeyDownCapture={handleKeyDown}\n        className={cn(\"relative\", className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  )\n}\n\nconst CarouselContent = <T extends object>({ className, ...props }: SectionProps<T>) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <ListBox\n      layout={orientation === \"vertical\" ? \"stack\" : \"grid\"}\n      aria-label=\"Slides\"\n      orientation={orientation}\n      ref={carouselRef}\n      className=\"overflow-hidden\"\n    >\n      <ListBoxSection\n        className={cn(\"flex\", orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\", className)}\n        {...props}\n      />\n    </ListBox>\n  )\n}\n\nconst CarouselItem = ({ className, ...props }: ListBoxItemProps) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <ListBoxItem\n      aria-label={`Slide ${props.id}`}\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 xd24r shrink-0 data-focused:outline-hidden grow-0 basis-full data-focus-visible:outline-hidden\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nconst CarouselHandler = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { orientation } = useCarousel()\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"mt-6 z-10 relative flex items-center gap-x-2\",\n          orientation === \"horizontal\" ? \"justify-end\" : \"justify-center\",\n          className\n        )}\n        {...props}\n      />\n    )\n  }\n)\nCarouselHandler.displayName = \"CarouselHandler\"\n\nconst CarouselButton = ({\n  slot,\n  className,\n  intent = \"secondary\",\n  appearance = \"outline\",\n  shape = \"circle\",\n  size = \"square-petite\",\n  ...props\n}: ButtonProps & { slot: \"previous\" | \"next\" }) => {\n  const { orientation, scrollPrev, canScrollPrev, scrollNext, canScrollNext } = useCarousel()\n  const isNext = slot === \"next\"\n  const canScroll = isNext ? canScrollNext : canScrollPrev\n  const scroll = isNext ? scrollNext : scrollPrev\n  const Icon = isNext ? IconChevronLgRight : IconChevronLgLeft\n\n  return (\n    <Button\n      aria-label={isNext ? \"Next slide\" : \"Previous slide\"}\n      slot={slot}\n      intent={intent}\n      appearance={appearance}\n      size={size}\n      shape={shape}\n      className={cn(orientation === \"vertical\" ? \"rotate-90\" : \"\", className)}\n      isDisabled={!canScroll}\n      onPress={scroll}\n      {...props}\n    >\n      <Icon className=\"size-4\" />\n    </Button>\n  )\n}\n\nCarousel.Content = CarouselContent\nCarousel.Handler = CarouselHandler\nCarousel.Item = CarouselItem\nCarousel.Button = CarouselButton\n\nexport { Carousel, type CarouselApi }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/carousel.tsx"
}