{
  "name": "pagination",
  "files": [
    {
      "name": "pagination.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport {\n  IconChevronLgLeft,\n  IconChevronLgRight,\n  IconChevronsLgLeft,\n  IconChevronsLgRight,\n  IconDotsHorizontal\n} from \"justd-icons\"\nimport {\n  composeRenderProps,\n  ListBox,\n  ListBoxItem,\n  type ListBoxItemProps,\n  type ListBoxProps,\n  ListBoxSection,\n  type SectionProps,\n  Separator\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { buttonStyles } from \"./button\"\nimport { cn } from \"./primitive\"\n\nconst paginationStyles = tv({\n  slots: {\n    pagination: \"mx-auto flex w-full justify-center gap-[5px]\",\n    section: \"flex h-9 gap-[5px]\",\n    list: \"flex flex-row items-center gap-[5px]\",\n    itemButton:\n      \"data-data-focus-visible:border-primary text-fg font-normal cursor-pointer data-data-focus-visible:bg-primary/10 data-data-focus-visible:ring-4 data-data-focus-visible:ring-primary/20\",\n    itemLabel: \"h-9 px-3.5 tabular-nums grid place-content-center\",\n    itemSeparator: \"h-9 grid place-content-center\",\n    itemEllipsis:\n      \"flex items-center justify-center data-data-focus-visible:border-primary rounded-lg border border-transparent data-focused:outline-hidden size-9 data-data-focus-visible:bg-primary/10 data-data-focus-visible:ring-4 data-data-focus-visible:ring-primary/20\",\n    itemEllipsisIcon: \"flex size-9 items-center justify-center\",\n    defaultItem:\n      \"data-data-focus-visible:border-primary tabular-nums font-normal cursor-pointer disabled:cursor-default data-data-focus-visible:bg-primary/10 data-data-focus-visible:ring-4 data-data-focus-visible:ring-primary/20 disabled:opacity-100\",\n    itemSeparatorLine: \"h-5 w-[1.5px] bg-secondary-fg/40 rotate-[14deg] shrink-0\"\n  }\n})\n\nconst {\n  pagination,\n  section,\n  list,\n  itemButton,\n  itemLabel,\n  itemSeparator,\n  itemEllipsis,\n  itemEllipsisIcon,\n  defaultItem,\n  itemSeparatorLine\n} = paginationStyles()\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav role=\"navigation\" aria-label=\"pagination\" className={pagination({ className })} {...props} />\n)\n\nconst PaginationSection = <T extends object>({ className, ...props }: SectionProps<T>) => (\n  <ListBoxSection {...props} className={section({ className })} />\n)\n\nconst List = <T extends object>({ className, ...props }: ListBoxProps<T>) => {\n  return (\n    <ListBox\n      orientation=\"horizontal\"\n      aria-label={props[\"aria-label\"] || \"Pagination\"}\n      layout=\"grid\"\n      className={composeRenderProps(className, (className) => list({ className }))}\n      {...props}\n    />\n  )\n}\n\nconst renderListItem = (\n  props: ListBoxItemProps & {\n    textValue?: string\n    \"aria-current\"?: string | undefined\n    isDisabled?: boolean\n    className?: string\n  },\n  children: React.ReactNode\n) => <ListBoxItem {...props}>{children}</ListBoxItem>\n\ninterface PaginationItemProps extends ListBoxItemProps {\n  children?: React.ReactNode\n  className?: string\n  intent?: \"primary\" | \"secondary\"\n  size?: \"medium\" | \"large\" | \"square-petite\" | \"extra-small\" | \"small\"\n  shape?: \"square\" | \"circle\"\n  appearance?: \"solid\" | \"outline\" | \"plain\"\n  isCurrent?: boolean\n  variant?: \"label\" | \"separator\" | \"ellipsis\" | \"default\" | \"last\" | \"first\" | \"previous\" | \"next\"\n}\n\nconst Item = ({\n  variant = \"default\",\n  size = \"small\",\n  appearance = \"outline\",\n  intent,\n  className,\n  isCurrent,\n  children,\n  ...props\n}: PaginationItemProps) => {\n  const textValue =\n    typeof children === \"string\" ? children : typeof children === \"number\" ? children.toString() : undefined\n\n  const renderPaginationIndicator = (indicator: React.ReactNode) =>\n    renderListItem(\n      {\n        textValue: variant,\n        \"aria-current\": isCurrent ? \"page\" : undefined,\n        isDisabled: isCurrent,\n        className: cn(\n          buttonStyles({\n            appearance: \"outline\",\n            size: \"small\",\n            className: itemButton()\n          }),\n          className\n        ),\n        ...props\n      },\n      indicator\n    )\n\n  switch (variant) {\n    case \"label\":\n      return renderListItem(\n        {\n          textValue: textValue,\n          className: itemLabel({ className }),\n          ...props\n        },\n        children\n      )\n    case \"separator\":\n      return renderListItem(\n        {\n          textValue: \"Separator\",\n          className: itemSeparator({ className }),\n          ...props\n        },\n        <Separator orientation=\"vertical\" className={itemSeparatorLine()} />\n      )\n    case \"ellipsis\":\n      return renderListItem(\n        {\n          textValue: \"More pages\",\n          className: itemEllipsis({ className }),\n          ...props\n        },\n        <span aria-hidden className={itemEllipsisIcon({ className })}>\n          <IconDotsHorizontal />\n        </span>\n      )\n    case \"previous\":\n      return renderPaginationIndicator(<IconChevronLgLeft />)\n    case \"next\":\n      return renderPaginationIndicator(<IconChevronLgRight />)\n    case \"first\":\n      return renderPaginationIndicator(<IconChevronsLgLeft />)\n    case \"last\":\n      return renderPaginationIndicator(<IconChevronsLgRight />)\n    default:\n      return renderListItem(\n        {\n          textValue: textValue,\n          \"aria-current\": isCurrent ? \"page\" : undefined,\n          isDisabled: isCurrent,\n          className: cn(\n            buttonStyles({\n              intent: isCurrent ? \"primary\" : intent,\n              appearance: isCurrent ? \"solid\" : appearance,\n              size,\n              className: defaultItem({ className })\n            }),\n            className\n          ),\n          ...props\n        },\n        children\n      )\n  }\n}\n\nPagination.Item = Item\nPagination.List = List\nPagination.Section = PaginationSection\n\nexport { Pagination }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/pagination.tsx"
}