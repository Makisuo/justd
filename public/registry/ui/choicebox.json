{
  "name": "choicebox",
  "files": [
    {
      "name": "choicebox.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type { GridListItemProps, GridListProps } from \"react-aria-components\"\nimport { composeRenderProps, GridList, GridListItem } from \"react-aria-components\"\nimport type { VariantProps } from \"tailwind-variants\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Checkbox } from \"./checkbox\"\nimport { Description, Label } from \"./field\"\nimport { focusStyles } from \"./primitive\"\n\nconst choiceboxStyles = tv({\n  base: \"grid\",\n  variants: {\n    columns: {\n      1: \"sm:grid-cols-1\",\n      2: \"sm:grid-cols-2\",\n      3: \"sm:grid-cols-3\",\n      4: \"sm:grid-cols-4\",\n      5: \"sm:grid-cols-5\",\n      6: \"sm:grid-cols-6\"\n    },\n    gap: {\n      2: \"gap-2\",\n      4: \"gap-4\",\n      6: \"gap-6\"\n    }\n  },\n  defaultVariants: {\n    columns: 2,\n    gap: 6\n  }\n})\n\ninterface ChoiceboxProps<T extends object> extends GridListProps<T>, VariantProps<typeof choiceboxStyles> {\n  className?: string\n}\n\nconst Choicebox = <T extends object>({\n  columns,\n  gap,\n  className,\n  selectionMode = \"multiple\",\n  ...props\n}: ChoiceboxProps<T>) => {\n  return (\n    <GridList\n      layout={columns === 1 ? \"stack\" : \"grid\"}\n      selectionMode={selectionMode}\n      className={choiceboxStyles({\n        columns,\n        gap,\n        className\n      })}\n      {...props}\n    />\n  )\n}\n\nconst choiceboxItemStyles = tv({\n  extend: focusStyles,\n  base: \"rounded-lg cursor-pointer border p-4 [&_[slot=title]]:font-medium\",\n  variants: {\n    isHovered: {\n      true: \"bg-secondary/50\"\n    },\n    isSelected: {\n      true: [\n        \"z-20 bg-subtle border-ring/75\",\n        \"[&_[slot=title]]:text-subtle-fg\",\n        \"[&_[slot=description]]:text-subtle-fg/70\"\n      ],\n      false: \"\"\n    },\n    isFocused: {\n      true: \"border-ring/80\"\n    },\n    isDisabled: {\n      true: \"z-10 cursor-default opacity-50 [&_[slot=title]]:text-muted-fg forced-colors:text-[GrayText]\"\n    }\n  }\n})\n\ninterface ChoiceboxItemProps extends GridListItemProps, VariantProps<typeof choiceboxItemStyles> {\n  title: string\n  description?: string\n}\n\nconst ChoiceboxItem = ({ children, className, ...props }: ChoiceboxItemProps) => {\n  const textValue = typeof children === \"string\" ? children : undefined\n  return (\n    <GridListItem\n      textValue={textValue}\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) =>\n        choiceboxItemStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    >\n      {(values) => (\n        <div className=\"flex items-center w-full justify-between gap-2\">\n          <div className=\"pr-8 flex flex-col\">\n            <Label slot=\"title\" htmlFor={textValue}>\n              {props.title}\n            </Label>\n            {props.description && <Description>{props.description}</Description>}\n          </div>\n          <>\n            {values.selectionMode === \"multiple\" && values.selectionBehavior === \"toggle\" && (\n              <Checkbox slot=\"selection\" />\n            )}\n          </>\n        </div>\n      )}\n    </GridListItem>\n  )\n}\n\nChoicebox.Item = ChoiceboxItem\nexport { Choicebox }\n"
    }
  ],
  "type": "components:ui",
  "componentPath": "components/ui/choicebox.tsx"
}