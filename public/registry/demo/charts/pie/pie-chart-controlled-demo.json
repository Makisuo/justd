{
  "name": "pie-chart-controlled-demo",
  "files": [
    {
      "name": "pie-chart-controlled-demo.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type { Key } from \"react-aria-components\"\nimport { Label, Pie, PieChart, Sector } from \"recharts\"\nimport type { PieSectorDataItem } from \"recharts/types/polar/Pie\"\nimport { Card, Chart, type ChartConfig, ChartStyle, ChartTooltip, ChartTooltipContent, Select } from \"ui\"\n\nconst data = [\n  { month: \"january\", sales: 3186, fill: \"var(--color-january)\" },\n  { month: \"february\", sales: 2305, fill: \"var(--color-february)\" },\n  { month: \"march\", sales: 4237, fill: \"var(--color-march)\" },\n  { month: \"april\", sales: 4173, fill: \"var(--color-april)\" },\n  { month: \"may\", sales: 5209, fill: \"var(--color-may)\" }\n]\n\nconst config = {\n  visitors: {\n    label: \"Visitors\"\n  },\n  sales: {\n    label: \"Sales\"\n  },\n  profit: {\n    label: \"Profit\"\n  },\n  january: {\n    label: \"January\",\n    color: \"var(--chart-1)\"\n  },\n  february: {\n    label: \"February\",\n    color: \"var(--chart-2)\"\n  },\n  march: {\n    label: \"March\",\n    color: \"var(--chart-3)\"\n  },\n  april: {\n    label: \"April\",\n    color: \"var(--chart-4)\"\n  },\n  may: {\n    label: \"May\",\n    color: \"var(--chart-5)\"\n  }\n} satisfies ChartConfig\n\nexport default function PieChartControlledDemo() {\n  const id = \"pie-interactive\"\n  const [activeMonth, setActiveMonth] = React.useState<Key>(data[0].month)\n\n  const activeIndex = React.useMemo(() => data.findIndex((item) => item.month === activeMonth), [activeMonth])\n  const months = React.useMemo(() => data.map((item) => item.month), [])\n\n  return (\n    <Card data-chart={id} className=\"flex flex-col\">\n      <ChartStyle id={id} config={config} />\n      <Card.Header className=\"flex-row items-start space-y-0 pb-0\">\n        <div className=\"grid w-full gap-1\">\n          <Card.Title className=\"capitalize\">{activeMonth}</Card.Title>\n          <Card.Description>\n            The total sales for the month is{\" \"}\n            <strong className=\"font-semibold\">{data[activeIndex].sales.toLocaleString()}</strong>\n          </Card.Description>\n        </div>\n        <Select selectedKey={activeMonth} onSelectionChange={setActiveMonth}>\n          <Select.Trigger className=\"ml-auto h-8 px-2 w-[130px] rounded-lg\" aria-label=\"Select a value\" />\n          <Select.List className=\"rounded-xl\">\n            {months.map((key) => {\n              const _config = config[key as keyof typeof config]\n\n              if (!_config) {\n                return null\n              }\n\n              return (\n                <Select.Option key={key} id={key}>\n                  <div className=\"flex items-center gap-2 text-xs\">{_config?.label}</div>\n                </Select.Option>\n              )\n            })}\n          </Select.List>\n        </Select>\n      </Card.Header>\n      <Card.Content className=\"flex flex-1 justify-center pb-0\">\n        <Chart id={id} config={config} className=\"mx-auto aspect-square w-full max-w-[315px]\">\n          <PieChart>\n            <ChartTooltip cursor={false} content={<ChartTooltipContent hideLabel />} />\n            <Pie\n              data={data}\n              dataKey=\"sales\"\n              nameKey=\"month\"\n              innerRadius={60}\n              strokeWidth={5}\n              activeIndex={activeIndex}\n              activeShape={({ outerRadius = 0, ...props }: PieSectorDataItem) => (\n                <g>\n                  <Sector {...props} outerRadius={outerRadius + 10} />\n                  <Sector {...props} outerRadius={outerRadius + 25} innerRadius={outerRadius + 12} />\n                </g>\n              )}\n            >\n              <Label\n                content={({ viewBox }) => {\n                  if (viewBox && \"cx\" in viewBox && \"cy\" in viewBox) {\n                    return (\n                      <text x={viewBox.cx} y={viewBox.cy} textAnchor=\"middle\" dominantBaseline=\"middle\">\n                        <tspan x={viewBox.cx} y={viewBox.cy} className=\"fill-fg text-2xl font-semibold\">\n                          {data[activeIndex].sales.toLocaleString()}\n                        </tspan>\n                        <tspan x={viewBox.cx} y={(viewBox.cy || 0) + 24} className=\"fill-muted-fg\">\n                          Visitors\n                        </tspan>\n                      </text>\n                    )\n                  }\n                }}\n              />\n            </Pie>\n          </PieChart>\n        </Chart>\n      </Card.Content>\n    </Card>\n  )\n}\n"
    }
  ],
  "type": "components:demo",
  "componentPath": "components/docs/charts/pie/pie-chart-controlled-demo.tsx"
}