import fs from "fs"
import path from "path"

type RegistryItem = {
  name: string
  dependencies: string[] | undefined
  files: {
    name: string
    content: string
  }[]
  type: string
  componentPath: string
}

const generateComponentRegistry = () => {
  const outputBaseDir = "public/registry"
  const generatedFilePath = "__registry__/generated.ts"

  const sources = [
    { type: "ui", path: "components/ui" },
    { type: "anatomies", path: "components/docs/anatomies" },
    { type: "demo", path: "components/docs" }
  ]

  const getAllFiles = (dirPath: string, arrayOfFiles: string[] = []): string[] => {
    if (!fs.existsSync(dirPath)) {
      console.warn(`Directory not found: ${dirPath}`)
      return []
    }
    const files = fs.readdirSync(dirPath)
    files.forEach((file) => {
      const fullPath = path.join(dirPath, file)
      if (fs.statSync(fullPath).isDirectory()) {
        arrayOfFiles = getAllFiles(fullPath, arrayOfFiles)
      } else if (file.endsWith(".tsx")) {
        arrayOfFiles.push(fullPath)
      }
    })
    return arrayOfFiles
  }

  const registryEntries: string[] = []
  const generatedFiles: { Type: string; Path: string }[] = []

  sources.forEach(({ type, path: sourcePath }) => {
    const resolvedPath = path.resolve(sourcePath)

    if (!fs.existsSync(resolvedPath)) {
      console.warn(`Directory not found: ${resolvedPath}`)
      return
    }

    const files = getAllFiles(resolvedPath)

    const filteredFiles = type === "demo" ? files.filter((file) => !file.includes("/anatomies/")) : files

    filteredFiles.forEach((filePath) => {
      const componentName = path.basename(filePath, ".tsx")
      const fileContent = fs.readFileSync(filePath, "utf-8")

      const relativePath = path.relative(process.cwd(), filePath).replace(/\\/g, "/")
      const relativeKey = path.relative(sourcePath, filePath).replace(/\\/g, "/")
      const key = `${type}/${relativeKey.replace(".tsx", "")}`

      const registryItem: RegistryItem = {
        name: componentName,
        dependencies: undefined,
        files: [
          {
            name: path.basename(filePath),
            content: fileContent
          }
        ],
        type: `components:${type}`,
        componentPath: relativePath
      }

      const jsonOutputPath = path.join(outputBaseDir, `${key}.json`)
      const jsonDir = path.dirname(jsonOutputPath)
      if (!fs.existsSync(jsonDir)) {
        fs.mkdirSync(jsonDir, { recursive: true })
      }
      fs.writeFileSync(jsonOutputPath, JSON.stringify(registryItem, null, 2))

      generatedFiles.push({ Type: type, Path: path.basename(jsonOutputPath) })
      if (type === "demo") {
        registryEntries.push(`
        "${key}": {
          name: "${componentName}",
          type: "registry:${type}",
          registryDependencies: undefined,
          files: ["${relativePath}"],
          component: React.lazy(() => import("@/${relativePath}")),
          source: "",
          category: "undefined",
          subcategory: "undefined",
          chunks: []
        }
      `)
      }
    })
  })

  const generatedContent = `
// @ts-nocheck
// THIS FILE IS AUTO-GENERATED. DO NOT EDIT MANUALLY.
// It is generated by the build-registry script.

import React from "react";

const registry = {
  ${registryEntries.join(",\n")}
};

export default registry;
  `
  console.log("Generating registry files...")

  const loadingInterval = setInterval(() => {
    process.stdout.write(".")
  }, 500)

  const generatedDir = path.dirname(generatedFilePath)
  if (!fs.existsSync(generatedDir)) {
    fs.mkdirSync(generatedDir, { recursive: true })
  }
  fs.writeFileSync(generatedFilePath, generatedContent)

  clearInterval(loadingInterval)

  console.table(generatedFiles)

  console.log("Registry generation complete.")
}

generateComponentRegistry()
