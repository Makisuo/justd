{"content":"## Basic\n\nA combo box combines a text input with a listbox, allowing users to filter options to match what they're looking for.\n<How minW72 toUse=\"pickers/combo-box/combo-box-demo\" />\n\n## Installation\n<Installation options={{ isComponent: true }} items={['combo-box']}/>\n\n## Composed Components\n<Composed components={['field', 'dropdown', 'popover', 'list-box', 'button']}/>\n\n## Manual Installation\n<Installation options={{ isManual: true }} items={['react-aria-components', 'justd-icons']}/>\n\n<SourceCode toShow={['combo-box']}/>\n\n## Anatomy\n<Anatomy show='combo-box-anatomy'/>\n\n## Using Avatars\nThe combo box can be configured to display avatars instead of just regular text.\n<How minW72 toUse=\"pickers/combo-box/combo-box-avatar-demo\" />\n\n## Section\nA combo box can display items grouped together in sections.\n<How minW72 toUse=\"pickers/combo-box/combo-box-section-demo\" />\n\n## Validation\nIf a user submits the form without selecting an item, an error message will appear.\n<How minW72 toUse=\"pickers/combo-box/combo-box-validation-demo\" />\n\n## Controlled\nThere are two ways to control the combo box: using the `onInputChange` prop or the `onSelectionChange` prop. These methods serve different purposes, as illustrated in the examples below. Both examples follow the same approach, defining `id` and `textValue` for the options.\n\nWhen you only need the `textValue` of the selected option, use the `onInputChange` prop. However, if you need to obtain the actual `id` of the selected option, the `onSelectionChange` prop is the appropriate choice.\n### Input\nThis combo box is controlled by the `onInputChange` prop.\n<How minW72 toUse=\"pickers/combo-box/combo-box-controlled-demo\" />\n\n### Selection\nThis combo box is controlled by the `onSelectionChange` prop.\n<How minW72 toUse=\"pickers/combo-box/combo-box-controlled-selection-demo\" />\n\n## Readonly\nWhen the combo box is in a readonly state, it cannot be edited.\n<How minW72 toUse=\"pickers/combo-box/combo-box-readonly-demo\" />\n\n## Disabled\nWhen the combo box is disabled, it becomes non-interactive and cannot be edited.\n<How minW72 toUse=\"pickers/combo-box/combo-box-disabled-demo\" />","title":"Combo Box","description":"Drop down a list, type to narrow it down, like flipping through a phone book with a quick finder tool.","_meta":{"filePath":"components/pickers/combo-box.mdx","fileName":"combo-box.mdx","directory":"components/pickers","extension":"mdx","path":"components/pickers/combo-box"},"toc":[{"title":"Basic","url":"#basic","depth":2},{"title":"Installation","url":"#installation","depth":2},{"title":"Composed Components","url":"#composed-components","depth":2},{"title":"Manual Installation","url":"#manual-installation","depth":2},{"title":"Anatomy","url":"#anatomy","depth":2},{"title":"Using Avatars","url":"#using-avatars","depth":2},{"title":"Section","url":"#section","depth":2},{"title":"Validation","url":"#validation","depth":2},{"title":"Controlled","url":"#controlled","depth":2},{"title":"Input","url":"#input","depth":3},{"title":"Selection","url":"#selection","depth":3},{"title":"Readonly","url":"#readonly","depth":2},{"title":"Disabled","url":"#disabled","depth":2}],"structuredData":{"contents":[{"heading":"basic","content":"A combo box combines a text input with a listbox, allowing users to filter options to match what they're looking for."},{"heading":"using-avatars","content":"The combo box can be configured to display avatars instead of just regular text."},{"heading":"section","content":"A combo box can display items grouped together in sections."},{"heading":"validation","content":"If a user submits the form without selecting an item, an error message will appear."},{"heading":"controlled","content":"There are two ways to control the combo box: using the onInputChange prop or the onSelectionChange prop. These methods serve different purposes, as illustrated in the examples below. Both examples follow the same approach, defining id and textValue for the options."},{"heading":"controlled","content":"When you only need the textValue of the selected option, use the onInputChange prop. However, if you need to obtain the actual id of the selected option, the onSelectionChange prop is the appropriate choice."},{"heading":"input","content":"This combo box is controlled by the onInputChange prop."},{"heading":"selection","content":"This combo box is controlled by the onSelectionChange prop."},{"heading":"readonly","content":"When the combo box is in a readonly state, it cannot be edited."},{"heading":"disabled","content":"When the combo box is disabled, it becomes non-interactive and cannot be edited."}],"headings":[{"id":"basic","content":"Basic"},{"id":"installation","content":"Installation"},{"id":"composed-components","content":"Composed Components"},{"id":"manual-installation","content":"Manual Installation"},{"id":"anatomy","content":"Anatomy"},{"id":"using-avatars","content":"Using Avatars"},{"id":"section","content":"Section"},{"id":"validation","content":"Validation"},{"id":"controlled","content":"Controlled"},{"id":"input","content":"Input"},{"id":"selection","content":"Selection"},{"id":"readonly","content":"Readonly"},{"id":"disabled","content":"Disabled"}]},"body":"var Component=(()=>{var u=Object.create;var d=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var w=(n,o)=>()=>(o||n((o={exports:{}}).exports,o),o.exports),C=(n,o)=>{for(var i in o)d(n,i,{get:o[i],enumerable:!0})},l=(n,o,i,c)=>{if(o&&typeof o==\"object\"||typeof o==\"function\")for(let t of f(o))!y.call(n,t)&&t!==i&&d(n,t,{get:()=>o[t],enumerable:!(c=x(o,t))||c.enumerable});return n};var v=(n,o,i)=>(i=n!=null?u(g(n)):{},l(o||!n||!n.__esModule?d(i,\"default\",{value:n,enumerable:!0}):i,n)),W=n=>l(d({},\"__esModule\",{value:!0}),n);var m=w((U,h)=>{h.exports=_jsx_runtime});var k={};C(k,{default:()=>b});var e=v(m());function p(n){let o={code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...n.components},{Anatomy:i,Composed:c,How:t,Installation:s,SourceCode:a}=o;return i||r(\"Anatomy\",!0),c||r(\"Composed\",!0),t||r(\"How\",!0),s||r(\"Installation\",!0),a||r(\"SourceCode\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(o.h2,{id:\"basic\",children:\"Basic\"}),`\n`,(0,e.jsx)(o.p,{children:\"A combo box combines a text input with a listbox, allowing users to filter options to match what they're looking for.\"}),`\n`,(0,e.jsx)(t,{minW72:!0,toUse:\"pickers/combo-box/combo-box-demo\"}),`\n`,(0,e.jsx)(o.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(s,{options:{isComponent:!0},items:[\"combo-box\"]}),`\n`,(0,e.jsx)(o.h2,{id:\"composed-components\",children:\"Composed Components\"}),`\n`,(0,e.jsx)(c,{components:[\"field\",\"dropdown\",\"popover\",\"list-box\",\"button\"]}),`\n`,(0,e.jsx)(o.h2,{id:\"manual-installation\",children:\"Manual Installation\"}),`\n`,(0,e.jsx)(s,{options:{isManual:!0},items:[\"react-aria-components\",\"justd-icons\"]}),`\n`,(0,e.jsx)(a,{toShow:[\"combo-box\"]}),`\n`,(0,e.jsx)(o.h2,{id:\"anatomy\",children:\"Anatomy\"}),`\n`,(0,e.jsx)(i,{show:\"combo-box-anatomy\"}),`\n`,(0,e.jsx)(o.h2,{id:\"using-avatars\",children:\"Using Avatars\"}),`\n`,(0,e.jsx)(o.p,{children:\"The combo box can be configured to display avatars instead of just regular text.\"}),`\n`,(0,e.jsx)(t,{minW72:!0,toUse:\"pickers/combo-box/combo-box-avatar-demo\"}),`\n`,(0,e.jsx)(o.h2,{id:\"section\",children:\"Section\"}),`\n`,(0,e.jsx)(o.p,{children:\"A combo box can display items grouped together in sections.\"}),`\n`,(0,e.jsx)(t,{minW72:!0,toUse:\"pickers/combo-box/combo-box-section-demo\"}),`\n`,(0,e.jsx)(o.h2,{id:\"validation\",children:\"Validation\"}),`\n`,(0,e.jsx)(o.p,{children:\"If a user submits the form without selecting an item, an error message will appear.\"}),`\n`,(0,e.jsx)(t,{minW72:!0,toUse:\"pickers/combo-box/combo-box-validation-demo\"}),`\n`,(0,e.jsx)(o.h2,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,e.jsxs)(o.p,{children:[\"There are two ways to control the combo box: using the \",(0,e.jsx)(o.code,{children:\"onInputChange\"}),\" prop or the \",(0,e.jsx)(o.code,{children:\"onSelectionChange\"}),\" prop. These methods serve different purposes, as illustrated in the examples below. Both examples follow the same approach, defining \",(0,e.jsx)(o.code,{children:\"id\"}),\" and \",(0,e.jsx)(o.code,{children:\"textValue\"}),\" for the options.\"]}),`\n`,(0,e.jsxs)(o.p,{children:[\"When you only need the \",(0,e.jsx)(o.code,{children:\"textValue\"}),\" of the selected option, use the \",(0,e.jsx)(o.code,{children:\"onInputChange\"}),\" prop. However, if you need to obtain the actual \",(0,e.jsx)(o.code,{children:\"id\"}),\" of the selected option, the \",(0,e.jsx)(o.code,{children:\"onSelectionChange\"}),\" prop is the appropriate choice.\"]}),`\n`,(0,e.jsx)(o.h3,{id:\"input\",children:\"Input\"}),`\n`,(0,e.jsxs)(o.p,{children:[\"This combo box is controlled by the \",(0,e.jsx)(o.code,{children:\"onInputChange\"}),\" prop.\"]}),`\n`,(0,e.jsx)(t,{minW72:!0,toUse:\"pickers/combo-box/combo-box-controlled-demo\"}),`\n`,(0,e.jsx)(o.h3,{id:\"selection\",children:\"Selection\"}),`\n`,(0,e.jsxs)(o.p,{children:[\"This combo box is controlled by the \",(0,e.jsx)(o.code,{children:\"onSelectionChange\"}),\" prop.\"]}),`\n`,(0,e.jsx)(t,{minW72:!0,toUse:\"pickers/combo-box/combo-box-controlled-selection-demo\"}),`\n`,(0,e.jsx)(o.h2,{id:\"readonly\",children:\"Readonly\"}),`\n`,(0,e.jsx)(o.p,{children:\"When the combo box is in a readonly state, it cannot be edited.\"}),`\n`,(0,e.jsx)(t,{minW72:!0,toUse:\"pickers/combo-box/combo-box-readonly-demo\"}),`\n`,(0,e.jsx)(o.h2,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,e.jsx)(o.p,{children:\"When the combo box is disabled, it becomes non-interactive and cannot be edited.\"}),`\n`,(0,e.jsx)(t,{minW72:!0,toUse:\"pickers/combo-box/combo-box-disabled-demo\"})]})}function b(n={}){let{wrapper:o}=n.components||{};return o?(0,e.jsx)(o,{...n,children:(0,e.jsx)(p,{...n})}):p(n)}function r(n,o){throw new Error(\"Expected \"+(o?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return W(k);})();\n;return Component;"}