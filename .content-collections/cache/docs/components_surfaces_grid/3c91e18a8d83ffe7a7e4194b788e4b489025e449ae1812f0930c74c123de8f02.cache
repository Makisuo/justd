{"content":"## Basic\nGrid's your go-to layout wizard, making it a breeze to whip up responsive and slick layouts. Whether it's jazzing up your blog, showcasing your portfolio, or rocking a landing page, this component keeps everything neat and stylish on any device.\n\n<How withNoPadding isCenter={false} toUse=\"surfaces/grid/grid-basic-demo\" />\n\n## Installation\n<Installation options={{ isComponent: true }} items={['grid']} />\n\n## Manual Installation\n<Installation options={{ isManual: true }} items={['react-aria-components']} />\n<SourceCode toShow={['grid']} />\n\n## Anatomy\n<Anatomy show='grid-anatomy'/>\n\n## Responsive\nGrid's responsiveness is a breeze, with the ability to define your columns and gaps for any screen size. Whether you're designing for mobile, tablet, or desktop, Grid ensures that your content looks great on all devices.\n\n<Note intent=\"primary\">\n  This grid ain't got no default variants, so if you don't set an initial value, it's a big fat nothing. When you're\n  setting up a responsive prop like `sm` or `md`, make sure to slap an initial value for the breakpoint.\n</Note>\n\n<How withNoPadding isCenter={false} toUse=\"surfaces/grid/grid-responsive-demo\" />\n\n## Gaps\nGrid's gaps are configurable, allowing you to define the space between each item. Whether you're designing for mobile, tablet, or desktop, Grid ensures that your content looks great on all devices.\n<How withNoPadding isCenter={false} toUse=\"surfaces/grid/grid-gap-demo\" />\n\n## Gaps X and Y\nSometimes you need make diffrent gaps for the x and y axis. Grid's `gapX` and `gapY` props allow you to do just that.\n<How withNoPadding isCenter={false} toUse=\"surfaces/grid/grid-gap-x-y-demo\" />\n\n## Collections\nYou might wanna render this grid on the fly for stuff like articles, podcasts, or whatever. It's a breeze to just toss in items as props like this. Not sure why we roll with collections? Check it out [here](https://react-spectrum.adobe.com/react-aria/collections.html#why-not-array-map).\n\n<How withNoPadding isCenter={false} toUse=\"surfaces/grid/grid-collections-demo\" />\n\n## Debugging\nSometimes you need to know what's going on in your grid. Grid has a `debug` prop that will add a border around each item.\n<How withNoPadding isCenter={false} toUse=\"surfaces/grid/grid-debug-demo\" />\n\n## Grid Item\nGrid Item is the component that makes up the grid. It's a wrapper around the `ListBoxItem` component from `react-aria-components`. Grid Item has all the same props as `ListBoxItem`, but with a few extra props to help you define column and row spans.\n\n<How withNoPadding isCenter={false} toUse=\"surfaces/grid/grid-item-demo\" />\n\nI use that vibe on the [Components](/components) page, where you can catch the link to the component's docs. What's the next step?\n\n## Props\nAight, just a heads up, all them props got that responsive mojo. You can tweak the prop for each breakpoint like a boss.\n\n### Grid\nThese props let you tweak the grid to your vibe.\n\n| Property | Type                                                  | Description                                                                               |\n|----------|-------------------------------------------------------|-------------------------------------------------------------------------------------------|\n| columns  | number \\| object                                      | Defines the number of columns in the grid. Can be a number or an object with breakpoints. |\n| gap      | number \\| object                                      | Defines the gap between each item in the grid.                                            |\n| gapX     | number \\| object                                      | Defines the gap between each item in the grid on the x-axis.                              |\n| gapY     | number \\| object                                      | Defines the gap between each item in the grid on the y-axis.                              |\n| flow     | 'row' \\| 'col' \\| 'rowDense' \\| 'colDense' \\| 'dense' | Defines the flow direction of the grid.                                                   |\n| rows     | number \\| object                                      | Defines the number of rows in the grid.                                                   |\n| debug    | boolean                                               | Adds a border around each item in the grid.                                               |\n\n### GridItem\nProps like `colSpan`, `rowSpan`, `colStart`, `colEnd`, `rowStart`, and `rowEnd` let you position grid items exactly where you want 'em in the grid layout.\n\n| Property | Type             | Description                                                                                  |\n|----------|------------------|----------------------------------------------------------------------------------------------|\n| colSpan  | number \\| object | Defines the number of columns the item spans. Can be a number or an object with breakpoints. |\n| rowSpan  | number \\| object | Defines the number of rows the item spans. Can be a number or an object with breakpoints.    |\n| colStart | number \\| object | Defines the column the item starts at. Can be a number or an object with breakpoints.        |\n| colEnd   | number \\| object | Defines the column the item ends at. Can be a number or an object with breakpoints.          |\n| rowStart | number \\| object | Defines the row the item starts at. Can be a number or an object with breakpoints.           |\n| rowEnd   | number \\| object | Defines the row the item ends at. Can be a number or an object with breakpoints.             |","title":"Grid","description":"Check out this Responsive Grid component! It adjusts columns and gaps for any device, enhancing your UIâ€™s vibe and usability across all screen sizes.","_meta":{"filePath":"components/surfaces/grid.mdx","fileName":"grid.mdx","directory":"components/surfaces","extension":"mdx","path":"components/surfaces/grid"},"toc":[{"title":"Basic","url":"#basic","depth":2},{"title":"Installation","url":"#installation","depth":2},{"title":"Manual Installation","url":"#manual-installation","depth":2},{"title":"Anatomy","url":"#anatomy","depth":2},{"title":"Responsive","url":"#responsive","depth":2},{"title":"Gaps","url":"#gaps","depth":2},{"title":"Gaps X and Y","url":"#gaps-x-and-y","depth":2},{"title":"Collections","url":"#collections","depth":2},{"title":"Debugging","url":"#debugging","depth":2},{"title":"Grid Item","url":"#grid-item","depth":2},{"title":"Props","url":"#props","depth":2},{"title":"Grid","url":"#grid","depth":3},{"title":"GridItem","url":"#griditem","depth":3}],"structuredData":{"contents":[{"heading":"basic","content":"Grid's your go-to layout wizard, making it a breeze to whip up responsive and slick layouts. Whether it's jazzing up your blog, showcasing your portfolio, or rocking a landing page, this component keeps everything neat and stylish on any device."},{"heading":"responsive","content":"Grid's responsiveness is a breeze, with the ability to define your columns and gaps for any screen size. Whether you're designing for mobile, tablet, or desktop, Grid ensures that your content looks great on all devices."},{"heading":"responsive","content":"This grid ain't got no default variants, so if you don't set an initial value, it's a big fat nothing. When you're\nsetting up a responsive prop like sm or md, make sure to slap an initial value for the breakpoint."},{"heading":"gaps","content":"Grid's gaps are configurable, allowing you to define the space between each item. Whether you're designing for mobile, tablet, or desktop, Grid ensures that your content looks great on all devices."},{"heading":"gaps-x-and-y","content":"Sometimes you need make diffrent gaps for the x and y axis. Grid's gapX and gapY props allow you to do just that."},{"heading":"collections","content":"You might wanna render this grid on the fly for stuff like articles, podcasts, or whatever. It's a breeze to just toss in items as props like this. Not sure why we roll with collections? Check it out here."},{"heading":"debugging","content":"Sometimes you need to know what's going on in your grid. Grid has a debug prop that will add a border around each item."},{"heading":"grid-item","content":"Grid Item is the component that makes up the grid. It's a wrapper around the ListBoxItem component from react-aria-components. Grid Item has all the same props as ListBoxItem, but with a few extra props to help you define column and row spans."},{"heading":"grid-item","content":"I use that vibe on the Components page, where you can catch the link to the component's docs. What's the next step?"},{"heading":"props","content":"Aight, just a heads up, all them props got that responsive mojo. You can tweak the prop for each breakpoint like a boss."},{"heading":"grid","content":"These props let you tweak the grid to your vibe."},{"heading":"grid","content":"Property"},{"heading":"grid","content":"Type"},{"heading":"grid","content":"Description"},{"heading":"grid","content":"columns"},{"heading":"grid","content":"number | object"},{"heading":"grid","content":"Defines the number of columns in the grid. Can be a number or an object with breakpoints."},{"heading":"grid","content":"gap"},{"heading":"grid","content":"number | object"},{"heading":"grid","content":"Defines the gap between each item in the grid."},{"heading":"grid","content":"gapX"},{"heading":"grid","content":"number | object"},{"heading":"grid","content":"Defines the gap between each item in the grid on the x-axis."},{"heading":"grid","content":"gapY"},{"heading":"grid","content":"number | object"},{"heading":"grid","content":"Defines the gap between each item in the grid on the y-axis."},{"heading":"grid","content":"flow"},{"heading":"grid","content":"'row' | 'col' | 'rowDense' | 'colDense' | 'dense'"},{"heading":"grid","content":"Defines the flow direction of the grid."},{"heading":"grid","content":"rows"},{"heading":"grid","content":"number | object"},{"heading":"grid","content":"Defines the number of rows in the grid."},{"heading":"grid","content":"debug"},{"heading":"grid","content":"boolean"},{"heading":"grid","content":"Adds a border around each item in the grid."},{"heading":"griditem","content":"Props like colSpan, rowSpan, colStart, colEnd, rowStart, and rowEnd let you position grid items exactly where you want 'em in the grid layout."},{"heading":"griditem","content":"Property"},{"heading":"griditem","content":"Type"},{"heading":"griditem","content":"Description"},{"heading":"griditem","content":"colSpan"},{"heading":"griditem","content":"number | object"},{"heading":"griditem","content":"Defines the number of columns the item spans. Can be a number or an object with breakpoints."},{"heading":"griditem","content":"rowSpan"},{"heading":"griditem","content":"number | object"},{"heading":"griditem","content":"Defines the number of rows the item spans. Can be a number or an object with breakpoints."},{"heading":"griditem","content":"colStart"},{"heading":"griditem","content":"number | object"},{"heading":"griditem","content":"Defines the column the item starts at. Can be a number or an object with breakpoints."},{"heading":"griditem","content":"colEnd"},{"heading":"griditem","content":"number | object"},{"heading":"griditem","content":"Defines the column the item ends at. Can be a number or an object with breakpoints."},{"heading":"griditem","content":"rowStart"},{"heading":"griditem","content":"number | object"},{"heading":"griditem","content":"Defines the row the item starts at. Can be a number or an object with breakpoints."},{"heading":"griditem","content":"rowEnd"},{"heading":"griditem","content":"number | object"},{"heading":"griditem","content":"Defines the row the item ends at. Can be a number or an object with breakpoints."}],"headings":[{"id":"basic","content":"Basic"},{"id":"installation","content":"Installation"},{"id":"manual-installation","content":"Manual Installation"},{"id":"anatomy","content":"Anatomy"},{"id":"responsive","content":"Responsive"},{"id":"gaps","content":"Gaps"},{"id":"gaps-x-and-y","content":"Gaps X and Y"},{"id":"collections","content":"Collections"},{"id":"debugging","content":"Debugging"},{"id":"grid-item","content":"Grid Item"},{"id":"props","content":"Props"},{"id":"grid","content":"Grid"},{"id":"griditem","content":"GridItem"}]},"body":"var Component=(()=>{var b=Object.create;var a=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var k=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),j=(n,e)=>{for(var r in e)a(n,r,{get:e[r],enumerable:!0})},s=(n,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of f(e))!y.call(n,o)&&o!==r&&a(n,o,{get:()=>e[o],enumerable:!(i=g(e,o))||i.enumerable});return n};var x=(n,e,r)=>(r=n!=null?b(w(n)):{},s(e||!n||!n.__esModule?a(r,\"default\",{value:n,enumerable:!0}):r,n)),C=n=>s(a({},\"__esModule\",{value:!0}),n);var p=k((G,l)=>{l.exports=_jsx_runtime});var D={};j(D,{default:()=>m});var t=x(p());function u(n){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",...n.components},{Anatomy:r,How:i,Installation:o,Note:h,SourceCode:c}=e;return r||d(\"Anatomy\",!0),i||d(\"How\",!0),o||d(\"Installation\",!0),h||d(\"Note\",!0),c||d(\"SourceCode\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:\"basic\",children:\"Basic\"}),`\n`,(0,t.jsx)(e.p,{children:\"Grid's your go-to layout wizard, making it a breeze to whip up responsive and slick layouts. Whether it's jazzing up your blog, showcasing your portfolio, or rocking a landing page, this component keeps everything neat and stylish on any device.\"}),`\n`,(0,t.jsx)(i,{withNoPadding:!0,isCenter:!1,toUse:\"surfaces/grid/grid-basic-demo\"}),`\n`,(0,t.jsx)(e.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,t.jsx)(o,{options:{isComponent:!0},items:[\"grid\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"manual-installation\",children:\"Manual Installation\"}),`\n`,(0,t.jsx)(o,{options:{isManual:!0},items:[\"react-aria-components\"]}),`\n`,(0,t.jsx)(c,{toShow:[\"grid\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"anatomy\",children:\"Anatomy\"}),`\n`,(0,t.jsx)(r,{show:\"grid-anatomy\"}),`\n`,(0,t.jsx)(e.h2,{id:\"responsive\",children:\"Responsive\"}),`\n`,(0,t.jsx)(e.p,{children:\"Grid's responsiveness is a breeze, with the ability to define your columns and gaps for any screen size. Whether you're designing for mobile, tablet, or desktop, Grid ensures that your content looks great on all devices.\"}),`\n`,(0,t.jsx)(h,{intent:\"primary\",children:(0,t.jsxs)(e.p,{children:[`This grid ain't got no default variants, so if you don't set an initial value, it's a big fat nothing. When you're\nsetting up a responsive prop like `,(0,t.jsx)(e.code,{children:\"sm\"}),\" or \",(0,t.jsx)(e.code,{children:\"md\"}),\", make sure to slap an initial value for the breakpoint.\"]})}),`\n`,(0,t.jsx)(i,{withNoPadding:!0,isCenter:!1,toUse:\"surfaces/grid/grid-responsive-demo\"}),`\n`,(0,t.jsx)(e.h2,{id:\"gaps\",children:\"Gaps\"}),`\n`,(0,t.jsx)(e.p,{children:\"Grid's gaps are configurable, allowing you to define the space between each item. Whether you're designing for mobile, tablet, or desktop, Grid ensures that your content looks great on all devices.\"}),`\n`,(0,t.jsx)(i,{withNoPadding:!0,isCenter:!1,toUse:\"surfaces/grid/grid-gap-demo\"}),`\n`,(0,t.jsx)(e.h2,{id:\"gaps-x-and-y\",children:\"Gaps X and Y\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Sometimes you need make diffrent gaps for the x and y axis. Grid's \",(0,t.jsx)(e.code,{children:\"gapX\"}),\" and \",(0,t.jsx)(e.code,{children:\"gapY\"}),\" props allow you to do just that.\"]}),`\n`,(0,t.jsx)(i,{withNoPadding:!0,isCenter:!1,toUse:\"surfaces/grid/grid-gap-x-y-demo\"}),`\n`,(0,t.jsx)(e.h2,{id:\"collections\",children:\"Collections\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"You might wanna render this grid on the fly for stuff like articles, podcasts, or whatever. It's a breeze to just toss in items as props like this. Not sure why we roll with collections? Check it out \",(0,t.jsx)(e.a,{href:\"https://react-spectrum.adobe.com/react-aria/collections.html#why-not-array-map\",children:\"here\"}),\".\"]}),`\n`,(0,t.jsx)(i,{withNoPadding:!0,isCenter:!1,toUse:\"surfaces/grid/grid-collections-demo\"}),`\n`,(0,t.jsx)(e.h2,{id:\"debugging\",children:\"Debugging\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Sometimes you need to know what's going on in your grid. Grid has a \",(0,t.jsx)(e.code,{children:\"debug\"}),\" prop that will add a border around each item.\"]}),`\n`,(0,t.jsx)(i,{withNoPadding:!0,isCenter:!1,toUse:\"surfaces/grid/grid-debug-demo\"}),`\n`,(0,t.jsx)(e.h2,{id:\"grid-item\",children:\"Grid Item\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Grid Item is the component that makes up the grid. It's a wrapper around the \",(0,t.jsx)(e.code,{children:\"ListBoxItem\"}),\" component from \",(0,t.jsx)(e.code,{children:\"react-aria-components\"}),\". Grid Item has all the same props as \",(0,t.jsx)(e.code,{children:\"ListBoxItem\"}),\", but with a few extra props to help you define column and row spans.\"]}),`\n`,(0,t.jsx)(i,{withNoPadding:!0,isCenter:!1,toUse:\"surfaces/grid/grid-item-demo\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"I use that vibe on the \",(0,t.jsx)(e.a,{href:\"/components\",children:\"Components\"}),\" page, where you can catch the link to the component's docs. What's the next step?\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"props\",children:\"Props\"}),`\n`,(0,t.jsx)(e.p,{children:\"Aight, just a heads up, all them props got that responsive mojo. You can tweak the prop for each breakpoint like a boss.\"}),`\n`,(0,t.jsx)(e.h3,{id:\"grid\",children:\"Grid\"}),`\n`,(0,t.jsx)(e.p,{children:\"These props let you tweak the grid to your vibe.\"}),`\n`,(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Property\"}),(0,t.jsx)(e.th,{children:\"Type\"}),(0,t.jsx)(e.th,{children:\"Description\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"columns\"}),(0,t.jsx)(e.td,{children:\"number | object\"}),(0,t.jsx)(e.td,{children:\"Defines the number of columns in the grid. Can be a number or an object with breakpoints.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"gap\"}),(0,t.jsx)(e.td,{children:\"number | object\"}),(0,t.jsx)(e.td,{children:\"Defines the gap between each item in the grid.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"gapX\"}),(0,t.jsx)(e.td,{children:\"number | object\"}),(0,t.jsx)(e.td,{children:\"Defines the gap between each item in the grid on the x-axis.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"gapY\"}),(0,t.jsx)(e.td,{children:\"number | object\"}),(0,t.jsx)(e.td,{children:\"Defines the gap between each item in the grid on the y-axis.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"flow\"}),(0,t.jsx)(e.td,{children:\"'row' | 'col' | 'rowDense' | 'colDense' | 'dense'\"}),(0,t.jsx)(e.td,{children:\"Defines the flow direction of the grid.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"rows\"}),(0,t.jsx)(e.td,{children:\"number | object\"}),(0,t.jsx)(e.td,{children:\"Defines the number of rows in the grid.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"debug\"}),(0,t.jsx)(e.td,{children:\"boolean\"}),(0,t.jsx)(e.td,{children:\"Adds a border around each item in the grid.\"})]})]})]}),`\n`,(0,t.jsx)(e.h3,{id:\"griditem\",children:\"GridItem\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Props like \",(0,t.jsx)(e.code,{children:\"colSpan\"}),\", \",(0,t.jsx)(e.code,{children:\"rowSpan\"}),\", \",(0,t.jsx)(e.code,{children:\"colStart\"}),\", \",(0,t.jsx)(e.code,{children:\"colEnd\"}),\", \",(0,t.jsx)(e.code,{children:\"rowStart\"}),\", and \",(0,t.jsx)(e.code,{children:\"rowEnd\"}),\" let you position grid items exactly where you want 'em in the grid layout.\"]}),`\n`,(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Property\"}),(0,t.jsx)(e.th,{children:\"Type\"}),(0,t.jsx)(e.th,{children:\"Description\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"colSpan\"}),(0,t.jsx)(e.td,{children:\"number | object\"}),(0,t.jsx)(e.td,{children:\"Defines the number of columns the item spans. Can be a number or an object with breakpoints.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"rowSpan\"}),(0,t.jsx)(e.td,{children:\"number | object\"}),(0,t.jsx)(e.td,{children:\"Defines the number of rows the item spans. Can be a number or an object with breakpoints.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"colStart\"}),(0,t.jsx)(e.td,{children:\"number | object\"}),(0,t.jsx)(e.td,{children:\"Defines the column the item starts at. Can be a number or an object with breakpoints.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"colEnd\"}),(0,t.jsx)(e.td,{children:\"number | object\"}),(0,t.jsx)(e.td,{children:\"Defines the column the item ends at. Can be a number or an object with breakpoints.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"rowStart\"}),(0,t.jsx)(e.td,{children:\"number | object\"}),(0,t.jsx)(e.td,{children:\"Defines the row the item starts at. Can be a number or an object with breakpoints.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"rowEnd\"}),(0,t.jsx)(e.td,{children:\"number | object\"}),(0,t.jsx)(e.td,{children:\"Defines the row the item ends at. Can be a number or an object with breakpoints.\"})]})]})]})]})}function m(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(u,{...n})}):u(n)}function d(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return C(D);})();\n;return Component;"}