{"content":"## Text Field\n\nA text field is a box where you can type in text, like your name or email.\n<How minW72 toUse=\"forms/text-field/text-field-demo\" />\n\n## Installation\n<Installation options={{ isComponent: true }} items={['text-field']}/>\n\n## Composed Components\n<Composed components={['field']}/>\n\n## Manual Installation\n<Installation options={{ isManual: true }} items={['react-aria-components' ,'justd-icons']}/>\n\n<SourceCode toShow={['text-field']}/>\n\n## Anatomy\n<Anatomy show='text-field-anatomy'/>\n\n## Suffix and Prefix\nEnhance your TextField by adding a prefix or suffix. Whether it’s text or icons, it’s flexible to fit your design.\n<How minW72 toUse=\"forms/text-field/text-field-prefix-suffix-demo\" />\n\n## Suffix with Button\nAdd a button to the suffix by simply including it in the suffix prop. While you can do the same with a prefix, it’s more common to see it as a suffix.\n<How minW72 toUse=\"forms/text-field/text-field-suffix-button-demo\" />\n\n## Pending\nActivate the loading state on your TextField with the `isPending` prop.\n<How minW72 toUse=\"forms/text-field/text-field-pending-demo\" />\n\n## Revealable\nWhen using a text field as a password input, you may want the option to reveal the password. To enable this feature, simply add the `isRevealable` prop. However, ensure that the input type is explicitly set to 'password', as this is a required condition.\n<How minW72 toUse=\"forms/text-field/text-field-revealable-demo\" />\n\n## Validation\nIn this example, we’ll ensure it’s treated as a strict requirement.\n<How minW72 toUse=\"forms/text-field/text-field-validation-demo\" />\n\n## Controlled\nManage the TextField value through the `value` prop for controlled usage.\n<How minW72 toUse=\"forms/text-field/text-field-controlled-demo\" />\n\n## Uncontrolled\nManage the TextField value through the `defaultValue` prop for uncontrolled usage.\n<How minW72 toUse=\"forms/text-field/text-field-uncontrolled-demo\" />\n\n## Description\nYou can add a description to the text field by using the `description` prop.\n<How minW72 toUse=\"forms/text-field/text-field-description-demo\" />\n\n## Readonly\nSet the TextField to readonly, preventing any edits.\n<How minW72 toUse=\"forms/text-field/text-field-readonly-demo\" />\n\n## Disabled\nWhen the TextField is disabled, it becomes non-editable and appears inactive.\n<How minW72 toUse=\"forms/text-field/text-field-disabled-demo\" />","title":"Text Field","description":"Enter text like jotting notes on your phone, offering versatility for typing and accommodating various types of information.","_meta":{"filePath":"components/forms/text-field.mdx","fileName":"text-field.mdx","directory":"components/forms","extension":"mdx","path":"components/forms/text-field"},"toc":[{"title":"Text Field","url":"#text-field","depth":2},{"title":"Installation","url":"#installation","depth":2},{"title":"Composed Components","url":"#composed-components","depth":2},{"title":"Manual Installation","url":"#manual-installation","depth":2},{"title":"Anatomy","url":"#anatomy","depth":2},{"title":"Suffix and Prefix","url":"#suffix-and-prefix","depth":2},{"title":"Suffix with Button","url":"#suffix-with-button","depth":2},{"title":"Pending","url":"#pending","depth":2},{"title":"Revealable","url":"#revealable","depth":2},{"title":"Validation","url":"#validation","depth":2},{"title":"Controlled","url":"#controlled","depth":2},{"title":"Uncontrolled","url":"#uncontrolled","depth":2},{"title":"Description","url":"#description","depth":2},{"title":"Readonly","url":"#readonly","depth":2},{"title":"Disabled","url":"#disabled","depth":2}],"structuredData":{"contents":[{"heading":"text-field","content":"A text field is a box where you can type in text, like your name or email."},{"heading":"suffix-and-prefix","content":"Enhance your TextField by adding a prefix or suffix. Whether it’s text or icons, it’s flexible to fit your design."},{"heading":"suffix-with-button","content":"Add a button to the suffix by simply including it in the suffix prop. While you can do the same with a prefix, it’s more common to see it as a suffix."},{"heading":"pending","content":"Activate the loading state on your TextField with the isPending prop."},{"heading":"revealable","content":"When using a text field as a password input, you may want the option to reveal the password. To enable this feature, simply add the isRevealable prop. However, ensure that the input type is explicitly set to 'password', as this is a required condition."},{"heading":"validation","content":"In this example, we’ll ensure it’s treated as a strict requirement."},{"heading":"controlled","content":"Manage the TextField value through the value prop for controlled usage."},{"heading":"uncontrolled","content":"Manage the TextField value through the defaultValue prop for uncontrolled usage."},{"heading":"description","content":"You can add a description to the text field by using the description prop."},{"heading":"readonly","content":"Set the TextField to readonly, preventing any edits."},{"heading":"disabled","content":"When the TextField is disabled, it becomes non-editable and appears inactive."}],"headings":[{"id":"text-field","content":"Text Field"},{"id":"installation","content":"Installation"},{"id":"composed-components","content":"Composed Components"},{"id":"manual-installation","content":"Manual Installation"},{"id":"anatomy","content":"Anatomy"},{"id":"suffix-and-prefix","content":"Suffix and Prefix"},{"id":"suffix-with-button","content":"Suffix with Button"},{"id":"pending","content":"Pending"},{"id":"revealable","content":"Revealable"},{"id":"validation","content":"Validation"},{"id":"controlled","content":"Controlled"},{"id":"uncontrolled","content":"Uncontrolled"},{"id":"description","content":"Description"},{"id":"readonly","content":"Readonly"},{"id":"disabled","content":"Disabled"}]},"body":"var Component=(()=>{var p=Object.create;var r=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var w=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),v=(n,e)=>{for(var o in e)r(n,o,{get:e[o],enumerable:!0})},h=(n,e,o,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of y(e))!g.call(n,i)&&i!==o&&r(n,i,{get:()=>e[i],enumerable:!(d=x(e,i))||d.enumerable});return n};var W=(n,e,o)=>(o=n!=null?p(b(n)):{},h(e||!n||!n.__esModule?r(o,\"default\",{value:n,enumerable:!0}):o,n)),U=n=>h(r({},\"__esModule\",{value:!0}),n);var f=w((M,c)=>{c.exports=_jsx_runtime});var C={};v(C,{default:()=>m});var t=W(f());function u(n){let e={code:\"code\",h2:\"h2\",p:\"p\",...n.components},{Anatomy:o,Composed:d,How:i,Installation:s,SourceCode:a}=e;return o||l(\"Anatomy\",!0),d||l(\"Composed\",!0),i||l(\"How\",!0),s||l(\"Installation\",!0),a||l(\"SourceCode\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:\"text-field\",children:\"Text Field\"}),`\n`,(0,t.jsx)(e.p,{children:\"A text field is a box where you can type in text, like your name or email.\"}),`\n`,(0,t.jsx)(i,{minW72:!0,toUse:\"forms/text-field/text-field-demo\"}),`\n`,(0,t.jsx)(e.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,t.jsx)(s,{options:{isComponent:!0},items:[\"text-field\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"composed-components\",children:\"Composed Components\"}),`\n`,(0,t.jsx)(d,{components:[\"field\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"manual-installation\",children:\"Manual Installation\"}),`\n`,(0,t.jsx)(s,{options:{isManual:!0},items:[\"react-aria-components\",\"justd-icons\"]}),`\n`,(0,t.jsx)(a,{toShow:[\"text-field\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"anatomy\",children:\"Anatomy\"}),`\n`,(0,t.jsx)(o,{show:\"text-field-anatomy\"}),`\n`,(0,t.jsx)(e.h2,{id:\"suffix-and-prefix\",children:\"Suffix and Prefix\"}),`\n`,(0,t.jsx)(e.p,{children:\"Enhance your TextField by adding a prefix or suffix. Whether it\\u2019s text or icons, it\\u2019s flexible to fit your design.\"}),`\n`,(0,t.jsx)(i,{minW72:!0,toUse:\"forms/text-field/text-field-prefix-suffix-demo\"}),`\n`,(0,t.jsx)(e.h2,{id:\"suffix-with-button\",children:\"Suffix with Button\"}),`\n`,(0,t.jsx)(e.p,{children:\"Add a button to the suffix by simply including it in the suffix prop. While you can do the same with a prefix, it\\u2019s more common to see it as a suffix.\"}),`\n`,(0,t.jsx)(i,{minW72:!0,toUse:\"forms/text-field/text-field-suffix-button-demo\"}),`\n`,(0,t.jsx)(e.h2,{id:\"pending\",children:\"Pending\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Activate the loading state on your TextField with the \",(0,t.jsx)(e.code,{children:\"isPending\"}),\" prop.\"]}),`\n`,(0,t.jsx)(i,{minW72:!0,toUse:\"forms/text-field/text-field-pending-demo\"}),`\n`,(0,t.jsx)(e.h2,{id:\"revealable\",children:\"Revealable\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"When using a text field as a password input, you may want the option to reveal the password. To enable this feature, simply add the \",(0,t.jsx)(e.code,{children:\"isRevealable\"}),\" prop. However, ensure that the input type is explicitly set to 'password', as this is a required condition.\"]}),`\n`,(0,t.jsx)(i,{minW72:!0,toUse:\"forms/text-field/text-field-revealable-demo\"}),`\n`,(0,t.jsx)(e.h2,{id:\"validation\",children:\"Validation\"}),`\n`,(0,t.jsx)(e.p,{children:\"In this example, we\\u2019ll ensure it\\u2019s treated as a strict requirement.\"}),`\n`,(0,t.jsx)(i,{minW72:!0,toUse:\"forms/text-field/text-field-validation-demo\"}),`\n`,(0,t.jsx)(e.h2,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Manage the TextField value through the \",(0,t.jsx)(e.code,{children:\"value\"}),\" prop for controlled usage.\"]}),`\n`,(0,t.jsx)(i,{minW72:!0,toUse:\"forms/text-field/text-field-controlled-demo\"}),`\n`,(0,t.jsx)(e.h2,{id:\"uncontrolled\",children:\"Uncontrolled\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Manage the TextField value through the \",(0,t.jsx)(e.code,{children:\"defaultValue\"}),\" prop for uncontrolled usage.\"]}),`\n`,(0,t.jsx)(i,{minW72:!0,toUse:\"forms/text-field/text-field-uncontrolled-demo\"}),`\n`,(0,t.jsx)(e.h2,{id:\"description\",children:\"Description\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"You can add a description to the text field by using the \",(0,t.jsx)(e.code,{children:\"description\"}),\" prop.\"]}),`\n`,(0,t.jsx)(i,{minW72:!0,toUse:\"forms/text-field/text-field-description-demo\"}),`\n`,(0,t.jsx)(e.h2,{id:\"readonly\",children:\"Readonly\"}),`\n`,(0,t.jsx)(e.p,{children:\"Set the TextField to readonly, preventing any edits.\"}),`\n`,(0,t.jsx)(i,{minW72:!0,toUse:\"forms/text-field/text-field-readonly-demo\"}),`\n`,(0,t.jsx)(e.h2,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,t.jsx)(e.p,{children:\"When the TextField is disabled, it becomes non-editable and appears inactive.\"}),`\n`,(0,t.jsx)(i,{minW72:!0,toUse:\"forms/text-field/text-field-disabled-demo\"})]})}function m(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(u,{...n})}):u(n)}function l(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return U(C);})();\n;return Component;"}