{
  "date-and-time/date-field/date-field-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-demo",
    "raw": "\"use client\"\n\nimport { DateField } from \"ui\"\n\nexport default function DateFieldDemo() {\n  return <DateField label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field/date-field-prefix-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-prefix-demo",
    "raw": "\"use client\"\n\nimport { IconCalendar2 } from \"justd-icons\"\nimport { Button, DateField, Form } from \"ui\"\n\nexport default function DateFieldPrefixDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <DateField prefix={<IconCalendar2 />} isRequired label=\"Event date\" className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field/date-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { CalendarDate } from \"@internationalized/date\"\nimport { getLocalTimeZone, parseDate, today } from \"@internationalized/date\"\nimport { useDateFormatter } from \"@react-aria/i18n\"\nimport { DateField } from \"ui\"\n\nexport default function DateFieldControlledDemo() {\n  const now = today(getLocalTimeZone())\n  const [value, setValue] = React.useState<CalendarDate>(parseDate(now.toString()))\n\n  const formatter = useDateFormatter({ dateStyle: \"full\" })\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"divide-y [&_p]:py-2\">\n        <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : \"--\"}</p>\n        <p>{value ? value.toString() : \"--\"}</p>\n      </div>\n      <DateField value={value} onChange={(newValue) => setValue(newValue!)} label=\"Event date\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field/date-field-suffix-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-suffix-demo",
    "raw": "\"use client\"\n\nimport { IconCalendar2 } from \"justd-icons\"\nimport { Button, DateField, Form } from \"ui\"\n\nexport default function DateFieldSuffixDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <DateField suffix={<IconCalendar2 />} isRequired label=\"Event date\" className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field/date-field-uncontrolled-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-uncontrolled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { getLocalTimeZone, parseDate, today } from \"@internationalized/date\"\nimport { DateField } from \"ui\"\n\nexport default function DateFieldUncontrolledDemo() {\n  const now = today(getLocalTimeZone())\n  return <DateField defaultValue={parseDate(now.toString())} label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field/date-field-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-disabled-demo",
    "raw": "\"use client\"\n\nimport { DateField } from \"ui\"\n\nexport default function DateFieldDisabledDemo() {\n  return <DateField isDisabled label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field/date-field-readonly-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-readonly-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { getLocalTimeZone, parseDate, today } from \"@internationalized/date\"\nimport { DateField } from \"ui\"\n\nexport default function DateFieldReadonlyDemo() {\n  const now = today(getLocalTimeZone())\n  return <DateField isReadOnly defaultValue={parseDate(now.toString())} label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field/date-time-field-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-time-field-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { getLocalTimeZone, now, parseZonedDateTime } from \"@internationalized/date\"\nimport { DateField } from \"ui\"\n\nexport default function DateTimeFieldDemo() {\n  const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n  const [value, setValue] = React.useState(today)\n  return (\n    <DateField\n      hideTimeZone\n      hourCycle={24}\n      value={value}\n      onChange={(newValue) => setValue(newValue!)}\n      label=\"Event date\"\n    />\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field/date-field-validation-demo": {
    "component": "@/components/docs/date-and-time/date-field/date-field-validation-demo",
    "raw": "\"use client\"\n\nimport { Button, DateField, Form } from \"ui\"\n\nexport default function DateFieldValidationDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <DateField isRequired label=\"Event date\" className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/calendar/range-calendar-demo": {
    "component": "@/components/docs/date-and-time/calendar/range-calendar-demo",
    "raw": "\"use client\"\n\nimport { RangeCalendar } from \"ui\"\n\nexport default function RangeCalendarDemo() {\n  return <RangeCalendar aria-label=\"Range Calendar\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/calendar/calendar-demo": {
    "component": "@/components/docs/date-and-time/calendar/calendar-demo",
    "raw": "\"use client\"\n\nimport { Calendar } from \"ui\"\n\nexport default function CalendarDemo() {\n  return <Calendar aria-label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker/date-range-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-disabled-demo",
    "raw": "\"use client\"\n\nimport { DateRangePicker } from \"ui\"\n\nexport default function DateRangePickerDisabledDemo() {\n  return <DateRangePicker isDisabled label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker/date-range-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { getLocalTimeZone, today } from \"@internationalized/date\"\nimport { useDateFormatter } from \"@react-aria/i18n\"\nimport { DateRangePicker } from \"ui\"\n\nexport default function DateRangePickerControlledDemo() {\n  const now = today(getLocalTimeZone())\n  const tomorrowWeek = today(getLocalTimeZone()).add({ days: 12 })\n  const formatter = useDateFormatter({ dateStyle: \"full\" })\n\n  const [value, setValue] = React.useState({\n    start: now,\n    end: tomorrowWeek\n  })\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"divide-y [&_p]:py-2\">\n        <p>\n          {value\n            ? `${formatter.format(value.start.toDate(getLocalTimeZone()))} to ${formatter.format(value.end.toDate(getLocalTimeZone()))}`\n            : \"-- to --\"}\n        </p>\n        <p>{value ? `${value.start.toString()} to ${value.end.toString()}` : \"-- to --\"}</p>\n      </div>\n      <DateRangePicker\n        value={value}\n        onChange={(newValue) => setValue(newValue!)}\n        label=\"Event date\"\n      />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker/date-range-picker-time-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-time-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { getLocalTimeZone, now, parseZonedDateTime } from \"@internationalized/date\"\nimport { DateRangePicker } from \"ui\"\n\nexport default function DateRangePickerTimeDemo() {\n  const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n  const tomorrowWeek = today.add({ days: 12 })\n\n  const [value, setValue] = React.useState({\n    start: today,\n    end: tomorrowWeek\n  })\n  return (\n    <DateRangePicker\n      hideTimeZone\n      label=\"Date time range\"\n      value={value}\n      onChange={(newValue) => setValue(newValue!)}\n      hourCycle={24}\n    />\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker/date-range-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-custom-validation-demo",
    "raw": "\"use client\"\n\nimport { getLocalTimeZone, today } from \"@internationalized/date\"\nimport { Button, DateRangePicker, Form } from \"ui\"\n\nexport default function DateRangePickerCustomValidationDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <DateRangePicker\n        label=\"Room Booking Dates\"\n        validate={(range) =>\n          range?.end.compare(range.start) > 7 ? \"Maximum booking duration is 1 week.\" : null\n        }\n        defaultValue={{\n          start: today(getLocalTimeZone()),\n          end: today(getLocalTimeZone()).add({ weeks: 2 })\n        }}\n        className=\"mb-2\"\n      />\n      <Button type=\"submit\">Book Room</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker/date-range-picker-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-demo",
    "raw": "\"use client\"\n\nimport { DateRangePicker } from \"ui\"\n\nexport default function DateRangePickerDemo() {\n  return <DateRangePicker label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker/date-range-picker-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker/date-range-picker-validation-demo",
    "raw": "\"use client\"\n\nimport { Button, DateRangePicker, Form } from \"ui\"\n\nexport default function DateRangePickerValidationDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <DateRangePicker isRequired label=\"Event date\" className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field/date-field-demo": {
    "component": "@/components/docs/date-and-time/time-field/date-field-demo",
    "raw": "\"use client\"\n\nimport { DateField } from \"ui\"\n\nexport default function DateFieldDemo() {\n  return <DateField label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field/time-field-disabled-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-disabled-demo",
    "raw": "\"use client\"\n\nimport { TimeField } from \"ui\"\n\nexport default function TimeFieldDisabledDemo() {\n  return <TimeField isDisabled label=\"Event time\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field/time-field-validation-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-validation-demo",
    "raw": "\"use client\"\n\nimport { Button, Form, TimeField } from \"ui\"\n\nexport default function TimeFieldValidationDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <TimeField label=\"Event time\" isRequired className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field/time-field-suffix-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-suffix-demo",
    "raw": "\"use client\"\n\nimport { Time } from \"@internationalized/date\"\nimport { IconClock } from \"justd-icons\"\nimport { TimeField } from \"ui\"\n\nexport default function TimeFieldSuffixDemo() {\n  return <TimeField suffix={<IconClock />} defaultValue={new Time()} label=\"Event time\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field/time-field-hc-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-hc-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { OptionPreview } from \"@/components/docs/outside/option-preview\"\nimport { Time } from \"@internationalized/date\"\nimport { Switch, TimeField } from \"ui\"\n\nexport default function TimeFieldHcDemo() {\n  const [hc, setHc] = React.useState<12 | 24>(24)\n  const [value, setValue] = React.useState(new Time(13, 45))\n  return (\n    <>\n      <OptionPreview>\n        <Switch\n          isSelected={hc === 24}\n          onChange={() => setHc((prevHc) => (prevHc === 24 ? 12 : 24))}\n        >\n          {hc} hour\n        </Switch>\n      </OptionPreview>\n      <TimeField\n        value={value}\n        onChange={(newValue) => setValue(newValue!)}\n        hourCycle={hc}\n        label=\"Event time\"\n      />\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field/time-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Time } from \"@internationalized/date\"\nimport { TimeField } from \"ui\"\n\nexport default function TimeFieldControlledDemo() {\n  const [value, setValue] = React.useState(new Time(11, 45))\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"[&_p]:py-2\">\n        <p>{value ? value.toString() : \"--\"}</p>\n      </div>\n      <TimeField label=\"Event time\" value={value} onChange={(newValue) => setValue(newValue!)} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field/time-field-prefix-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-prefix-demo",
    "raw": "\"use client\"\n\nimport { Time } from \"@internationalized/date\"\nimport { TimeField } from \"ui\"\n\nexport default function TimeFieldPrefixDemo() {\n  return <TimeField prefix=\"UTC\" defaultValue={new Time()} label=\"Event time\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field/time-field-readonly-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-readonly-demo",
    "raw": "\"use client\"\n\nimport { Time } from \"@internationalized/date\"\nimport { TimeField } from \"ui\"\n\nexport default function TimeFieldReadonlyDemo() {\n  return <TimeField isReadOnly defaultValue={new Time()} label=\"Event time\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field/time-field-demo": {
    "component": "@/components/docs/date-and-time/time-field/time-field-demo",
    "raw": "\"use client\"\n\nimport { Time } from \"@internationalized/date\"\nimport { TimeField } from \"ui\"\n\nexport default function TimeFieldDemo() {\n  return <TimeField defaultValue={new Time()} label=\"Event time\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker/date-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-custom-validation-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { getLocalTimeZone, parseDate, startOfYear, today } from \"@internationalized/date\"\nimport { Button, DatePicker, Form } from \"ui\"\n\nexport default function DatePickerInvalidDemo() {\n  const ly = startOfYear(today(getLocalTimeZone()))\n  const now = today(getLocalTimeZone())\n  const [value, setValue] = React.useState(parseDate(ly.toString()))\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <DatePicker\n        validate={(date) => (date < now ? \"Select a future date, please.\" : null)}\n        value={value}\n        onChange={(newValue) => setValue(newValue!)}\n        label=\"Delivery date\"\n        className=\"mb-2\"\n      />\n\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker/date-picker-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-demo",
    "raw": "\"use client\"\n\nimport { DatePicker } from \"ui\"\n\nexport default function DatePickerDemo() {\n  return <DatePicker label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker/date-time-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-time-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { getLocalTimeZone, now, parseZonedDateTime } from \"@internationalized/date\"\nimport { DatePicker } from \"ui\"\n\nexport default function DateTimeDemo() {\n  const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n  const [value, setValue] = React.useState(today)\n\n  return (\n    <DatePicker\n      hideTimeZone\n      hourCycle={24}\n      className=\"max-w-xs\"\n      value={value}\n      onChange={(newValue) => setValue(newValue!)}\n      label=\"Event date\"\n    />\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker/date-picker-required-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-required-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Button, DatePicker, Form } from \"ui\"\n\nexport default function DatePickerRequiredDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <DatePicker label=\"Delivery date\" name=\"deliveryDate\" isRequired className=\"mb-2\" />\n\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker/date-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-disabled-demo",
    "raw": "\"use client\"\n\nimport { DatePicker } from \"ui\"\n\nexport default function DatePickerDisabledDemo() {\n  return <DatePicker isDisabled label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker/date-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-picker/date-picker-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { getLocalTimeZone, parseDate, today } from \"@internationalized/date\"\nimport { useDateFormatter } from \"@react-aria/i18n\"\nimport { DatePicker } from \"ui\"\n\nexport default function DatePickerControlledDemo() {\n  const now = today(getLocalTimeZone())\n\n  const [value, setValue] = React.useState(parseDate(now.toString()))\n\n  const formatter = useDateFormatter({ dateStyle: \"full\" })\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"divide-y [&_p]:py-2\">\n        <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : \"--\"}</p>\n        <p>{value ? value.toString() : \"--\"}</p>\n      </div>\n      <DatePicker value={value} onChange={(newValue) => setValue(newValue!)} label=\"Event date\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/input-otp/input-otp-controlled-demo": {
    "component": "@/components/docs/forms/input-otp/input-otp-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { InputOTP } from \"ui\"\n\nexport default function InputOtpControlledDemo() {\n  const [value, setValue] = React.useState(\"\")\n  return (\n    <div className=\"space-y-2\">\n      <InputOTP maxLength={6} value={value} onChange={setValue}>\n        <InputOTP.Group>\n          {[...Array(6)].map((_, index) => (\n            <InputOTP.Slot key={index} index={index} />\n          ))}\n        </InputOTP.Group>\n      </InputOTP>\n\n      <div className=\"text-center text-sm\">\n        {value === \"\" ? <>Enter your one-time password.</> : <>You entered: {value}</>}\n      </div>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/input-otp/input-otp-separator-demo": {
    "component": "@/components/docs/forms/input-otp/input-otp-separator-demo",
    "raw": "\"use client\"\n\nimport { InputOTP } from \"ui\"\n\nexport default function InputOtpSeparatorDemo() {\n  return (\n    <InputOTP maxLength={6}>\n      <InputOTP.Group>\n        <InputOTP.Slot index={0} />\n        <InputOTP.Slot index={1} />\n        <InputOTP.Slot index={2} />\n      </InputOTP.Group>\n      <InputOTP.Separator />\n      <InputOTP.Group>\n        <InputOTP.Slot index={3} />\n        <InputOTP.Slot index={4} />\n        <InputOTP.Slot index={5} />\n      </InputOTP.Group>\n    </InputOTP>\n  )\n}\n",
    "type": "docs"
  },
  "forms/input-otp/input-otp-demo": {
    "component": "@/components/docs/forms/input-otp/input-otp-demo",
    "raw": "\"use client\"\n\nimport { InputOTP } from \"ui\"\n\nexport default function InputOtpDemo() {\n  return (\n    <div>\n      <InputOTP maxLength={6}>\n        <InputOTP.Group>\n          {[...Array(6)].map((_, index) => (\n            <InputOTP.Slot key={index} index={index} />\n          ))}\n        </InputOTP.Group>\n      </InputOTP>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/form-validation-demo": {
    "component": "@/components/docs/forms/form-validation-demo",
    "raw": "\"use client\"\n\nimport { Button, Form, TextField } from \"ui\"\n\nexport default function FormValidationDemo() {\n  return (\n    <Form onSubmit={() => {}}>\n      <TextField label=\"Name\" isRequired className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "forms/number-field/number-field-invalid-demo": {
    "component": "@/components/docs/forms/number-field/number-field-invalid-demo",
    "raw": "\"use client\"\n\nimport { Button, Form, NumberField } from \"ui\"\n\nexport default function NumberFieldInvalidDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()} className=\"space-y-4\">\n      <NumberField isRequired label=\"Cookies\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "forms/number-field/number-field-disabled-demo": {
    "component": "@/components/docs/forms/number-field/number-field-disabled-demo",
    "raw": "\"use client\"\n\nimport { NumberField } from \"ui\"\n\nexport default function NumberFieldDisabledDemo() {\n  return <NumberField isDisabled label=\"Cookies\" />\n}\n",
    "type": "docs"
  },
  "forms/number-field/number-field-controlled-demo": {
    "component": "@/components/docs/forms/number-field/number-field-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Description, NumberField } from \"ui\"\n\nexport default function NumberFieldControlledDemo() {\n  const [number, setNumber] = React.useState(1280)\n  return (\n    <div>\n      <NumberField label=\"Width\" value={number} onChange={setNumber} />\n\n      <Description className=\"mt-2 block [&>strong]:text-fg\">\n        You have typed: <strong>{number ?? \"-\"}</strong>\n      </Description>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/number-field/number-field-uncontrolled-demo": {
    "component": "@/components/docs/forms/number-field/number-field-uncontrolled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { NumberField } from \"ui\"\n\nexport default function NumberFieldUncontrolledDemo() {\n  return <NumberField label=\"Width\" defaultValue={1997} />\n}\n",
    "type": "docs"
  },
  "forms/number-field/number-field-demo": {
    "component": "@/components/docs/forms/number-field/number-field-demo",
    "raw": "\"use client\"\n\nimport { NumberField } from \"ui\"\n\nexport default function NumberFieldDemo() {\n  return <NumberField label=\"Cookies\" />\n}\n",
    "type": "docs"
  },
  "forms/checkbox/checkbox-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-demo",
    "raw": "\"use client\"\n\nimport { Checkbox } from \"ui\"\n\nexport default function CheckboxDemo() {\n  return <Checkbox>Enable notifications</Checkbox>\n}\n",
    "type": "docs"
  },
  "forms/checkbox/checkbox-group-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Checkbox, CheckboxGroup } from \"ui\"\n\nexport default function CheckboxGroupDemo() {\n  return (\n    <CheckboxGroup label=\"Settings\">\n      <Checkbox value=\"notifications\">Enable notifications</Checkbox>\n      <Checkbox value=\"auto_update\">Auto-update applications</Checkbox>\n      <Checkbox value=\"dark_mode\">Enable dark mode</Checkbox>\n      <Checkbox value=\"location_access\">Allow location access</Checkbox>\n      <Checkbox value=\"two_factor_auth\">Enable two-factor authentication</Checkbox>\n    </CheckboxGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/checkbox/checkbox-group-validation-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-validation-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Button, Checkbox, CheckboxGroup, Form } from \"ui\"\n\nexport default function CheckboxValidationDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <CheckboxGroup className=\"mb-4\" label=\"Settings\" isRequired>\n        <Checkbox value=\"notifications\">Enable notifications</Checkbox>\n        <Checkbox value=\"auto_update\">Auto-update applications</Checkbox>\n        <Checkbox value=\"dark_mode\">Enable dark mode</Checkbox>\n        <Checkbox value=\"location_access\">Allow location access</Checkbox>\n        <Checkbox value=\"two_factor_auth\">Enable two-factor authentication</Checkbox>\n      </CheckboxGroup>\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "forms/checkbox/checkbox-uncontrolled-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-uncontrolled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Checkbox } from \"ui\"\n\nexport default function CheckboxUncontrolledDemo() {\n  return (\n    <Checkbox defaultSelected value=\"updates\">\n      Receive Updates\n    </Checkbox>\n  )\n}\n",
    "type": "docs"
  },
  "forms/checkbox/checkbox-indeterminate-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-indeterminate-demo",
    "raw": "\"use client\"\n\nimport { Checkbox } from \"ui\"\n\nexport default function CheckboxIndeterminateDemo() {\n  return (\n    <Checkbox value=\"read\" isIndeterminate>\n      Read\n    </Checkbox>\n  )\n}\n",
    "type": "docs"
  },
  "forms/checkbox/checkbox-description-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-description-demo",
    "raw": "\"use client\"\n\nimport { Checkbox } from \"ui\"\n\nexport default function CheckboxDescriptionDemo() {\n  return <Checkbox label=\"Postal Mail\" description=\"Receive notifications via postal mail\" />\n}\n",
    "type": "docs"
  },
  "forms/checkbox/checkbox-group-description-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-description-demo",
    "raw": "\"use client\"\n\nimport { Checkbox, CheckboxGroup } from \"ui\"\n\nexport default function CheckboxGroupDescriptionDemo() {\n  return (\n    <CheckboxGroup\n      label=\"User Permissions\"\n      description=\"Select the permissions you want to grant to the user.\"\n    >\n      <Checkbox value=\"read\">Read</Checkbox>\n      <Checkbox value=\"write\">Write</Checkbox>\n      <Checkbox value=\"delete\">Delete</Checkbox>\n      <Checkbox value=\"admin\">Admin</Checkbox>\n    </CheckboxGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/checkbox/checkbox-controlled-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Checkbox, Description } from \"ui\"\n\nexport default function CheckboxControlledDemo() {\n  const [selected, setSelection] = React.useState(false)\n  return (\n    <>\n      <Checkbox isSelected={selected} onChange={setSelection} value=\"updates\">\n        Receive Updates\n      </Checkbox>\n      <Description className=\"mt-2 block [&>strong]:text-fg\">\n        You have <strong>{selected ? \"enabled\" : \"disabled\"}</strong> the option.\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/checkbox/checkbox-invalid-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-invalid-demo",
    "raw": "\"use client\"\n\nimport { Checkbox } from \"ui\"\n\nexport default function CheckboxInvalidDemo() {\n  return <Checkbox isInvalid>Enable notifications</Checkbox>\n}\n",
    "type": "docs"
  },
  "forms/checkbox/checkbox-group-uncontrolled-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-uncontrolled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Checkbox, CheckboxGroup } from \"ui\"\n\nexport default function CheckboxGroupUncontrolledDemo() {\n  return (\n    <CheckboxGroup defaultValue={[\"sound\", \"wifi\"]} label=\"Options\">\n      <Checkbox value=\"sound\">Sound</Checkbox>\n      <Checkbox value=\"wifi\">Wi-Fi</Checkbox>\n      <Checkbox value=\"sync\">Sync</Checkbox>\n    </CheckboxGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/checkbox/checkbox-group-indeterminate-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-indeterminate-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Checkbox, CheckboxGroup } from \"ui\"\n\nexport default function CheckboxGroupIndeterminateDemo() {\n  return (\n    <CheckboxGroup defaultValue={[\"encryption\"]} className=\"ml-6\">\n      <Checkbox isIndeterminate value=\"encryption\" description=\"Enable encryption.\" isReadOnly>\n        Encryption\n      </Checkbox>\n      <Checkbox value=\"firewall\" description=\"Enable firewall protection.\">\n        Firewall\n      </Checkbox>\n      <Checkbox value=\"backup\" description=\"Enable automatic backups.\">\n        Backup\n      </Checkbox>\n      <Checkbox isIndeterminate value=\"anomalyDetection\" description=\"Enable anomaly detection.\">\n        Anomaly Detection\n      </Checkbox>\n    </CheckboxGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/checkbox/checkbox-disabled-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-disabled-demo",
    "raw": "\"use client\"\n\nimport { Checkbox } from \"ui\"\n\nexport default function CheckboxDisabledDemo() {\n  return <Checkbox isDisabled>Enable notifications</Checkbox>\n}\n",
    "type": "docs"
  },
  "forms/checkbox/checkbox-group-disabled-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-disabled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Checkbox, CheckboxGroup } from \"ui\"\n\nexport default function CheckboxDisabledDemo() {\n  return (\n    <CheckboxGroup isDisabled label=\"Settings\">\n      <Checkbox value=\"notifications\">Enable notifications</Checkbox>\n      <Checkbox value=\"auto_update\">Auto-update applications</Checkbox>\n      <Checkbox value=\"dark_mode\">Enable dark mode</Checkbox>\n      <Checkbox value=\"location_access\">Allow location access</Checkbox>\n      <Checkbox value=\"two_factor_auth\">Enable two-factor authentication</Checkbox>\n    </CheckboxGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/checkbox/checkbox-group-controlled-demo": {
    "component": "@/components/docs/forms/checkbox/checkbox-group-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Checkbox, CheckboxGroup, Description } from \"ui\"\n\nexport default function CheckboxGroupControlledDemo() {\n  const [values, setValues] = React.useState<string[]>([])\n  return (\n    <>\n      <CheckboxGroup value={values} onChange={setValues} label=\"Options\">\n        <Checkbox value=\"sound\">Sound</Checkbox>\n        <Checkbox value=\"wifi\">Wi-Fi</Checkbox>\n        <Checkbox value=\"sync\">Sync</Checkbox>\n      </CheckboxGroup>\n\n      <Description className=\"flex flex-col gap-y-1 h-10 mt-2 [&>strong]:text-fg [&>strong]:font-medium\">\n        {values.length > 0 ? (\n          <>\n            Selected values <strong className=\"font-medium\">{values.join(\", \")}</strong>\n          </>\n        ) : (\n          \"No values selected\"\n        )}\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/textarea/textarea-demo": {
    "component": "@/components/docs/forms/textarea/textarea-demo",
    "raw": "\"use client\"\n\nimport { Textarea } from \"ui\"\n\nexport default function TextareaDemo() {\n  return <Textarea label=\"Address\" />\n}\n",
    "type": "docs"
  },
  "forms/textarea/textarea-controlled-demo": {
    "component": "@/components/docs/forms/textarea/textarea-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Textarea } from \"ui\"\n\nexport default function TextareaControlledDemo() {\n  const [value, setValue] = React.useState(\"\")\n  return (\n    <>\n      <Textarea value={value} onChange={setValue} label=\"Address\" className=\"mb-2\" />\n      <p className=\"mt-2\">You have typed: {value ?? \"-\"}</p>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/textarea/textarea-uncontrolled-demo": {
    "component": "@/components/docs/forms/textarea/textarea-uncontrolled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Textarea } from \"ui\"\n\nexport default function TextareaUncontrolledDemo() {\n  return <Textarea defaultValue=\"Brooklyn New York, USA\" label=\"Address\" className=\"mb-2\" />\n}\n",
    "type": "docs"
  },
  "forms/textarea/textarea-readonly-demo": {
    "component": "@/components/docs/forms/textarea/textarea-readonly-demo",
    "raw": "\"use client\"\n\nimport { Textarea } from \"ui\"\n\nexport default function TextareaReadonlyDemo() {\n  return <Textarea isReadOnly label=\"Address\" />\n}\n",
    "type": "docs"
  },
  "forms/textarea/textarea-description-demo": {
    "component": "@/components/docs/forms/textarea/textarea-description-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Textarea } from \"ui\"\n\nexport default function TextareaDescriptionDemo() {\n  return <Textarea label=\"Address\" description=\"Please enter your address\" />\n}\n",
    "type": "docs"
  },
  "forms/textarea/textarea-disabled-demo": {
    "component": "@/components/docs/forms/textarea/textarea-disabled-demo",
    "raw": "\"use client\"\n\nimport { Textarea } from \"ui\"\n\nexport default function TextareaDisabledDemo() {\n  return <Textarea isDisabled label=\"Address\" />\n}\n",
    "type": "docs"
  },
  "forms/textarea/textarea-validation-demo": {
    "component": "@/components/docs/forms/textarea/textarea-validation-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Button, Form, Textarea } from \"ui\"\n\nexport default function TextareaValidationDemo() {\n  const [value, setValue] = React.useState(\"\")\n  return (\n    <Form onSubmit={(e) => e.preventDefault()} className=\"space-y-4\">\n      <Textarea value={value} onChange={setValue} label=\"Address\" isRequired />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "forms/form-demo": {
    "component": "@/components/docs/forms/form-demo",
    "raw": "\"use client\"\n\nimport { Button, Form, Heading, TextField } from \"ui\"\n\nexport default function FormDemo() {\n  return (\n    <div className=\"mx-auto max-w-md py-10\">\n      <Heading level={2} className=\"mb-4\">\n        Register\n      </Heading>\n      <Form onSubmit={() => {}} className=\"space-y-4\">\n        <TextField isRequired label=\"Name\" placeholder=\"Enter your name\" />\n        <TextField isRequired label=\"Email\" placeholder=\"Enter your email\" />\n        <div className=\"grid grid-cols-2 gap-4\">\n          <TextField\n            isRequired\n            label=\"Password\"\n            placeholder=\"Enter your password\"\n            type=\"password\"\n          />\n          <TextField\n            isRequired\n            label=\"Confirm Password\"\n            placeholder=\"Enter your password again\"\n            type=\"password\"\n          />\n        </div>\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/text-field/text-field-validation-demo": {
    "component": "@/components/docs/forms/text-field/text-field-validation-demo",
    "raw": "\"use client\"\n\nimport { Button, Form, TextField } from \"ui\"\n\nexport default function TextFieldValidationDemo() {\n  return (\n    <Form className=\"space-y-4\">\n      <TextField isRequired label=\"Name\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "forms/text-field/text-field-readonly-demo": {
    "component": "@/components/docs/forms/text-field/text-field-readonly-demo",
    "raw": "\"use client\"\n\nimport { TextField } from \"ui\"\n\nexport default function TextFieldReadonlyDemo() {\n  return <TextField isReadOnly label=\"Name\" />\n}\n",
    "type": "docs"
  },
  "forms/text-field/text-field-prefix-suffix-demo": {
    "component": "@/components/docs/forms/text-field/text-field-prefix-suffix-demo",
    "raw": "\"use client\"\n\nimport { IconBrandTwitter } from \"justd-icons\"\nimport { TextField } from \"ui\"\n\nexport default function TextFieldPrefixSuffixDemo() {\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <TextField label=\"Twitter\" suffix={<IconBrandTwitter />} />\n      <TextField label=\"Sites\" prefix=\"https://\" suffix=\".com\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/text-field/text-field-uncontrolled-demo": {
    "component": "@/components/docs/forms/text-field/text-field-uncontrolled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { TextField } from \"ui\"\n\nexport default function TextFieldUncontrolledDemo() {\n  return <TextField defaultValue=\"Irsyad\" label=\"Name\" className=\"mb-2\" />\n}\n",
    "type": "docs"
  },
  "forms/text-field/text-field-description-demo": {
    "component": "@/components/docs/forms/text-field/text-field-description-demo",
    "raw": "\"use client\"\n\nimport { TextField } from \"ui\"\n\nexport default function TextFieldDescriptionDemo() {\n  return <TextField label=\"Name\" description=\"Please enter your legal name.\" />\n}\n",
    "type": "docs"
  },
  "forms/text-field/text-field-revealable-demo": {
    "component": "@/components/docs/forms/text-field/text-field-revealable-demo",
    "raw": "\"use client\"\n\nimport { TextField } from \"ui\"\n\nexport default function TextFieldRevealableDemo() {\n  return <TextField type=\"password\" isRevealable label=\"Password\" />\n}\n",
    "type": "docs"
  },
  "forms/text-field/text-field-demo": {
    "component": "@/components/docs/forms/text-field/text-field-demo",
    "raw": "\"use client\"\n\nimport { TextField } from \"ui\"\n\nexport default function TextFieldDemo() {\n  return <TextField label=\"Name\" />\n}\n",
    "type": "docs"
  },
  "forms/text-field/text-field-disabled-demo": {
    "component": "@/components/docs/forms/text-field/text-field-disabled-demo",
    "raw": "\"use client\"\n\nimport { TextField } from \"ui\"\n\nexport default function TextFieldDisabledDemo() {\n  return <TextField isDisabled label=\"Name\" placeholder=\"Kurt Cobain\" />\n}\n",
    "type": "docs"
  },
  "forms/text-field/text-field-controlled-demo": {
    "component": "@/components/docs/forms/text-field/text-field-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Description, TextField } from \"ui\"\n\nexport default function TextFieldControlledDemo() {\n  const [value, setValue] = React.useState(\"\")\n  return (\n    <>\n      <TextField value={value} onChange={setValue} label=\"Name\" className=\"mb-2\" />\n      <Description className=\"mt-2 block [&>strong]:text-fg\">\n        You have typed: <strong>{value ?? \"-\"}</strong>\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/text-field/text-field-suffix-button-demo": {
    "component": "@/components/docs/forms/text-field/text-field-suffix-button-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconPlus } from \"justd-icons\"\nimport { Button, Modal, TextField } from \"ui\"\n\nexport default function TextFieldSuffixButtonDemo() {\n  const [open, setOpen] = React.useState(false)\n  const close = () => setOpen(false)\n  return (\n    <>\n      <Modal.Content isOpen={open} onOpenChange={close}>\n        <Modal.Header>\n          <Modal.Title>New User</Modal.Title>\n          <Modal.Description>Create a new user account</Modal.Description>\n        </Modal.Header>\n        <Modal.Body className=\"flex flex-col gap-4\">\n          <TextField label=\"Username\" placeholder=\"Username\" />\n          <TextField label=\"Email\" placeholder=\"Email\" type=\"email\" />\n        </Modal.Body>\n        <Modal.Footer>\n          <Modal.Close appearance=\"outline\">Cancel</Modal.Close>\n          <Button onPress={close}>Continue</Button>\n        </Modal.Footer>\n      </Modal.Content>\n      <TextField\n        label=\"Username\"\n        suffix={\n          <Button aria-label=\"New user\" onPress={() => setOpen(true)} appearance=\"outline\">\n            <IconPlus />\n          </Button>\n        }\n      />\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/text-field/text-field-pending-demo": {
    "component": "@/components/docs/forms/text-field/text-field-pending-demo",
    "raw": "\"use client\"\n\nimport { TextField } from \"ui\"\n\nexport default function TextFieldPendingDemo() {\n  return <TextField isPending label=\"Name\" />\n}\n",
    "type": "docs"
  },
  "forms/radio-group/radio-group-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-demo",
    "raw": "\"use client\"\n\nimport { Radio, RadioGroup } from \"ui\"\n\nexport default function RadioGroupDemo() {\n  return (\n    <RadioGroup label=\"Features\">\n      <Radio value=\"fs\">Font size: Small, Medium, Large</Radio>\n      <Radio value=\"dr\">Display resolution: 1080p, 1440p, 4K</Radio>\n      <Radio value=\"ss\">Sound settings: Mute, Low, Medium, High</Radio>\n      <Radio value=\"bi\">Background image: Default, Custom</Radio>\n      <Radio value=\"ks\">Keyboard shortcuts: Enabled, Disabled</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/radio-group/radio-group-controlled-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Description, Radio, RadioGroup } from \"ui\"\n\nexport default function RadioGroupControlledDemo() {\n  const [selected, setSelected] = React.useState(\"\")\n  return (\n    <>\n      <RadioGroup label=\"Features\" value={selected} onChange={setSelected}>\n        <Radio value=\"theme\">Theme</Radio>\n        <Radio value=\"language\">Language</Radio>\n        <Radio value=\"timezone\">Timezone</Radio>\n        <Radio value=\"notifications\">Notifications</Radio>\n        <Radio value=\"privacy\">Privacy</Radio>\n      </RadioGroup>\n      <Description className=\"mt-2 block [&>strong]:text-fg\">\n        You have selected: <strong>{selected ?? \"-\"}</strong>\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/radio-group/radio-group-uncontrolled-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-uncontrolled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Radio, RadioGroup } from \"ui\"\n\nexport default function RadioGroupUncontrolledDemo() {\n  return (\n    <RadioGroup label=\"Features\" defaultValue=\"theme\">\n      <Radio value=\"language\">Language</Radio>\n      <Radio value=\"timezone\">Timezone</Radio>\n      <Radio value=\"notifications\">Notifications</Radio>\n      <Radio value=\"privacy\">Privacy</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/radio-group/radio-group-orientation-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-orientation-demo",
    "raw": "\"use client\"\n\nimport { Radio, RadioGroup } from \"ui\"\n\nexport default function RadioGroupOrientationDemo() {\n  return (\n    <RadioGroup orientation=\"horizontal\" label=\"Payment Method\">\n      <Radio value=\"credit-card\">Credit Card</Radio>\n      <Radio value=\"paypal\">PayPal</Radio>\n      <Radio value=\"apple-pay\">Apple Pay</Radio>\n      <Radio value=\"google-pay\">Google Pay</Radio>\n      <Radio value=\"bank-transfer\">Bank Transfer</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/radio-group/radio-group-invalid-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-invalid-demo",
    "raw": "\"use client\"\n\nimport { Radio, RadioGroup } from \"ui\"\n\nexport default function RadioGroupInvalidDemo() {\n  return (\n    <RadioGroup isInvalid label=\"Features\">\n      <Radio value=\"fs\">Font size: Small, Medium, Large</Radio>\n      <Radio value=\"dr\">Display resolution: 1080p, 1440p, 4K</Radio>\n      <Radio value=\"ss\">Sound settings: Mute, Low, Medium, High</Radio>\n      <Radio value=\"bi\">Background image: Default, Custom</Radio>\n      <Radio value=\"ks\">Keyboard shortcuts: Enabled, Disabled</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/radio-group/radio-group-disabled-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-disabled-demo",
    "raw": "\"use client\"\n\nimport { Radio, RadioGroup } from \"ui\"\n\nexport default function RadioGroupDisabledDemo() {\n  return (\n    <RadioGroup isDisabled label=\"Features\">\n      <Radio value=\"fs\">Font size: Small, Medium, Large</Radio>\n      <Radio value=\"dr\">Display resolution: 1080p, 1440p, 4K</Radio>\n      <Radio value=\"ss\">Sound settings: Mute, Low, Medium, High</Radio>\n      <Radio value=\"bi\">Background image: Default, Custom</Radio>\n      <Radio value=\"ks\">Keyboard shortcuts: Enabled, Disabled</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/radio-group/radio-group-description-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-description-demo",
    "raw": "\"use client\"\n\nimport { Radio, RadioGroup } from \"ui\"\n\nexport default function RadioGroupDescriptionDemo() {\n  return (\n    <RadioGroup\n      description=\"Select your preferred shipping method for the delivery of your items.\"\n      label=\"Shipping Method\"\n    >\n      <Radio value=\"standard\">Standard</Radio>\n      <Radio value=\"express\">Express</Radio>\n      <Radio value=\"overnight\">Overnight</Radio>\n      <Radio value=\"international\">International</Radio>\n      <Radio value=\"pickup\">Pickup</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/radio-group/radio-group-children-description-demo": {
    "component": "@/components/docs/forms/radio-group/radio-group-children-description-demo",
    "raw": "\"use client\"\n\nimport { Radio, RadioGroup } from \"ui\"\n\nexport default function RadioGroupChildrenDescriptionDemo() {\n  return (\n    <RadioGroup>\n      <Radio value=\"basic\" description=\"Basic plan with limited features\">\n        Basic\n      </Radio>\n      <Radio value=\"standard\" description=\"Standard plan with more features\">\n        Standard\n      </Radio>\n      <Radio value=\"premium\" description=\"Premium plan with all features\">\n        Premium\n      </Radio>\n      <Radio value=\"family\" description=\"Family plan for multiple users\">\n        Family\n      </Radio>\n      <Radio value=\"student\" description=\"Discounted plan for students\">\n        Student\n      </Radio>\n      <Radio value=\"custom\">Custom</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/search-field/search-field-controlled-demo": {
    "component": "@/components/docs/forms/search-field/search-field-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Description, SearchField } from \"ui\"\n\nexport default function SearchFieldControlledDemo() {\n  const [value, setValue] = React.useState(\"\")\n  return (\n    <>\n      <SearchField value={value} onChange={setValue} className=\"mb-2\" />\n      <Description className=\"mt-2 block [&>strong]:text-fg\">\n        You have typed: <strong>{value ?? \"-\"}</strong>\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/search-field/search-field-pending-demo": {
    "component": "@/components/docs/forms/search-field/search-field-pending-demo",
    "raw": "\"use client\"\n\nimport { SearchField } from \"ui\"\n\nexport default function SearchFieldDemo() {\n  return <SearchField isPending aria-label=\"Search\" placeholder=\"Search\" />\n}\n",
    "type": "docs"
  },
  "forms/search-field/search-field-disabled-demo": {
    "component": "@/components/docs/forms/search-field/search-field-disabled-demo",
    "raw": "\"use client\"\n\nimport { SearchField } from \"ui\"\n\nexport default function SearchFieldDisabledDemo() {\n  return <SearchField isDisabled />\n}\n",
    "type": "docs"
  },
  "forms/search-field/search-field-demo": {
    "component": "@/components/docs/forms/search-field/search-field-demo",
    "raw": "\"use client\"\n\nimport { SearchField } from \"ui\"\n\nexport default function SearchFieldDemo() {\n  return <SearchField aria-label=\"Search\" placeholder=\"Search\" />\n}\n",
    "type": "docs"
  },
  "forms/search-field/search-field-readonly-demo": {
    "component": "@/components/docs/forms/search-field/search-field-readonly-demo",
    "raw": "\"use client\"\n\nimport { SearchField } from \"ui\"\n\nexport default function SearchFieldDescriptionDemo() {\n  return <SearchField aria-label=\"Search\" isReadOnly placeholder=\"Search\" />\n}\n",
    "type": "docs"
  },
  "forms/search-field/search-field-uncontrolled-demo": {
    "component": "@/components/docs/forms/search-field/search-field-uncontrolled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { SearchField } from \"ui\"\n\nexport default function SearchFieldControlledDemo() {\n  return <SearchField defaultValue=\"Laravel\" />\n}\n",
    "type": "docs"
  },
  "forms/search-field/search-field-with-label-demo": {
    "component": "@/components/docs/forms/search-field/search-field-with-label-demo",
    "raw": "\"use client\"\n\nimport { SearchField } from \"ui\"\n\nexport default function SearchFieldWithLabelDemo() {\n  return <SearchField label=\"Search\" />\n}\n",
    "type": "docs"
  },
  "forms/search-field/search-field-description-demo": {
    "component": "@/components/docs/forms/search-field/search-field-description-demo",
    "raw": "\"use client\"\n\nimport { SearchField } from \"ui\"\n\nexport default function SearchFieldDescriptionDemo() {\n  return <SearchField aria-label=\"Search\" placeholder=\"Search\" description=\"Search for a product\" />\n}\n",
    "type": "docs"
  },
  "forms/search-field/search-field-validation-demo": {
    "component": "@/components/docs/forms/search-field/search-field-validation-demo",
    "raw": "\"use client\"\n\nimport { Button, Form, SearchField } from \"ui\"\n\nexport default function SearchFieldValidationDemo() {\n  return (\n    <Form>\n      <SearchField isRequired label=\"Name\" className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "forms/tag-field/tag-field-intent-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-intent-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { useListData } from \"react-stately\"\nimport { TagField } from \"ui\"\n\nexport default function TagFieldIntentDemo() {\n  const selectedItems = useListData({\n    initialItems: [\n      {\n        id: 1,\n        name: \"Laravel\"\n      },\n      {\n        id: 2,\n        name: \"Inertia.js\"\n      },\n      {\n        id: 3,\n        name: \"React\"\n      },\n      {\n        id: 4,\n        name: \"Tailwind CSS\"\n      }\n    ]\n  })\n\n  return (\n    <TagField intent=\"secondary\" className=\"max-w-xs\" aria-label=\"Add tag\" list={selectedItems} />\n  )\n}\n",
    "type": "docs"
  },
  "forms/tag-field/tag-field-disabled-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-disabled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { useListData } from \"react-stately\"\nimport { TagField } from \"ui\"\n\nexport default function TagFieldDisabledDemo() {\n  const selectedItems = useListData({\n    initialItems: []\n  })\n\n  return <TagField isDisabled label=\"Add tag\" list={selectedItems} />\n}\n",
    "type": "docs"
  },
  "forms/tag-field/tag-field-max-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-max-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { useListData } from \"react-stately\"\nimport { TagField } from \"ui\"\n\nexport default function TagFieldMaxDemo() {\n  const selectedItems = useListData({\n    initialItems: []\n  })\n\n  return (\n    <TagField\n      className=\"max-w-sm\"\n      max={3}\n      label=\"Add tag\"\n      description=\"You can only add 3 tags\"\n      list={selectedItems}\n    />\n  )\n}\n",
    "type": "docs"
  },
  "forms/tag-field/tag-field-shape-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-shape-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { useListData } from \"react-stately\"\nimport { TagField } from \"ui\"\n\nexport default function TagFieldShapeDemo() {\n  const selectedItems = useListData({\n    initialItems: [\n      {\n        id: 1,\n        name: \"Laravel\"\n      },\n      {\n        id: 2,\n        name: \"Inertia.js\"\n      }\n    ]\n  })\n\n  return <TagField shape=\"circle\" className=\"max-w-xs\" label=\"Add tag\" list={selectedItems} />\n}\n",
    "type": "docs"
  },
  "forms/tag-field/tag-field-controlled-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { useListData } from \"react-stately\"\nimport { Description, TagField } from \"ui\"\n\nexport default function TagFieldControlledDemo() {\n  const selectedItems = useListData({\n    initialItems: [{ id: 1, name: \"Ferrari\" }]\n  })\n\n  return (\n    <div className=\"max-w-xs\">\n      <TagField\n        appearance=\"outline\"\n        label=\"Add tag\"\n        onItemInserted={(key) => console.log(\"on item inserted\", key)}\n        onItemCleared={(key) => console.log(\"on item cleared\", key)}\n        description=\"You can add multiple tags\"\n        list={selectedItems}\n      />\n      <Description className=\"max-w-xs block [&>strong]:text-fg [&>strong]:text-medium mt-4\">\n        {JSON.stringify(selectedItems.items)}\n      </Description>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/tag-field/tag-field-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { useListData } from \"react-stately\"\nimport { TagField } from \"ui\"\n\nexport default function TagFieldDemo() {\n  const selectedItems = useListData({\n    initialItems: [\n      {\n        id: 1,\n        name: \"Laravel\"\n      }\n    ]\n  })\n\n  return <TagField className=\"max-w-xs\" label=\"Add tag\" list={selectedItems} />\n}\n",
    "type": "docs"
  },
  "forms/tag-field/tag-field-appearance-demo": {
    "component": "@/components/docs/forms/tag-field/tag-field-appearance-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { useListData } from \"react-stately\"\nimport { TagField } from \"ui\"\n\nexport default function TagFieldAppearanceDemo() {\n  const selectedItems = useListData({\n    initialItems: []\n  })\n\n  return <TagField appearance=\"plain\" placeholder=\"Tags...\" list={selectedItems} />\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger/file-trigger-disabled-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-disabled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Description, FileTrigger } from \"ui\"\n\nexport default function FileTriggerDemo() {\n  const [file, setFile] = React.useState<string[] | null>(null)\n  return (\n    <>\n      <FileTrigger\n        isDisabled\n        onSelect={(e) => {\n          const files = Array.from(e ?? [])\n          const filenames = files.map((file) => file.name)\n          setFile(filenames)\n        }}\n      />\n      {file && <Description>{file}</Description>}\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger/file-trigger-folder-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-folder-demo",
    "raw": "\"use client\"\n\nimport { FileTrigger } from \"ui\"\n\nexport default function FileTriggerFolderDemo() {\n  return <FileTrigger acceptDirectory />\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger/file-trigger-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { FileTrigger } from \"ui\"\n\nexport default function FileTriggerDemo() {\n  return <FileTrigger />\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger/file-trigger-controlled-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Description, FileTrigger } from \"ui\"\n\nexport default function FileTriggerDemo() {\n  const [file, setFile] = React.useState<string[] | null>(null)\n  return (\n    <>\n      <FileTrigger\n        onSelect={(e) => {\n          const files = Array.from(e ?? [])\n          const filenames = files.map((file) => file.name)\n          setFile(filenames)\n        }}\n      />\n      {file && (\n        <Description className=\"truncate max-w-60 [&>strong]:font-medium block [&>strong]:text-fg mt-2\">\n          Your file: <strong>{file}</strong>\n        </Description>\n      )}\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger/file-trigger-multiple-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-multiple-demo",
    "raw": "\"use client\"\n\nimport { FileTrigger } from \"ui\"\n\nexport default function FileTriggerMultipleDemo() {\n  return <FileTrigger allowsMultiple />\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger/file-trigger-camera-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-camera-demo",
    "raw": "\"use client\"\n\nimport { FileTrigger } from \"ui\"\n\nexport default function FileTriggerCameraDemo() {\n  return <FileTrigger defaultCamera=\"environment\">Open a camera</FileTrigger>\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger/file-trigger-avatar-demo": {
    "component": "@/components/docs/buttons/file-trigger/file-trigger-avatar-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { DropEvent } from \"@react-types/shared\"\nimport { isFileDropItem } from \"react-aria-components\"\nimport { twJoin } from \"tailwind-merge\"\nimport { Avatar, DropZone, FileTrigger } from \"ui\"\n\nexport default function FileTriggerAvatarDemo() {\n  const [droppedImage, setDroppedImage] = React.useState<string | undefined>(undefined)\n\n  const onDropHandler = async (e: DropEvent) => {\n    const item = e.items\n      .filter(isFileDropItem)\n      .find((item) => item.type === \"image/jpeg\" || item.type === \"image/png\")\n    if (item) {\n      const file = await item.getFile()\n      setDroppedImage(URL.createObjectURL(file))\n    }\n  }\n\n  async function onSelectHandler(e: any) {\n    if (e) {\n      const files = Array.from([...e])\n      const item = files[0]\n\n      if (item) {\n        setDroppedImage(URL.createObjectURL(item))\n      }\n    }\n  }\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      <DropZone\n        getDropOperation={() => \"copy\"}\n        onDrop={onDropHandler}\n        className={twJoin(\n          \"[&_[data-slot=avatar]]:bg-transparent [&_[data-slot=avatar]]:outline-none rounded-full p-0 overflow-hidden size-10\"\n        )}\n      >\n        {droppedImage ? (\n          <Avatar src={droppedImage} size=\"large\" />\n        ) : (\n          <Avatar initials=\"IA\" size=\"large\" />\n        )}\n        <input type=\"hidden\" name=\"image\" value={droppedImage} />\n      </DropZone>\n      <FileTrigger\n        size=\"small\"\n        withIcon={false}\n        acceptedFileTypes={[\"image/png\", \"image/jpeg\"]}\n        onSelect={onSelectHandler}\n      >\n        Upload avatar\n      </FileTrigger>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/toggle-group/toggle-group-controlled-demo": {
    "component": "@/components/docs/buttons/toggle-group/toggle-group-controlled-demo",
    "raw": "import React from \"react\"\n\nimport type { Key } from \"react-aria-components\"\nimport { Toggle, ToggleGroup } from \"ui\"\n\nexport default function ToggleGroupControlledDemo() {\n  const [selected, setSelected] = React.useState(new Set<Key>([\"bold\"]))\n\n  return (\n    <>\n      <ToggleGroup selectionMode=\"multiple\" selectedKeys={selected} onSelectionChange={setSelected}>\n        <Toggle id=\"bold\">Bold</Toggle>\n        <Toggle id=\"italic\">Italic</Toggle>\n        <Toggle id=\"underline\">Underline</Toggle>\n      </ToggleGroup>\n      {[...selected].length > 0 && (\n        <p className=\"text-muted-fg mt-4\">\n          Selected: <strong className=\"text-fg font-semibold\">{[...selected].join(\", \")}</strong>\n        </p>\n      )}\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/toggle-group/toggle-group-demo": {
    "component": "@/components/docs/buttons/toggle-group/toggle-group-demo",
    "raw": "import { IconBulletList, IconGrid4 } from \"justd-icons\"\nimport { Toggle, ToggleGroup } from \"ui\"\n\nexport default function ToggleGroupDemo() {\n  return (\n    <ToggleGroup>\n      <Toggle>\n        <IconGrid4 />\n        Grid\n      </Toggle>\n      <Toggle>\n        <IconBulletList />\n        List\n      </Toggle>\n    </ToggleGroup>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/toggle-group/toggle-group-selection-mode-demo": {
    "component": "@/components/docs/buttons/toggle-group/toggle-group-selection-mode-demo",
    "raw": "import { Toggle, ToggleGroup } from \"ui\"\n\nexport default function ToggleGroupSelectionModeDemo() {\n  return (\n    <ToggleGroup defaultSelectedKeys={[\"center\"]} selectionMode=\"single\">\n      <Toggle id=\"left\">Left</Toggle>\n      <Toggle id=\"center\">Center</Toggle>\n      <Toggle id=\"right\">Right</Toggle>\n    </ToggleGroup>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/toggle-group/toggle-group-disabled-demo": {
    "component": "@/components/docs/buttons/toggle-group/toggle-group-disabled-demo",
    "raw": "import { Toggle, ToggleGroup } from \"ui\"\n\nexport default function ToggleGroupSelectionModeDemo() {\n  return (\n    <ToggleGroup isDisabled>\n      <Toggle id=\"left\">Left</Toggle>\n      <Toggle id=\"center\">Center</Toggle>\n      <Toggle id=\"right\">Right</Toggle>\n    </ToggleGroup>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/toggle-group/toggle-group-orientation-demo": {
    "component": "@/components/docs/buttons/toggle-group/toggle-group-orientation-demo",
    "raw": "import {\n  IconBell,\n  IconBellFill,\n  IconMoonFill,\n  IconSun,\n  IconTranslate,\n  IconTranslateFill\n} from \"justd-icons\"\nimport { Toggle, ToggleGroup } from \"ui\"\n\nexport default function ToggleGroupOrientationDemo() {\n  return (\n    <div>\n      <ToggleGroup orientation=\"vertical\">\n        <Toggle>\n          {({ isSelected }) => (\n            <>\n              {isSelected ? <IconMoonFill /> : <IconSun />}\n              {isSelected ? \"Dark\" : \"Light\"}Mode\n            </>\n          )}\n        </Toggle>\n        <Toggle>\n          {({ isSelected }) => (\n            <>\n              {isSelected ? <IconBellFill /> : <IconBell />}\n              Notifications {isSelected ? \"On\" : \"Off\"}\n            </>\n          )}\n        </Toggle>\n        <Toggle>\n          {({ isSelected }) => (\n            <>\n              {isSelected ? <IconTranslateFill /> : <IconTranslate />}\n              Always Translate\n            </>\n          )}\n        </Toggle>\n      </ToggleGroup>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/toggle-group/toggle-group-appearance-demo": {
    "component": "@/components/docs/buttons/toggle-group/toggle-group-appearance-demo",
    "raw": "import { Separator, Toggle, ToggleGroup } from \"ui\"\n\nexport default function ToggleGroupAppearanceDemo() {\n  return (\n    <div className=\"flex flex-col gap-y-6\">\n      <ToggleGroup appearance=\"solid\" defaultSelectedKeys={[\"center\"]} selectionMode=\"single\">\n        <Toggle id=\"left\">Left</Toggle>\n        <Toggle id=\"center\">Center</Toggle>\n        <Toggle id=\"right\">Right</Toggle>\n      </ToggleGroup>\n      <Separator />\n      <ToggleGroup appearance=\"outline\" defaultSelectedKeys={[\"center\"]} selectionMode=\"single\">\n        <Toggle id=\"left\">Left</Toggle>\n        <Toggle id=\"center\">Center</Toggle>\n        <Toggle id=\"right\">Right</Toggle>\n      </ToggleGroup>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/toggle/toggle-disabled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-disabled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconPin } from \"justd-icons\"\nimport { Toggle } from \"ui\"\n\nexport default function ToggleDisabledDemo() {\n  return (\n    <Toggle size=\"square-petite\" isDisabled>\n      <IconPin />\n    </Toggle>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/toggle/toggle-appearance-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-appearance-demo",
    "raw": "\"use client\"\n\nimport { Toggle } from \"ui\"\n\nexport default function ToggleAppearanceDemo() {\n  return (\n    <div className=\"flex gap-2\">\n      <Toggle>{({ isSelected }) => <>{isSelected ? \"Unpin\" : \"Pin\"}</>}</Toggle>\n      <Toggle appearance=\"outline\">\n        {({ isSelected }) => <>{isSelected ? \"Unpin\" : \"Pin\"}</>}\n      </Toggle>\n      <Toggle appearance=\"solid\">{({ isSelected }) => <>{isSelected ? \"Unpin\" : \"Pin\"}</>}</Toggle>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/toggle/toggle-shape-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-shape-demo",
    "raw": "\"use client\"\n\nimport { Toggle } from \"ui\"\n\nexport default function ToggleShapeDemo() {\n  return (\n    <Toggle appearance=\"outline\" shape=\"circle\">\n      {({ isSelected }) => <>{isSelected ? \"Disabled\" : \"Enabled\"}</>}\n    </Toggle>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/toggle/toggle-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-demo",
    "raw": "\"use client\"\n\nimport { Toggle } from \"ui\"\n\nexport default function ToggleDemo() {\n  return <Toggle>{({ isSelected }) => <>{isSelected ? \"Unpin\" : \"Pin\"}</>}</Toggle>\n}\n",
    "type": "docs"
  },
  "buttons/toggle/toggle-size-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-size-demo",
    "raw": "\"use client\"\n\nimport { IconAccessible, IconAccessibleFill } from \"justd-icons\"\nimport { Toggle } from \"ui\"\n\nexport default function ToggleSizeDemo() {\n  return (\n    <div className=\"flex flex-wrap gap-2\">\n      <Toggle appearance=\"outline\" size=\"square-petite\">\n        {({ isSelected }) => <>{isSelected ? <IconAccessibleFill /> : <IconAccessible />}</>}\n      </Toggle>\n      <Toggle appearance=\"outline\" size=\"small\">\n        {({ isSelected }) => <>{isSelected ? \"Unpin\" : \"Pin\"}</>}\n      </Toggle>\n      <Toggle appearance=\"outline\" size=\"medium\">\n        {({ isSelected }) => <>{isSelected ? \"Unpin\" : \"Pin\"}</>}\n      </Toggle>\n      <Toggle appearance=\"outline\" size=\"large\">\n        {({ isSelected }) => <>{isSelected ? \"Unpin\" : \"Pin\"}</>}\n      </Toggle>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/toggle/toggle-controlled-demo": {
    "component": "@/components/docs/buttons/toggle/toggle-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconPin, IconUnpin } from \"justd-icons\"\nimport { Toggle } from \"ui\"\n\nexport default function ToggleControlledDemo() {\n  const [isSelected, setSelected] = React.useState(false)\n  return (\n    <Toggle size=\"square-petite\" isSelected={isSelected} onChange={setSelected}>\n      {({ isSelected }) => <>{isSelected ? <IconUnpin /> : <IconPin />}</>}\n    </Toggle>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button/button-intent-demo": {
    "component": "@/components/docs/buttons/button/button-intent-demo",
    "raw": "\"use client\"\n\nimport { Button } from \"ui\"\n\nexport default function ButtonIntentDemo() {\n  return (\n    <div className=\"flex max-w-sm flex-wrap gap-2\">\n      <Button>Label</Button>\n      <Button intent=\"secondary\">Label</Button>\n      <Button intent=\"danger\">Label</Button>\n      <Button intent=\"warning\"> Label</Button>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button/button-icon-demo": {
    "component": "@/components/docs/buttons/button/button-icon-demo",
    "raw": "\"use client\"\n\nimport { IconBrandLaravel } from \"justd-icons\"\nimport { Button } from \"ui\"\n\nexport default function ButtonIconDemo() {\n  return (\n    <Button intent=\"danger\">\n      <IconBrandLaravel />\n      Laravel\n    </Button>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button/button-loader-demo": {
    "component": "@/components/docs/buttons/button/button-loader-demo",
    "raw": "\"use client\"\n\nimport { useState } from \"react\"\n\nimport { IconCircleCheckFill, IconKey } from \"justd-icons\"\nimport { Button, Loader } from \"ui\"\n\nexport default function ButtonLoaderDemo() {\n  const [loading, setLoading] = useState<\"idle\" | \"loading\" | \"success\">(\"idle\")\n\n  const pressHandler = () => {\n    setLoading(\"loading\")\n\n    setTimeout(() => setLoading(\"success\"), 3000)\n\n    setTimeout(() => setLoading(\"idle\"), 6000)\n  }\n\n  return (\n    <Button\n      isPending={loading === \"loading\"}\n      className=\"w-52 justify-between\"\n      onPress={pressHandler}\n      intent=\"primary\"\n    >\n      {loading === \"success\" ? (\n        <IconCircleCheckFill />\n      ) : loading === \"loading\" ? (\n        <Loader variant=\"spin\" />\n      ) : (\n        <IconKey />\n      )}\n      {loading === \"loading\"\n        ? \"Generating Key...\"\n        : loading === \"success\"\n          ? \"Key Generated!\"\n          : \"Generate API Key\"}\n    </Button>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button/button-disabled-demo": {
    "component": "@/components/docs/buttons/button/button-disabled-demo",
    "raw": "\"use client\"\n\nimport { Button } from \"ui\"\n\nexport default function ButtonDisabledDemo() {\n  return <Button isDisabled>Label</Button>\n}\n",
    "type": "docs"
  },
  "buttons/button/button-only-icon-demo": {
    "component": "@/components/docs/buttons/button/button-only-icon-demo",
    "raw": "\"use client\"\n\nimport { IconBrandParsinta } from \"justd-icons\"\nimport { Button } from \"ui\"\n\nexport default function ButtonOnlyIconDemo() {\n  return (\n    <Button size=\"square-petite\" appearance=\"outline\">\n      <IconBrandParsinta />\n    </Button>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button/button-size-demo": {
    "component": "@/components/docs/buttons/button/button-size-demo",
    "raw": "\"use client\"\n\nimport { Button } from \"ui\"\n\nexport default function ButtonSizeDemo() {\n  return (\n    <div className=\"flex gap-2\">\n      <Button size=\"extra-small\">Label</Button>\n      <Button size=\"small\">Label</Button>\n      <Button>Label</Button>\n      <Button size=\"large\">Label</Button>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button/button-shape-demo": {
    "component": "@/components/docs/buttons/button/button-shape-demo",
    "raw": "\"use client\"\n\nimport { Button } from \"ui\"\n\nexport default function ButtonShapeDemo() {\n  return <Button shape=\"circle\">Label</Button>\n}\n",
    "type": "docs"
  },
  "buttons/button/button-basic-demo": {
    "component": "@/components/docs/buttons/button/button-basic-demo",
    "raw": "\"use client\"\n\nimport { Button } from \"ui\"\n\nexport default function ButtonBasicDemo() {\n  return <Button onPress={() => alert(\"Pressed\")}>Label</Button>\n}\n",
    "type": "docs"
  },
  "buttons/button/button-pending-demo": {
    "component": "@/components/docs/buttons/button/button-pending-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconPlus } from \"justd-icons\"\nimport { Button, ProgressCircle } from \"ui\"\n\nexport default function ButtonPendingDemo() {\n  const [isLoading, setLoading] = React.useState(false)\n\n  const handlePress = () => {\n    setLoading(true)\n    setTimeout(() => {\n      setLoading(false)\n    }, 4500)\n  }\n  return (\n    <Button onPress={handlePress} isPending={isLoading}>\n      {({ isPending }) => (\n        <>\n          {isPending ? <ProgressCircle isIndeterminate aria-label=\"Creating...\" /> : <IconPlus />}\n          {isLoading ? \"Creating...\" : \"Create\"}\n        </>\n      )}\n    </Button>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button/button-appearance-demo": {
    "component": "@/components/docs/buttons/button/button-appearance-demo",
    "raw": "\"use client\"\n\nimport title from \"title\"\nimport { Button, buttonStyles } from \"ui\"\n\ntype Appearance = keyof typeof buttonStyles.variants.appearance\n\nexport default function ButtonAppearanceDemo() {\n  return (\n    <div className=\"flex flex-col gap-2 md:flex-row md:flex-wrap\">\n      {Object.keys(buttonStyles.variants.appearance).map((appearance) => (\n        <div key={appearance}>\n          <Button appearance={appearance as Appearance}>{title(appearance)}</Button>\n        </div>\n      ))}\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button/button-link-demo": {
    "component": "@/components/docs/buttons/button/button-link-demo",
    "raw": "\"use client\"\n\nimport { buttonStyles, Link } from \"ui\"\n\nexport default function ButtonLinkDemo() {\n  return (\n    <Link\n      className={buttonStyles({ intent: \"primary\" })}\n      href=\"/docs/2.x/components/collections/choicebox\"\n    >\n      Choicebox\n    </Link>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/drawer/drawer-nested-demo": {
    "component": "@/components/docs/overlays/drawer/drawer-nested-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { toast } from \"sonner\"\nimport { Button, Drawer, Form, Textarea } from \"ui\"\n\nexport default function DrawerNestedDemo() {\n  const [isRegistrationDrawerOpen, setIsRegistrationDrawerOpen] = React.useState(false)\n  const [isProfileSetupDrawerOpen, setIsProfileSetupDrawerOpen] = React.useState(false)\n  const [isTyping, setIsTyping] = React.useState(false)\n\n  return (\n    <>\n      <Button onPress={() => setIsRegistrationDrawerOpen(true)}>Register</Button>\n\n      <Drawer\n        isOpen={isRegistrationDrawerOpen}\n        onOpenChange={() => setIsRegistrationDrawerOpen(false)}\n      >\n        <Drawer.Content>\n          <Drawer.Header>\n            <Drawer.Title>Confirm Registration</Drawer.Title>\n            <Drawer.Description>Please confirm your registration details.</Drawer.Description>\n          </Drawer.Header>\n          <Drawer.Footer>\n            <Drawer.Close>Cancel</Drawer.Close>\n            <Button\n              onPress={() => {\n                setIsProfileSetupDrawerOpen(true)\n              }}\n            >\n              Confirm\n            </Button>\n          </Drawer.Footer>\n        </Drawer.Content>\n      </Drawer>\n\n      <Drawer\n        isOpen={isProfileSetupDrawerOpen}\n        onOpenChange={(isOpen) => {\n          if (!isOpen && isTyping) toast(\"Profile setup incomplete\", { position: \"top-center\" })\n          setIsProfileSetupDrawerOpen(isOpen)\n        }}\n      >\n        <Drawer.Content>\n          <Drawer.Header>\n            <Drawer.Title>Set Up Your Profile</Drawer.Title>\n            <Drawer.Description>\n              We need a bit more information before you can get started.\n            </Drawer.Description>\n          </Drawer.Header>\n          <Form\n            onSubmit={(e) => {\n              e.preventDefault()\n              toast.success(\"Profile setup complete\", { position: \"top-center\" })\n              setIsProfileSetupDrawerOpen(false)\n              setIsRegistrationDrawerOpen(false)\n            }}\n          >\n            <Drawer.Body className=\"space-y-4\">\n              <Textarea\n                isRequired\n                label=\"Bio\"\n                placeholder=\"Tell us something about yourself\"\n                onInput={() => setIsTyping(true)}\n              />\n            </Drawer.Body>\n            <Drawer.Footer>\n              <Drawer.Close>Skip for now</Drawer.Close>\n              <Button type=\"submit\">Complete Setup</Button>\n            </Drawer.Footer>\n          </Form>\n        </Drawer.Content>\n      </Drawer>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/drawer/drawer-basic-demo": {
    "component": "@/components/docs/overlays/drawer/drawer-basic-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { buttonStyles, Drawer, TextField } from \"ui\"\n\nexport default function DrawerBasicDemo() {\n  return (\n    <Drawer>\n      <Drawer.Trigger className={buttonStyles({ appearance: \"outline\" })}>Login</Drawer.Trigger>\n      <Drawer.Content>\n        <Drawer.Header>\n          <Drawer.Title>Login</Drawer.Title>\n          <Drawer.Description>\n            Please enter your credentials to access your account.\n          </Drawer.Description>\n        </Drawer.Header>\n        <Drawer.Body className=\"space-y-4\">\n          <TextField label=\"Email\" type=\"email\" placeholder=\"john.doe@example.com\" />\n          <TextField label=\"Password\" type=\"password\" placeholder=\"••••••••••••\" isRevealable />\n        </Drawer.Body>\n        <Drawer.Footer>\n          <Drawer.Close className=\"w-full\">Login</Drawer.Close>\n        </Drawer.Footer>\n      </Drawer.Content>\n    </Drawer>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/drawer/drawer-sticky-demo": {
    "component": "@/components/docs/overlays/drawer/drawer-sticky-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { buttonStyles, Drawer } from \"ui\"\n\nexport default function DrawerStickyDemo() {\n  return (\n    <Drawer>\n      <Drawer.Trigger className={buttonStyles({ shape: \"circle\", appearance: \"outline\" })}>\n        Open\n      </Drawer.Trigger>\n      <Drawer.Content>\n        <Drawer.Header>The Beatles</Drawer.Header>\n        <Drawer.Body>\n          <div className=\"prose dark:prose-invert prose-zinc\">\n            <p>\n              Welcome to our Terms of Use. By accessing or using our services, you agree to be bound\n              by these terms. If you do not agree to these terms, please refrain from using our\n              services.\n            </p>\n            <h3> User Obligations</h3>\n            <h4>Account Responsibility</h4>\n            <p>\n              When you create an account with us, you are responsible for maintaining the\n              confidentiality of your account and password.\n            </p>{\" \"}\n            <p>\n              You agree to accept responsibility for all activities that occur under your account.\n              You must notify us immediately of any breach of security or unauthorized use of your\n              account.\n            </p>\n            <h4>Compliance with Laws</h4>\n            <p>\n              You agree to comply with all applicable laws, regulations, and policies in connection\n              with your use of our services. This includes adhering to intellectual property laws\n              and refraining from any unlawful behavior while using our platform.\n            </p>\n            <h3> Prohibited Activities</h3>\n            <p>\n              You are not permitted to access or attempt to access any of our services by any means\n              other than through the interface provided by us. Any form of hacking, bypassing, or\n              circumventing our security protocols is strictly prohibited.\n            </p>\n            <h4>Misuse of Content</h4>\n            <p>\n              You agree not to misuse, reproduce, distribute, or modify any content from our\n              services unless explicitly authorized by us. This includes engaging in activities such\n              as scraping, data mining, or using automated systems to extract data.\n            </p>\n            <h4>Harassment and Abuse</h4>\n            <p>\n              You are prohibited from using our services to harass, abuse, or harm other users. This\n              includes sending unsolicited messages, stalking, or engaging in any form of\n              cyberbullying. We reserve the right to terminate accounts found in violation of this\n              policy.\n            </p>\n            <h4>Ownership of Content</h4>\n            <p>\n              All content, trademarks, service marks, logos, and other intellectual property\n              displayed on our services are the property of their respective owners. You may not\n              use, copy, or distribute any content without prior written permission from the owner.\n            </p>\n            <h4>User-Generated Content</h4>\n            <p>\n              By submitting content to our services, you grant us a worldwide, royalty-free,\n              non-exclusive license to use, distribute, modify, and display that content for the\n              purpose of providing our services.\n            </p>\n            <p>\n              You retain all ownership rights to your content but agree to allow us to use it in\n              accordance with these terms.\n            </p>\n            <h3> Termination</h3>\n            <h4>Right to Terminate</h4>\n            We reserve the right to terminate or suspend your access to our services at any time,\n            without notice, for any reason, including but not limited to a breach of these terms.\n            Upon termination, your right to use our services will immediately cease.\n            <h4>Effect of Termination</h4>\n            Upon termination of your account, all provisions of these terms that, by their nature,\n            should survive termination shall remain in effect. This includes, but is not limited to,\n            ownership provisions, warranty disclaimers, and limitations of liability.\n            <h3> Limitation of Liability</h3>\n            <h4>Service Availability</h4>\n            We do not guarantee that our services will be available at all times or without\n            interruption. We are not liable for any downtime or technical issues that may prevent\n            access to our services.\n            <h4>No Warranties</h4>\n            Our services are provided \"as is\" and \"as available\" without any warranties of any kind,\n            whether express or implied. We do not warrant that our services will meet your\n            requirements or that they will be error-free or secure.\n            <h4>Limitation of Damages</h4>\n            In no event shall we be liable for any indirect, incidental, special, consequential, or\n            punitive damages arising out of or related to your use of our services. This includes,\n            but is not limited to, damages for loss of profits, data, or other intangibles.\n            <h3> Changes to These Terms</h3>\n            We reserve the right to modify or replace these terms at any time. If a revision is\n            material, we will provide at least 30 days' notice prior to any new terms taking effect.\n            What constitutes a material change will be determined at our sole discretion.\n            <h3> Governing Law</h3>\n            These terms shall be governed and construed in accordance with the laws of [Your\n            Jurisdiction], without regard to its conflict of law provisions. Any disputes arising\n            from or relating to these terms shall be resolved in the courts of [Your Jurisdiction].\n            <h3> Contact Information</h3>\n            If you have any questions about these terms, please contact us at xxx@example.com.\n          </div>\n        </Drawer.Body>\n        <Drawer.Footer>\n          <Drawer.Close shape=\"circle\">Close</Drawer.Close>\n        </Drawer.Footer>\n      </Drawer.Content>\n    </Drawer>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/drawer/drawer-controlled-demo": {
    "component": "@/components/docs/overlays/drawer/drawer-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Button, Drawer, TextField } from \"ui\"\n\nexport default function DrawerControlledDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button onPress={() => setIsOpen(!isOpen)} appearance=\"outline\">\n        Login\n      </Button>\n      <Drawer isOpen={isOpen} onOpenChange={setIsOpen}>\n        <Drawer.Content>\n          <Drawer.Header>\n            <Drawer.Title>Login</Drawer.Title>\n            <Drawer.Description>\n              Please enter your credentials to access your account.\n            </Drawer.Description>\n          </Drawer.Header>\n          <Drawer.Body className=\"flex flex-col gap-4\">\n            <TextField label=\"Email\" isRequired type=\"email\" placeholder=\"Enter your email\" />\n            <TextField\n              label=\"Password\"\n              isRequired\n              type=\"password\"\n              placeholder=\"Enter your password\"\n            />\n          </Drawer.Body>\n          <Drawer.Footer>\n            <Drawer.Close>Close</Drawer.Close>\n            <Button onPress={() => setIsOpen(false)}>Login</Button>\n          </Drawer.Footer>\n        </Drawer.Content>\n      </Drawer>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/drawer/drawer-without-notch-demo": {
    "component": "@/components/docs/overlays/drawer/drawer-without-notch-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { buttonStyles, Drawer } from \"ui\"\n\nexport default function DrawerWithoutNotchDemo() {\n  return (\n    <Drawer withNotch={false}>\n      <Drawer.Trigger className={buttonStyles({ shape: \"circle\", appearance: \"outline\" })}>\n        Open Drawer\n      </Drawer.Trigger>\n      <Drawer.Content>\n        <Drawer.Header>\n          <Drawer.Title>The Beatles</Drawer.Title>\n          <Drawer.Description>\n            The Beatles were an English rock band formed in Liverpool in 1960, comprising John\n            Lennon, Paul McCartney, George Harrison and Ringo Starr.\n          </Drawer.Description>\n        </Drawer.Header>\n        <Drawer.Footer>\n          <Drawer.Close shape=\"circle\">Close</Drawer.Close>\n        </Drawer.Footer>\n      </Drawer.Content>\n    </Drawer>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/tooltip/tooltip-delay-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-delay-demo",
    "raw": "\"use client\"\n\nimport { IconBrandGithub } from \"justd-icons\"\nimport { buttonStyles, Tooltip } from \"ui\"\n\nexport default function TooltipDelayDemo() {\n  return (\n    <div className=\"flex gap-2\">\n      <Tooltip delay={0}>\n        <Tooltip.Trigger\n          aria-label=\"Follow My Twitter\"\n          className={buttonStyles({\n            appearance: \"outline\",\n            size: \"square-petite\"\n          })}\n        >\n          <IconBrandGithub />\n        </Tooltip.Trigger>\n        <Tooltip.Content>Follow me on Github @irsyadadl</Tooltip.Content>\n      </Tooltip>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/tooltip/tooltip-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-demo",
    "raw": "\"use client\"\n\nimport { IconBrandX } from \"justd-icons\"\nimport { buttonStyles, Tooltip } from \"ui\"\n\nexport default function TooltipDemo() {\n  return (\n    <Tooltip>\n      <Tooltip.Trigger\n        aria-label=\"Follow My Twitter\"\n        className={buttonStyles({\n          appearance: \"outline\",\n          size: \"square-petite\"\n        })}\n      >\n        <IconBrandX />\n      </Tooltip.Trigger>\n      <Tooltip.Content>Follow me on X @irsyadadl</Tooltip.Content>\n    </Tooltip>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/tooltip/tooltip-placement-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-placement-demo",
    "raw": "\"use client\"\n\nimport { type TooltipProps } from \"react-aria-components\"\nimport { Button, Tooltip } from \"ui\"\n\ntype Placement = Pick<TooltipProps, \"placement\">[\"placement\"]\nconst placements: Placement[] = [\"bottom\", \"top\", \"left\", \"start\", \"right\", \"end\"]\nexport default function TooltipPlacementDemo() {\n  return (\n    <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-2 [&_.kbt32x]:w-full\">\n      {placements.map((placement, idx) => (\n        <Tooltip key={idx}>\n          <Button className=\"mx-auto\" size=\"small\" appearance=\"outline\">\n            {placement}\n          </Button>\n          <Tooltip.Content placement={placement}>\n            Tooltip shown at <strong>{placement}</strong>.\n          </Tooltip.Content>\n        </Tooltip>\n      ))}\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/tooltip/tooltip-without-arrow-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-without-arrow-demo",
    "raw": "\"use client\"\n\nimport { Badge, Description, Tooltip } from \"ui\"\n\nexport default function TooltipWithoutArrowDemo() {\n  return (\n    <Tooltip>\n      <Tooltip.Trigger aria-label=\"Fresh drop alert\">\n        <Badge shape=\"circle\">New</Badge>\n      </Tooltip.Trigger>\n      <Tooltip.Content showArrow={false}>\n        <strong className=\"font-semibold\">Fresh drop alert</strong> <br />\n        <Description>Scope the newest addition to our stash.</Description>\n      </Tooltip.Content>\n    </Tooltip>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/tooltip/tooltip-intent-demo": {
    "component": "@/components/docs/overlays/tooltip/tooltip-intent-demo",
    "raw": "\"use client\"\n\nimport { IconCircleInfo } from \"justd-icons\"\nimport { buttonStyles, Tooltip } from \"ui\"\n\nexport default function TooltipIntentDemo() {\n  return (\n    <Tooltip>\n      <Tooltip.Trigger\n        aria-label=\"Follow My Twitter\"\n        className={buttonStyles({\n          appearance: \"outline\",\n          size: \"square-petite\"\n        })}\n      >\n        <IconCircleInfo />\n      </Tooltip.Trigger>\n      <Tooltip.Content intent=\"inverse\">\n        <div className=\"relative\">\n          <strong className=\"font-semibold\">Attention</strong>\n          <p>This is a warning message.</p>\n        </div>\n      </Tooltip.Content>\n    </Tooltip>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/popover/popover-controlled-demo": {
    "component": "@/components/docs/overlays/popover/popover-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { wait } from \"@/resources/lib/utils\"\nimport { IconCircleCheckFill, IconTrash } from \"justd-icons\"\nimport { Button, Loader, Popover } from \"ui\"\n\nexport default function PopoverControlledDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  const [loading, setLoading] = React.useState<\"idle\" | \"loading\" | \"success\">(\"idle\")\n  const triggerRef = React.useRef(null)\n\n  const deleteAccount = async () => {\n    setLoading(\"loading\")\n    await wait(3000)\n    setLoading(\"success\")\n\n    await wait(2000)\n    setLoading(\"idle\")\n    setIsOpen(false)\n  }\n  return (\n    <>\n      <Button ref={triggerRef} onPress={() => setIsOpen(true)} intent=\"danger\">\n        Delete Account\n      </Button>\n      <Popover.Content\n        triggerRef={triggerRef}\n        isOpen={isOpen}\n        onOpenChange={setIsOpen}\n        className=\"sm:max-w-sm\"\n      >\n        <Popover.Header>\n          <Popover.Title>Confirm Deletion</Popover.Title>\n          <Popover.Description>\n            Are you sure you want to delete your account? This action cannot be undone.\n          </Popover.Description>\n        </Popover.Header>\n        <Popover.Footer>\n          <Button appearance=\"outline\" onPress={() => setIsOpen(false)} className=\"mr-2\">\n            Cancel\n          </Button>\n          <Button\n            isDisabled={loading === \"loading\"}\n            onPress={deleteAccount}\n            intent={[\"loading\", \"idle\"].includes(loading) ? \"danger\" : \"primary\"}\n          >\n            {loading === \"loading\" ? (\n              <>\n                <Loader variant=\"spin\" />\n                Deleting...\n              </>\n            ) : loading === \"success\" ? (\n              <>\n                <IconCircleCheckFill />\n                Deleted\n              </>\n            ) : (\n              <>\n                <IconTrash />\n                Delete\n              </>\n            )}\n          </Button>\n        </Popover.Footer>\n      </Popover.Content>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/popover/popover-placement-demo": {
    "component": "@/components/docs/overlays/popover/popover-placement-demo",
    "raw": "\"use client\"\n\nimport { type TooltipProps } from \"react-aria-components\"\nimport { Button, Popover } from \"ui\"\n\ntype Placement = Pick<TooltipProps, \"placement\">[\"placement\"]\nconst placements: Placement[] = [\"bottom\", \"top\", \"left\", \"start\", \"right\", \"end\"]\nexport default function PopoverPlacementDemo() {\n  return (\n    <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-2 [&_.kbt32x]:w-full\">\n      {placements.map((placement, idx) => (\n        <Popover key={idx}>\n          <Button className=\"mx-auto\" size=\"small\" appearance=\"outline\">\n            {placement}\n          </Button>\n          <Popover.Content placement={placement}>Popover shown at {placement}.</Popover.Content>\n        </Popover>\n      ))}\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/popover/popover-arrow-demo": {
    "component": "@/components/docs/overlays/popover/popover-arrow-demo",
    "raw": "\"use client\"\n\nimport { IconBell } from \"justd-icons\"\nimport { Button, Popover } from \"ui\"\n\nexport default function PopoverArrowDemo() {\n  return (\n    <Popover>\n      <Button appearance=\"outline\" size=\"square-petite\">\n        <IconBell />\n      </Button>\n      <Popover.Content showArrow={false} className=\"min-w-72\">\n        You have 3 new notifications.\n      </Popover.Content>\n    </Popover>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/popover/popover-custom-close": {
    "component": "@/components/docs/overlays/popover/popover-custom-close",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Button, Checkbox, Form, Link, Popover, TextField } from \"ui\"\n\nexport default function PopoverCustomClose() {\n  return (\n    <Popover>\n      <Button>Login</Button>\n      <Popover.Content className=\"sm:min-w-96\">\n        <Popover.Header className=\"mb-4\">\n          <Popover.Title>Login</Popover.Title>\n          <Popover.Description>Enter your credentials to sign in.</Popover.Description>\n        </Popover.Header>\n        <Form onSubmit={() => {}}>\n          <Popover.Body>\n            <div className=\"space-y-4\">\n              <TextField isRequired type=\"email\" label=\"Email\" placeholder=\"Enter your email\" />\n              <TextField\n                isRequired\n                label=\"Password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n              />\n              <div className=\"flex justify-between items-center\">\n                <Checkbox name=\"remember-me\">Remember me</Checkbox>\n                <Link intent=\"primary\" href=\"#\">\n                  Forgot password?\n                </Link>\n              </div>\n            </div>\n          </Popover.Body>\n          <Popover.Footer>\n            <Popover.Close>Cancel</Popover.Close>\n            <Button type=\"submit\">Login</Button>\n          </Popover.Footer>\n        </Form>\n      </Popover.Content>\n    </Popover>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/popover/popover-trigger-demo": {
    "component": "@/components/docs/overlays/popover/popover-trigger-demo",
    "raw": "\"use client\"\n\nimport { Avatar, Button, Popover } from \"ui\"\n\nexport default function PopoverTriggerDemo() {\n  return (\n    <Popover>\n      <Popover.Trigger aria-label=\"Open Popover\">\n        <Avatar alt=\"irsyadadl\" src=\"https://github.com/irsyadadl.png\" />\n      </Popover.Trigger>\n      <Popover.Content className=\"min-w-72\">\n        <Popover.Header>\n          <Popover.Title>Email</Popover.Title>\n          <Popover.Description>We'll send you an email to log in.</Popover.Description>\n        </Popover.Header>\n        <Popover.Footer>\n          <Button>Send Login Link</Button>\n        </Popover.Footer>\n      </Popover.Content>\n    </Popover>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/popover/popover-demo": {
    "component": "@/components/docs/overlays/popover/popover-demo",
    "raw": "\"use client\"\n\nimport { Button, Popover } from \"ui\"\n\nexport default function PopoverDemo() {\n  return (\n    <Popover>\n      <Button>Forgot Password</Button>\n      <Popover.Content className=\"min-w-72\">\n        <Popover.Header>\n          <Popover.Title>Email</Popover.Title>\n          <Popover.Description>We'll send you an email to log in.</Popover.Description>\n        </Popover.Header>\n        <Popover.Footer>\n          <Button>Send Login Link</Button>\n        </Popover.Footer>\n      </Popover.Content>\n    </Popover>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal/modal-triggered-by-menu-demo": {
    "component": "@/components/docs/overlays/modal/modal-triggered-by-menu-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { wait } from \"@/resources/lib/utils\"\nimport { IconDotsVertical } from \"justd-icons\"\nimport { Button, buttonStyles, Loader, Menu, Modal } from \"ui\"\n\nexport default function ModalTriggeredByMenuDemo() {\n  const [state, setState] = React.useState<string | null>(null)\n  const [loading, setLoading] = React.useState<boolean>(false)\n  const closeModal = () => setState(null)\n  const executeAction = (action: string) => {\n    console.log(`${action} is executing`)\n    setLoading(true)\n    wait(2000).then(() => {\n      setLoading(false)\n      closeModal()\n    })\n  }\n\n  const actionType = (t: string | null) => {\n    switch (t) {\n      case \"delete\":\n        return {\n          title: \"Delete User\",\n          description: \"Are you sure you want to delete this item?\",\n          confirmText: \"Delete\",\n          action: () => executeAction(t)\n        }\n\n      case \"ban\":\n        return {\n          title: \"Ban User\",\n          description: \"Are you sure you want to ban this user?\",\n          confirmText: \"Ban\",\n          action: () => executeAction(t)\n        }\n\n      case \"restore\":\n        return {\n          title: \"Restore User\",\n          description: \"Are you sure you want to restore this user?\",\n          confirmText: \"Restore\",\n          action: () => executeAction(t)\n        }\n      default:\n        return\n    }\n  }\n  return (\n    <>\n      <Menu>\n        <Menu.Trigger className={buttonStyles({ appearance: \"outline\" })}>\n          <IconDotsVertical />\n        </Menu.Trigger>\n        <Menu.Content placement=\"bottom\">\n          <Menu.Item onAction={() => setState(\"delete\")}>Delete</Menu.Item>\n          <Menu.Item isDanger onAction={() => setState(\"ban\")}>\n            Ban\n          </Menu.Item>\n          <Menu.Item onAction={() => setState(\"restore\")}>Restore</Menu.Item>\n        </Menu.Content>\n      </Menu>\n\n      <Modal.Content isOpen={state !== null} onOpenChange={closeModal}>\n        <Modal.Header>\n          <Modal.Title>{actionType(state)?.title}</Modal.Title>\n          <Modal.Description>{actionType(state)?.description}</Modal.Description>\n        </Modal.Header>\n        <Modal.Footer>\n          <Modal.Close>Cancel</Modal.Close>\n          <Button\n            intent={state === \"ban\" ? \"danger\" : \"primary\"}\n            className=\"min-w-24\"\n            isDisabled={loading}\n            onPress={actionType(state)?.action}\n          >\n            {loading ? <Loader variant=\"spin\" /> : actionType(state)?.confirmText}\n          </Button>\n        </Modal.Footer>\n      </Modal.Content>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal/modal-custom-classnames-demo": {
    "component": "@/components/docs/overlays/modal/modal-custom-classnames-demo",
    "raw": "\"use client\"\n\nimport { Button, Modal } from \"ui\"\n\nexport default function ModalCustomClassnamesDemo() {\n  return (\n    <Modal>\n      <Button>Open</Button>\n      <Modal.Content\n        classNames={{\n          overlay: \"bg-white/40 dark:bg-black/40 backdrop-blur\",\n          content: \"bg-bg\"\n        }}\n      >\n        <Modal.Header title=\"Custom Classnames\" description=\"This modal has custom class names.\" />\n        <Modal.Footer>\n          <Modal.Close>Close</Modal.Close>\n        </Modal.Footer>\n      </Modal.Content>\n    </Modal>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal/modal-nested-demo": {
    "component": "@/components/docs/overlays/modal/modal-nested-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { toast } from \"sonner\"\nimport { Button, Form, Modal, Textarea } from \"ui\"\n\nexport default function ModalNestedDemo() {\n  const [isRegistrationModalOpen, setIsRegistrationModalOpen] = React.useState(false)\n  const [isProfileSetupModalOpen, setIsProfileSetupModalOpen] = React.useState(false)\n  const [isTyping, setIsTyping] = React.useState(false)\n\n  return (\n    <>\n      <Button onPress={() => setIsRegistrationModalOpen(true)}>Register</Button>\n\n      <Modal.Content\n        isOpen={isRegistrationModalOpen}\n        onOpenChange={() => setIsRegistrationModalOpen(false)}\n        aria-label=\"Confirm Registration\"\n      >\n        <Modal.Header>\n          <Modal.Title>Confirm Registration</Modal.Title>\n          <Modal.Description>Please confirm your registration details.</Modal.Description>\n        </Modal.Header>\n        <Modal.Footer>\n          <Modal.Close>Cancel</Modal.Close>\n          <Button\n            onPress={() => {\n              setIsProfileSetupModalOpen(true)\n            }}\n          >\n            Confirm\n          </Button>\n        </Modal.Footer>\n      </Modal.Content>\n\n      <Modal.Content\n        isOpen={isProfileSetupModalOpen}\n        onOpenChange={(isOpen) => {\n          if (!isOpen && isTyping) {\n            toast(\"Profile setup incomplete\")\n          }\n          setIsProfileSetupModalOpen(isOpen)\n        }}\n        aria-label=\"Profile Setup\"\n      >\n        <Modal.Header>\n          <Modal.Title>Set Up Your Profile</Modal.Title>\n          <Modal.Description>\n            We need a bit more information before you can get started.\n          </Modal.Description>\n        </Modal.Header>\n        <Form\n          onSubmit={(e) => {\n            e.preventDefault()\n            toast.success(\"Profile setup complete\")\n            setIsProfileSetupModalOpen(false)\n            setIsRegistrationModalOpen(false)\n          }}\n        >\n          <Modal.Body className=\"space-y-4\">\n            <Textarea\n              isRequired\n              label=\"Bio\"\n              placeholder=\"Tell us something about yourself\"\n              onInput={() => setIsTyping(true)}\n            />\n          </Modal.Body>\n          <Modal.Footer>\n            <Modal.Close>Skip for now</Modal.Close>\n            <Button type=\"submit\">Complete Setup</Button>\n          </Modal.Footer>\n        </Form>\n      </Modal.Content>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal/modal-size-demo": {
    "component": "@/components/docs/overlays/modal/modal-size-demo",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { Button, Grid, Modal } from \"ui\"\n\ntype Size = Pick<React.ComponentProps<typeof Modal.Content>, \"size\">[\"size\"]\nconst sizes: Size[] = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"2xl\", \"3xl\", \"4xl\", \"5xl\"]\nexport default function ModalSizeDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  const [modalSize, setModalSize] = React.useState<Size>(\"md\")\n\n  const handlePress = (size: Size, open: boolean) => {\n    setModalSize(size)\n    setIsOpen(open)\n  }\n  return (\n    <>\n      <Grid columns={{ initial: 2, sm: 3, lg: 4 }} gap={2}>\n        {sizes.map((size, idx) => (\n          <Grid.Item key={idx}>\n            <Button appearance=\"outline\" onPress={() => handlePress(size, true)}>\n              Open {size}\n            </Button>\n          </Grid.Item>\n        ))}\n      </Grid>\n\n      <Modal.Content isOpen={isOpen} onOpenChange={setIsOpen} size={modalSize}>\n        <Modal.Header>\n          <Modal.Title>Project Update</Modal.Title>\n          <Modal.Description>\n            Dive deep into our project’s latest updates where we've streamlined workflow and\n            improved user interfaces.\n          </Modal.Description>\n        </Modal.Header>\n        <Modal.Footer>\n          <Button appearance=\"outline\" onPress={() => setIsOpen(false)}>\n            Close\n          </Button>\n          <Button onPress={() => setIsOpen(false)}>Confirm</Button>\n        </Modal.Footer>\n      </Modal.Content>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal/modal-sticky-demo": {
    "component": "@/components/docs/overlays/modal/modal-sticky-demo",
    "raw": "\"use client\"\n\nimport { Button, Modal } from \"ui\"\n\nexport default function ModalStickyDemo() {\n  return (\n    <Modal>\n      <Button>Read</Button>\n      <Modal.Content size=\"xl\">\n        <Modal.Header>\n          <Modal.Title>Terms of Use</Modal.Title>\n          <Modal.Description>\n            If you do not agree to these terms, please refrain from using our services.\n          </Modal.Description>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"prose dark:prose-invert prose-zinc\">\n            <p>\n              Welcome to our Terms of Use. By accessing or using our services, you agree to be bound\n              by these terms. If you do not agree to these terms, please refrain from using our\n              services.\n            </p>\n            <h3> User Obligations</h3>\n            <h4>Account Responsibility</h4>\n            <p>\n              When you create an account with us, you are responsible for maintaining the\n              confidentiality of your account and password.\n            </p>{\" \"}\n            <p>\n              You agree to accept responsibility for all activities that occur under your account.\n              You must notify us immediately of any breach of security or unauthorized use of your\n              account.\n            </p>\n            <h4>Compliance with Laws</h4>\n            <p>\n              You agree to comply with all applicable laws, regulations, and policies in connection\n              with your use of our services. This includes adhering to intellectual property laws\n              and refraining from any unlawful behavior while using our platform.\n            </p>\n            <h3> Prohibited Activities</h3>\n            <p>\n              You are not permitted to access or attempt to access any of our services by any means\n              other than through the interface provided by us. Any form of hacking, bypassing, or\n              circumventing our security protocols is strictly prohibited.\n            </p>\n            <h4>Misuse of Content</h4>\n            <p>\n              You agree not to misuse, reproduce, distribute, or modify any content from our\n              services unless explicitly authorized by us. This includes engaging in activities such\n              as scraping, data mining, or using automated systems to extract data.\n            </p>\n            <h4>Harassment and Abuse</h4>\n            <p>\n              You are prohibited from using our services to harass, abuse, or harm other users. This\n              includes sending unsolicited messages, stalking, or engaging in any form of\n              cyberbullying. We reserve the right to terminate accounts found in violation of this\n              policy.\n            </p>\n            <h4>Ownership of Content</h4>\n            <p>\n              All content, trademarks, service marks, logos, and other intellectual property\n              displayed on our services are the property of their respective owners. You may not\n              use, copy, or distribute any content without prior written permission from the owner.\n            </p>\n            <h4>User-Generated Content</h4>\n            <p>\n              By submitting content to our services, you grant us a worldwide, royalty-free,\n              non-exclusive license to use, distribute, modify, and display that content for the\n              purpose of providing our services.\n            </p>\n            <p>\n              You retain all ownership rights to your content but agree to allow us to use it in\n              accordance with these terms.\n            </p>\n            <h3> Termination</h3>\n            <h4>Right to Terminate</h4>\n            We reserve the right to terminate or suspend your access to our services at any time,\n            without notice, for any reason, including but not limited to a breach of these terms.\n            Upon termination, your right to use our services will immediately cease.\n            <h4>Effect of Termination</h4>\n            Upon termination of your account, all provisions of these terms that, by their nature,\n            should survive termination shall remain in effect. This includes, but is not limited to,\n            ownership provisions, warranty disclaimers, and limitations of liability.\n            <h3> Limitation of Liability</h3>\n            <h4>Service Availability</h4>\n            We do not guarantee that our services will be available at all times or without\n            interruption. We are not liable for any downtime or technical issues that may prevent\n            access to our services.\n            <h4>No Warranties</h4>\n            Our services are provided \"as is\" and \"as available\" without any warranties of any kind,\n            whether express or implied. We do not warrant that our services will meet your\n            requirements or that they will be error-free or secure.\n            <h4>Limitation of Damages</h4>\n            In no event shall we be liable for any indirect, incidental, special, consequential, or\n            punitive damages arising out of or related to your use of our services. This includes,\n            but is not limited to, damages for loss of profits, data, or other intangibles.\n            <h3> Changes to These Terms</h3>\n            We reserve the right to modify or replace these terms at any time. If a revision is\n            material, we will provide at least 30 days' notice prior to any new terms taking effect.\n            What constitutes a material change will be determined at our sole discretion.\n            <h3> Governing Law</h3>\n            These terms shall be governed and construed in accordance with the laws of [Your\n            Jurisdiction], without regard to its conflict of law provisions. Any disputes arising\n            from or relating to these terms shall be resolved in the courts of [Your Jurisdiction].\n            <h3> Contact Information</h3>\n            If you have any questions about these terms, please contact us at [Your Contact\n            Information].\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Modal.Close>Close</Modal.Close>\n          <Button>Accept</Button>\n        </Modal.Footer>\n      </Modal.Content>\n    </Modal>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal/alert-dialog-demo": {
    "component": "@/components/docs/overlays/modal/alert-dialog-demo",
    "raw": "\"use client\"\n\nimport { buttonStyles, Modal } from \"ui\"\n\nexport default function AlertDialogDemo() {\n  return (\n    <Modal>\n      <Modal.Trigger className={buttonStyles({ intent: \"danger\" })}>Delete</Modal.Trigger>\n      <Modal.Content role=\"alertdialog\">\n        <Modal.Header>\n          <Modal.Title>Delete file</Modal.Title>\n          <Modal.Description>\n            This will permanently delete the selected file. Continue?\n          </Modal.Description>\n        </Modal.Header>\n        <Modal.Footer>\n          <Modal.Close appearance=\"outline\">Cancel</Modal.Close>\n          <Modal.Close appearance=\"solid\" intent=\"danger\">\n            Continue\n          </Modal.Close>\n        </Modal.Footer>\n      </Modal.Content>\n    </Modal>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal/modal-blur-demo": {
    "component": "@/components/docs/overlays/modal/modal-blur-demo",
    "raw": "\"use client\"\n\nimport { Button, Form, Modal, TextField } from \"ui\"\n\nexport default function ModalBlurDemo() {\n  return (\n    <Modal>\n      <Button>Turn on 2FA</Button>\n      <Modal.Content isBlurred>\n        <Modal.Header>\n          <Modal.Title>Nice! Let's beef up your account.</Modal.Title>\n          <Modal.Description>\n            2FA beefs up your account's defense. Pop in your password to keep going.\n          </Modal.Description>\n        </Modal.Header>\n        <Form onSubmit={() => {}}>\n          <TextField\n            isRequired\n            autoFocus\n            label=\"Password\"\n            type=\"password\"\n            placeholder=\"Enter your password\"\n          />\n          <Modal.Footer>\n            <Modal.Close>Cancel</Modal.Close>\n            <Button type=\"submit\">Turn on 2FA</Button>\n          </Modal.Footer>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal/modal-controlled-demo": {
    "component": "@/components/docs/overlays/modal/modal-controlled-demo",
    "raw": "\"use client\"\n\nimport { useState } from \"react\"\n\nimport { Button, Modal } from \"ui\"\n\nexport default function ModalControlledDemo() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Button onPress={() => setOpen(true)} intent=\"primary\">\n        Subscribe\n      </Button>\n      <Modal.Content isOpen={open} onOpenChange={setOpen}>\n        <Modal.Header>\n          <Modal.Title>Subscribe to Our Newsletter</Modal.Title>\n          <Modal.Description>\n            Get the latest news and updates right to your inbox.\n          </Modal.Description>\n        </Modal.Header>\n        <Modal.Footer>\n          <Button onPress={() => setOpen(false)}>Sign Up</Button>\n        </Modal.Footer>\n      </Modal.Content>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal/modal-custom-style-demo": {
    "component": "@/components/docs/overlays/modal/modal-custom-style-demo",
    "raw": "\"use client\"\n\nimport { Button, Form, Modal, Note, TextField } from \"ui\"\n\nexport default function ModalCustomStyleDemo() {\n  return (\n    <Modal>\n      <Button intent=\"danger\">Delete Project</Button>\n      <Modal.Content role=\"alertdialog\">\n        <Modal.Header\n          className=\"bg-bg border-b mb-4\"\n          title=\"Delete Project\"\n          description=\"This project’s gonna get wiped, including all its Deployments, Domains, Env Variables, Serverless Functions, and Settings.\"\n        >\n          <Note intent=\"danger\">No undo button here, so be sure!</Note>\n        </Modal.Header>\n        <Form onSubmit={() => {}}>\n          <Modal.Body className=\"space-y-4\">\n            <TextField\n              isRequired\n              autoFocus\n              label=\"Enter the project name\"\n              type=\"text\"\n              placeholder=\"team/project-name\"\n            />\n            <TextField isRequired label='To verify, type \"delete my project\" below' type=\"text\" />\n          </Modal.Body>\n          <Modal.Footer>\n            <Modal.Close>Cancel</Modal.Close>\n            <Button intent=\"danger\" type=\"submit\">\n              Delete Project\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal/modal-demo": {
    "component": "@/components/docs/overlays/modal/modal-demo",
    "raw": "\"use client\"\n\nimport { Button, Form, Modal, TextField } from \"ui\"\n\nexport default function ModalDemo() {\n  return (\n    <Modal>\n      <Button>Turn on 2FA</Button>\n      <Modal.Content>\n        <Modal.Header>\n          <Modal.Title>Nice! Let's beef up your account.</Modal.Title>\n          <Modal.Description>\n            2FA beefs up your account's defense. Pop in your password to keep going.\n          </Modal.Description>\n        </Modal.Header>\n        <Form onSubmit={() => {}}>\n          <TextField\n            isRequired\n            autoFocus\n            label=\"Password\"\n            type=\"password\"\n            placeholder=\"Enter your password\"\n          />\n          <Modal.Footer>\n            <Modal.Close>Cancel</Modal.Close>\n            <Button type=\"submit\">Turn on 2FA</Button>\n          </Modal.Footer>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet/sheet-custom-style-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-custom-style-demo",
    "raw": "\"use client\"\n\nimport { Button, Form, Note, Sheet, TextField } from \"ui\"\n\nexport default function SheetCustomStyleDemo() {\n  return (\n    <Sheet>\n      <Button intent=\"warning\">Archive Project</Button>\n      <Sheet.Content role=\"dialog\">\n        <Sheet.Header\n          className=\"bg-bg border-b mb-4\"\n          title=\"Archive Project\"\n          description=\"Archiving this project will disable access and hide it from active projects.\"\n        >\n          <Note intent=\"warning\">You can restore the project anytime from the archive!</Note>\n        </Sheet.Header>\n        <Form className=\"overflow-y-auto flex-1\" onSubmit={() => {}}>\n          <Sheet.Body className=\"space-y-4\">\n            <TextField\n              isRequired\n              autoFocus\n              label=\"Confirm by typing the project name\"\n              type=\"text\"\n              placeholder=\"team/project-name\"\n            />\n            <TextField isRequired label='To verify, type \"archive my project\" below' type=\"text\" />\n          </Sheet.Body>\n          <Sheet.Footer>\n            <Sheet.Close>Cancel</Sheet.Close>\n            <Button intent=\"warning\" type=\"submit\">\n              Archive Project\n            </Button>\n          </Sheet.Footer>\n        </Form>\n      </Sheet.Content>\n    </Sheet>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet/sheet-custom-close-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-custom-close-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Button, Checkbox, CheckboxGroup, Sheet } from \"ui\"\n\nexport default function SheetControlledDemo() {\n  return (\n    <Sheet>\n      <Button appearance=\"outline\">Notifications</Button>\n      <Sheet.Content aria-label=\"Notifications\">\n        <Sheet.Header>\n          <Sheet.Title>Manage Notifications</Sheet.Title>\n          <Sheet.Description>Adjust your notification settings below.</Sheet.Description>\n        </Sheet.Header>\n        <Sheet.Body>\n          <CheckboxGroup aria-label=\"Notification Settings\">\n            <Checkbox\n              value=\"n1\"\n              label=\"Email Notifications\"\n              description=\"Receive updates via email.\"\n            />\n            <Checkbox\n              value=\"n2\"\n              label=\"SMS Notifications\"\n              description=\"Receive updates via SMS messages.\"\n            />\n            <Checkbox\n              value=\"n3\"\n              label=\"Push Notifications\"\n              description=\"Receive real-time notifications on your device.\"\n            />\n          </CheckboxGroup>\n        </Sheet.Body>\n        <Sheet.Footer>\n          <Sheet.Close>Cancel</Sheet.Close>\n          <Button intent=\"primary\">Save Settings</Button>\n        </Sheet.Footer>\n      </Sheet.Content>\n    </Sheet>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet/sheet-menu-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-menu-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport {\n  IconBook,\n  IconBookOpen,\n  IconBrandCopilot,\n  IconBrandGithub,\n  IconBuilding,\n  IconChartBar,\n  IconCodeBrackets,\n  IconFilter,\n  IconGear,\n  IconGlobe,\n  IconHeart,\n  IconLogout,\n  IconMessages,\n  IconPeople,\n  IconPerson,\n  IconStar\n} from \"justd-icons\"\nimport { Group } from \"react-aria-components\"\nimport { Avatar, Button, Checkbox, Description, Menu, Modal, Select, Sheet, TextField } from \"ui\"\n\nexport default function SheetMenuDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  const openModal = () => setIsOpen(true)\n  const closeModal = () => setIsOpen(false)\n  return (\n    <>\n      <Modal.Content isOpen={isOpen} onOpenChange={setIsOpen}>\n        <Modal.Header>\n          <Modal.Title>Edit status</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"space-y-4\">\n            <TextField\n              prefix={<IconBrandGithub />}\n              label=\"Status\"\n              placeholder=\"What's your status?\"\n            />\n            <Group>\n              <Checkbox>Busy</Checkbox>\n              <Description>\n                When others mention you, assign you, or request your review, GitHub will let them\n                know that you have limited availability.\n              </Description>\n            </Group>\n            <Select label=\"Clear Status\">\n              <Select.Trigger />\n              <Select.List>\n                <Select.Option>Never</Select.Option>\n                <Select.Option>in 30 Minutes</Select.Option>\n                <Select.Option>in 1 Hour</Select.Option>\n                <Select.Option>in 8 Hours</Select.Option>\n                <Select.Option>after Today</Select.Option>\n                <Select.Option>after a Week</Select.Option>\n                <Select.Option>after a Month</Select.Option>\n              </Select.List>\n            </Select>\n            <Select label=\"Visible to\">\n              <Select.List>\n                <Select.Option>Everyone</Select.Option>\n                <Select.Option>Organization</Select.Option>\n                <Select.Option>Public</Select.Option>\n              </Select.List>\n            </Select>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Modal.Close>Clear Status</Modal.Close>\n          <Button onPress={closeModal}>Set Status</Button>\n        </Modal.Footer>\n      </Modal.Content>\n      <Sheet>\n        <Sheet.Trigger aria-label=\"Open menu\">\n          <Avatar src=\"https://github.com/irsyadadl.png\" alt=\"irsyadadl\" />\n        </Sheet.Trigger>\n        <Sheet.Content closeButton={false}>\n          <Sheet.Header className=\"flex border-b p-4 sticky top-0 bg-overlay flex-row items-center gap-x-3 mb-2\">\n            <Avatar src=\"https://github.com/irsyadadl.png\" alt=\"irsyadadl\" />\n            <div>\n              <Sheet.Title>irsyadadl</Sheet.Title>\n              <Sheet.Description>Irsyad A. Panjaitan</Sheet.Description>\n            </div>\n          </Sheet.Header>\n          <Sheet.Body className=\"px-0 sm:px-0\">\n            <Menu.Primitive className=\"divide-y [&_.xss3]:p-2\">\n              <Menu.Section>\n                <Menu.Item onAction={openModal}>\n                  <IconBrandGithub />\n                  Edit Status\n                </Menu.Item>\n              </Menu.Section>\n              <Menu.Section>\n                <Menu.Item>\n                  <IconPerson />\n                  Your profile\n                </Menu.Item>\n                <Menu.Item>\n                  <IconBook /> Your repositories\n                </Menu.Item>\n                <Menu.Item>\n                  <IconBrandCopilot /> Your Copilot\n                </Menu.Item>\n                <Menu.Item>\n                  <IconChartBar /> Your projects\n                </Menu.Item>\n                <Menu.Item>\n                  <IconStar /> Your stars\n                </Menu.Item>\n                <Menu.Item>\n                  <IconCodeBrackets /> Your gists\n                </Menu.Item>\n                <Menu.Item>\n                  <IconBuilding /> Your organizations\n                </Menu.Item>\n                <Menu.Item>\n                  <IconGlobe /> Your enterprises\n                </Menu.Item>\n                <Menu.Item>\n                  <IconHeart />\n                  Your sponsors\n                </Menu.Item>\n              </Menu.Section>\n              <Menu.Section>\n                <Menu.Item>\n                  <IconFilter /> Feature preview\n                </Menu.Item>\n                <Menu.Item>\n                  <IconGear />\n                  Settings\n                </Menu.Item>\n              </Menu.Section>\n              <Menu.Section>\n                <Menu.Item>\n                  <IconBookOpen /> GitHub Docs\n                </Menu.Item>\n                <Menu.Item>\n                  <IconPeople /> GitHub Support\n                </Menu.Item>\n                <Menu.Item>\n                  <IconMessages /> GitHub Community\n                </Menu.Item>\n              </Menu.Section>\n              <Menu.Section>\n                <Menu.Item>\n                  <IconLogout /> Sign out\n                </Menu.Item>\n              </Menu.Section>\n            </Menu.Primitive>\n          </Sheet.Body>\n        </Sheet.Content>\n      </Sheet>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet/sheet-controlled-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Button, Sheet, Textarea } from \"ui\"\n\nexport default function SheetControlledDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button onPress={() => setIsOpen(true)}>Feedback</Button>\n      <Sheet.Content isOpen={isOpen} onOpenChange={setIsOpen}>\n        <Sheet.Header>\n          <Sheet.Title>Submit Feedback</Sheet.Title>\n          <Sheet.Description>\n            Please let us know your thoughts and how we can improve our service.\n          </Sheet.Description>\n        </Sheet.Header>\n        <Sheet.Body>\n          <Textarea label=\"Your Feedback\" placeholder=\"Type your feedback here...\" />\n        </Sheet.Body>\n        <Sheet.Footer>\n          <Button appearance=\"outline\" onPress={() => setIsOpen(false)}>\n            Close\n          </Button>\n          <Button intent=\"primary\" onPress={() => setIsOpen(false)}>\n            Submit Feedback\n          </Button>\n        </Sheet.Footer>\n      </Sheet.Content>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet/sheet-position-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-position-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Button, Sheet } from \"ui\"\nimport { titleCase } from \"usemods\"\n\ntype Side = \"left\" | \"right\" | \"top\" | \"bottom\"\nexport default function SheetPositionDemo() {\n  const [sheetSide, setSheetSide] = React.useState<Side>(\"left\")\n  const [isOpen, setIsOpen] = React.useState(false)\n\n  const sides: Side[] = [\"left\", \"right\", \"top\", \"bottom\"]\n\n  const pressHandler = (side: Side, open: boolean) => {\n    setSheetSide(side)\n    setIsOpen(open)\n  }\n\n  return (\n    <>\n      <div className=\"grid grid-cols-2 gap-2\">\n        {sides.map((side, idx) => (\n          <Button appearance=\"outline\" onPress={() => pressHandler(side, true)} key={idx}>\n            {titleCase(side)}\n          </Button>\n        ))}\n      </div>\n      <Sheet.Content isOpen={isOpen} onOpenChange={setIsOpen} side={sheetSide}>\n        <Sheet.Header>\n          <Sheet.Title>{titleCase(sheetSide)}</Sheet.Title>\n          <Sheet.Description>The sheet will go from {sheetSide} side.</Sheet.Description>\n        </Sheet.Header>\n      </Sheet.Content>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet/sheet-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-demo",
    "raw": "\"use client\"\n\nimport { Button, Sheet, Switch, TextField } from \"ui\"\n\nexport default function SheetDemo() {\n  return (\n    <Sheet>\n      <Button appearance=\"outline\">Edit Settings</Button>\n      <Sheet.Content>\n        <Sheet.Header>\n          <Sheet.Title>Update User Settings</Sheet.Title>\n          <Sheet.Description>Adjust your preferences and configurations here.</Sheet.Description>\n        </Sheet.Header>\n        <Sheet.Body className=\"space-y-4\">\n          <TextField label=\"Username\" type=\"text\" placeholder=\"Enter your username\" />\n          <TextField label=\"Email\" type=\"email\" placeholder=\"Enter your email address\" />\n          <Switch>Enable Notifications</Switch>\n        </Sheet.Body>\n        <Sheet.Footer>\n          <Sheet.Close>Cancel</Sheet.Close>\n          <Button intent=\"primary\" type=\"submit\">\n            Save Changes\n          </Button>\n        </Sheet.Footer>\n      </Sheet.Content>\n    </Sheet>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet/sheet-stack-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-stack-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Button, Sheet } from \"ui\"\n\nexport default function SheetStackDemo() {\n  return (\n    <Sheet>\n      <Button appearance=\"outline\">Stack</Button>\n      <Sheet.Content isStack={false}>\n        <Sheet.Header>\n          <Sheet.Title>Not Stacked</Sheet.Title>\n          <Sheet.Description>This sheet is not stacked.</Sheet.Description>\n        </Sheet.Header>\n        <Sheet.Footer>\n          <Sheet.Close>Cancel</Sheet.Close>\n          <Button intent=\"primary\">Save Changes</Button>\n        </Sheet.Footer>\n      </Sheet.Content>\n    </Sheet>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet/sheet-sticky-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-sticky-demo",
    "raw": "\"use client\"\n\nimport { Button, Sheet } from \"ui\"\n\nexport default function SheetStickyDemo() {\n  return (\n    <Sheet>\n      <Button>Read</Button>\n      <Sheet.Content>\n        <Sheet.Header>\n          <Sheet.Title>Terms of Use</Sheet.Title>\n          <Sheet.Description>\n            If you do not agree to these terms, please refrain from using our services.\n          </Sheet.Description>\n        </Sheet.Header>\n        <Sheet.Body>\n          <div className=\"prose dark:prose-invert prose-zinc\">\n            <p>\n              Welcome to our Terms of Use. By accessing or using our services, you agree to be bound\n              by these terms. If you do not agree to these terms, please refrain from using our\n              services.\n            </p>\n            <h3> User Obligations</h3>\n            <h4>Account Responsibility</h4>\n            <p>\n              When you create an account with us, you are responsible for maintaining the\n              confidentiality of your account and password.\n            </p>{\" \"}\n            <p>\n              You agree to accept responsibility for all activities that occur under your account.\n              You must notify us immediately of any breach of security or unauthorized use of your\n              account.\n            </p>\n            <h4>Compliance with Laws</h4>\n            <p>\n              You agree to comply with all applicable laws, regulations, and policies in connection\n              with your use of our services. This includes adhering to intellectual property laws\n              and refraining from any unlawful behavior while using our platform.\n            </p>\n            <h3> Prohibited Activities</h3>\n            <p>\n              You are not permitted to access or attempt to access any of our services by any means\n              other than through the interface provided by us. Any form of hacking, bypassing, or\n              circumventing our security protocols is strictly prohibited.\n            </p>\n            <h4>Misuse of Content</h4>\n            <p>\n              You agree not to misuse, reproduce, distribute, or modify any content from our\n              services unless explicitly authorized by us. This includes engaging in activities such\n              as scraping, data mining, or using automated systems to extract data.\n            </p>\n            <h4>Harassment and Abuse</h4>\n            <p>\n              You are prohibited from using our services to harass, abuse, or harm other users. This\n              includes sending unsolicited messages, stalking, or engaging in any form of\n              cyberbullying. We reserve the right to terminate accounts found in violation of this\n              policy.\n            </p>\n            <h4>Ownership of Content</h4>\n            <p>\n              All content, trademarks, service marks, logos, and other intellectual property\n              displayed on our services are the property of their respective owners. You may not\n              use, copy, or distribute any content without prior written permission from the owner.\n            </p>\n            <h4>User-Generated Content</h4>\n            <p>\n              By submitting content to our services, you grant us a worldwide, royalty-free,\n              non-exclusive license to use, distribute, modify, and display that content for the\n              purpose of providing our services.\n            </p>\n            <p>\n              You retain all ownership rights to your content but agree to allow us to use it in\n              accordance with these terms.\n            </p>\n            <h3> Termination</h3>\n            <h4>Right to Terminate</h4>\n            We reserve the right to terminate or suspend your access to our services at any time,\n            without notice, for any reason, including but not limited to a breach of these terms.\n            Upon termination, your right to use our services will immediately cease.\n            <h4>Effect of Termination</h4>\n            Upon termination of your account, all provisions of these terms that, by their nature,\n            should survive termination shall remain in effect. This includes, but is not limited to,\n            ownership provisions, warranty disclaimers, and limitations of liability.\n            <h3> Limitation of Liability</h3>\n            <h4>Service Availability</h4>\n            We do not guarantee that our services will be available at all times or without\n            interruption. We are not liable for any downtime or technical issues that may prevent\n            access to our services.\n            <h4>No Warranties</h4>\n            Our services are provided \"as is\" and \"as available\" without any warranties of any kind,\n            whether express or implied. We do not warrant that our services will meet your\n            requirements or that they will be error-free or secure.\n            <h4>Limitation of Damages</h4>\n            In no event shall we be liable for any indirect, incidental, special, consequential, or\n            punitive damages arising out of or related to your use of our services. This includes,\n            but is not limited to, damages for loss of profits, data, or other intangibles.\n            <h3> Changes to These Terms</h3>\n            We reserve the right to modify or replace these terms at any time. If a revision is\n            material, we will provide at least 30 days' notice prior to any new terms taking effect.\n            What constitutes a material change will be determined at our sole discretion.\n            <h3> Governing Law</h3>\n            These terms shall be governed and construed in accordance with the laws of [Your\n            Jurisdiction], without regard to its conflict of law provisions. Any disputes arising\n            from or relating to these terms shall be resolved in the courts of [Your Jurisdiction].\n            <h3> Contact Information</h3>\n            If you have any questions about these terms, please contact us at [Your Contact\n            Information].\n          </div>\n        </Sheet.Body>\n        <Sheet.Footer>\n          <Sheet.Close>Close</Sheet.Close>\n          <Button>Accept</Button>\n        </Sheet.Footer>\n      </Sheet.Content>\n    </Sheet>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet/sheet-classnames-demo": {
    "component": "@/components/docs/overlays/sheet/sheet-classnames-demo",
    "raw": "\"use client\"\n\nimport { Button, Sheet } from \"ui\"\n\nexport default function SheetClassnamesDemo() {\n  return (\n    <Sheet>\n      <Button>Open</Button>\n      <Sheet.Content\n        classNames={{\n          overlay: \"bg-white/50 dark:bg-black/50 backdrop-blur\",\n          content: \"min-w-80\"\n        }}\n      >\n        <Sheet.Header title=\"Custom Classnames\" description=\"This sheet has custom class names.\" />\n        <Sheet.Footer>\n          <Sheet.Close>Close</Sheet.Close>\n        </Sheet.Footer>\n      </Sheet.Content>\n    </Sheet>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/disclosure/disclosure-demo": {
    "component": "@/components/docs/navigation/disclosure/disclosure-demo",
    "raw": "import { Disclosure } from \"ui\"\n\nexport default function DisclosureDemo() {\n  return (\n    <Disclosure>\n      <Disclosure.Trigger>What are the benefits of regular exercise?</Disclosure.Trigger>\n      <Disclosure.Panel>\n        <p>\n          Regular exercise can improve your overall health, boost your mood, increase energy levels,\n          and help you maintain a healthy weight.\n        </p>\n      </Disclosure.Panel>\n    </Disclosure>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/disclosure/disclosure-controlled-demo": {
    "component": "@/components/docs/navigation/disclosure/disclosure-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Disclosure } from \"ui\"\n\nexport default function DisclosureControlledDemo() {\n  const [expanded, setExpanded] = React.useState(false)\n\n  return (\n    <div>\n      The disclosure is <strong className=\"text-info\">{expanded ? \"expanded\" : \"collapsed\"}</strong>\n      .\n      <Disclosure isExpanded={expanded} onExpandedChange={setExpanded}>\n        <Disclosure.Trigger>What is your return policy?</Disclosure.Trigger>\n        <Disclosure.Panel>\n          <p>\n            You can return any item within 30 days of purchase, provided it is in its original\n            condition with proof of purchase.\n          </p>\n        </Disclosure.Panel>\n      </Disclosure>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/disclosure/disclosure-disabled-demo": {
    "component": "@/components/docs/navigation/disclosure/disclosure-disabled-demo",
    "raw": "import { Disclosure } from \"ui\"\n\nexport default function DisclosureDisabledDemo() {\n  return (\n    <Disclosure isDisabled>\n      <Disclosure.Trigger>What is your return policy?</Disclosure.Trigger>\n      <Disclosure.Panel>\n        <p>\n          You can return any item within 30 days of purchase, provided it is in its original\n          condition with proof of purchase.\n        </p>\n      </Disclosure.Panel>\n    </Disclosure>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/tabs/tabs-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-demo",
    "raw": "\"use client\"\n\nimport { Tabs } from \"ui\"\n\nexport default function TabsDemo() {\n  return (\n    <Tabs aria-label=\"Recipe App\">\n      <Tabs.List>\n        <Tabs.Tab id=\"r\">Recipes</Tabs.Tab>\n        <Tabs.Tab id=\"i\">Ingredients</Tabs.Tab>\n        <Tabs.Tab id=\"m\">Meal Plans</Tabs.Tab>\n        <Tabs.Tab id=\"v\">Videos</Tabs.Tab>\n      </Tabs.List>\n      <Tabs.Panel id=\"r\">\n        Browse through a wide selection of recipes for all occasions and dietary preferences.\n      </Tabs.Panel>\n      <Tabs.Panel id=\"i\">Check the list of ingredients needed for your chosen recipes.</Tabs.Panel>\n      <Tabs.Panel id=\"m\">Discover curated meal plans to simplify your weekly cooking.</Tabs.Panel>\n      <Tabs.Panel id=\"v\">Watch cooking videos to learn new techniques and recipes.</Tabs.Panel>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/tabs/tabs-icons-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-icons-demo",
    "raw": "\"use client\"\n\nimport { IconApple, IconClock, IconCut } from \"justd-icons\"\nimport { Tabs } from \"ui\"\n\nexport default function TabsIconsDemo() {\n  return (\n    <Tabs aria-label=\"Fitness App\">\n      <Tabs.List>\n        <Tabs.Tab id=\"w\">\n          <IconCut /> Workouts\n        </Tabs.Tab>\n        <Tabs.Tab id=\"n\">\n          <IconApple /> Nutrition\n        </Tabs.Tab>\n        <Tabs.Tab id=\"t\">\n          <IconClock /> Tracker\n        </Tabs.Tab>\n      </Tabs.List>\n      <Tabs.Panel id=\"w\">\n        Find a variety of workout plans tailored to your fitness level and goals.\n      </Tabs.Panel>\n      <Tabs.Panel id=\"n\">\n        Get nutrition tips and meal plans to complement your fitness journey.\n      </Tabs.Panel>\n      <Tabs.Panel id=\"t\">Track your progress with detailed statistics and analytics.</Tabs.Panel>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/tabs/tabs-link-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-link-demo",
    "raw": "\"use client\"\n\nimport { Tabs } from \"ui\"\n\nconst navs = [\n  { url: \"/\", label: \"Home\" },\n  { url: \"/docs/getting-started/introduction\", label: \"Docs\" },\n  { url: \"/components\", label: \"Components\" },\n  { url: \"https://paranoid.irsyad.co\", label: \"Paranoid\" }\n]\n\nexport default function TabsLinkDemo() {\n  return (\n    <Tabs aria-label=\"Navbar\">\n      <Tabs.List items={navs}>\n        {(item) => (\n          <Tabs.Tab id={item.label} href={item.url}>\n            {item.label}\n          </Tabs.Tab>\n        )}\n      </Tabs.List>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/tabs/tabs-collections-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-collections-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Collection } from \"react-aria-components\"\nimport { Tabs } from \"ui\"\n\nconst tabs = [\n  { id: 1, title: \"Overview\", content: \"This is the overview tab content.\" },\n  { id: 2, title: \"Features\", content: \"Details about the features are listed here.\" },\n  { id: 3, title: \"Pricing\", content: \"Find the pricing information on this tab.\" },\n  { id: 4, title: \"Reviews\", content: \"Read user reviews and ratings here.\" }\n]\n\nexport default function TabsCollectionsDemo() {\n  return (\n    <Tabs aria-label=\"Project Management\">\n      <Tabs.List aria-label=\"Dynamic tabs\" items={tabs}>\n        {(item) => <Tabs.Tab>{item.title}</Tabs.Tab>}\n      </Tabs.List>\n\n      <Collection items={tabs}>\n        {(item) => <Tabs.Panel key={item.id}>{item.content}</Tabs.Panel>}\n      </Collection>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/tabs/tabs-responsive-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-responsive-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconHamburger } from \"justd-icons\"\nimport { Collection } from \"react-aria-components\"\nimport { Select, Tabs, useMediaQuery } from \"ui\"\n\nconst tabs = [\n  { id: 1, title: \"Overview\", content: \"This is the overview tab content.\" },\n  { id: 2, title: \"Features\", content: \"Details about the features are listed here.\" },\n  { id: 3, title: \"Pricing\", content: \"Find the pricing information on this tab.\" },\n  { id: 4, title: \"Reviews\", content: \"Read user reviews and ratings here.\" },\n  { id: 5, title: \"Support\", content: \"Contact our support team on this tab.\" },\n  { id: 6, title: \"Guarantee\", content: \"Our satisfaction guarantee details are here.\" },\n  { id: 7, title: \"FAQ\", content: \"Frequently asked questions are answered here.\" }\n]\n\nexport default function TabsResponsiveDemo() {\n  const isMobile = useMediaQuery(\"(max-width: 600px)\")\n  return isMobile ? (\n    <Select className=\"sm:hidden flex\">\n      <Select.Trigger prefix={<IconHamburger />} />\n      <Select.List items={tabs}>\n        {(item) => <Select.Option textValue={item.title}>{item.title}</Select.Option>}\n      </Select.List>\n    </Select>\n  ) : (\n    <Tabs className=\"sm:flex hidden\" aria-label=\"Project Management\">\n      <Tabs.List aria-label=\"Dynamic tabs\" items={tabs}>\n        {(item) => <Tabs.Tab>{item.title}</Tabs.Tab>}\n      </Tabs.List>\n      <Collection items={tabs}>\n        {(item) => <Tabs.Panel key={item.id}>{item.content}</Tabs.Panel>}\n      </Collection>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/tabs/tabs-orientation-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-orientation-demo",
    "raw": "\"use client\"\n\nimport { Tabs } from \"ui\"\n\nexport default function TabsOrientationDemo() {\n  return (\n    <Tabs orientation=\"vertical\" aria-label=\"E-Learning Platform\">\n      <Tabs.List>\n        <Tabs.Tab id=\"c\">Courses</Tabs.Tab>\n        <Tabs.Tab id=\"e\">Exams</Tabs.Tab>\n        <Tabs.Tab id=\"g\">Grades</Tabs.Tab>\n        <Tabs.Tab id=\"f\">Forums</Tabs.Tab>\n        <Tabs.Tab id=\"p\">Profile</Tabs.Tab>\n      </Tabs.List>\n      <Tabs.Panel id=\"c\">\n        Enroll in courses and access learning materials on various subjects.\n      </Tabs.Panel>\n      <Tabs.Panel id=\"e\">Take practice exams and quizzes to test your knowledge.</Tabs.Panel>\n      <Tabs.Panel id=\"g\">View your grades and track your academic progress.</Tabs.Panel>\n      <Tabs.Panel id=\"f\">\n        Participate in discussion forums with other students and instructors.\n      </Tabs.Panel>\n      <Tabs.Panel id=\"p\">Update your profile and customize your learning preferences.</Tabs.Panel>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/tabs/tabs-disabled-demo": {
    "component": "@/components/docs/navigation/tabs/tabs-disabled-demo",
    "raw": "\"use client\"\n\nimport { Tabs } from \"ui\"\n\nexport default function TabsDisabledDemo() {\n  return (\n    <Tabs disabledKeys={[\"c\", \"a\"]} aria-label=\"Services\">\n      <Tabs.List>\n        <Tabs.Tab id=\"o\">Overview</Tabs.Tab>\n        <Tabs.Tab id=\"c\">Contact</Tabs.Tab>\n        <Tabs.Tab id=\"a\">About Us</Tabs.Tab>\n      </Tabs.List>\n      <Tabs.Panel id=\"o\">\n        Welcome to our service! Here, you’ll find a brief overview of what we offer, our mission,\n        and how we strive to provide value to our customers.\n      </Tabs.Panel>\n      <Tabs.Panel id=\"c\">\n        Get in touch with us through our contact page. We are here to help you with any inquiries,\n        support requests, or feedback you may have.\n      </Tabs.Panel>\n      <Tabs.Panel id=\"a\">\n        Learn more about our company, our history, and the team behind our success. We are dedicated\n        to delivering the best service to our customers.\n      </Tabs.Panel>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/pagination/pagination-dynamic-demo": {
    "component": "@/components/docs/navigation/pagination/pagination-dynamic-demo",
    "raw": "\"use client\"\n\nimport { Pagination } from \"ui\"\n\nconst pages = Array.from({ length: 6 }, (_, i) => ({ value: i + 1 }))\nexport default function PaginationDynamicDemo() {\n  return (\n    <Pagination>\n      <Pagination.List>\n        <Pagination.Item variant=\"first\" href=\"#\" />\n        <Pagination.Item variant=\"previous\" href=\"#\" />\n        <Pagination.Section aria-label=\"Pagination Segment\" className=\"rounded-lg lg:hidden border\">\n          <Pagination.Item variant=\"label\">1</Pagination.Item>\n          <Pagination.Item variant=\"separator\" />\n          <Pagination.Item className=\"text-muted-fg\" variant=\"label\">\n            10\n          </Pagination.Item>\n        </Pagination.Section>\n        <Pagination.Section\n          aria-label=\"Pagination Segment\"\n          className=\"hidden lg:flex\"\n          items={pages}\n        >\n          {(item) => (\n            <Pagination.Item id={item.value.toString()} isCurrent={item.value === 4} href=\"#\">\n              {item.value}\n            </Pagination.Item>\n          )}\n        </Pagination.Section>\n        <Pagination.Item variant=\"next\" href=\"#\" />\n        <Pagination.Item variant=\"last\" href=\"#\" />\n      </Pagination.List>\n    </Pagination>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/pagination/pagination-demo": {
    "component": "@/components/docs/navigation/pagination/pagination-demo",
    "raw": "\"use client\"\n\nimport { Pagination } from \"ui\"\n\nexport default function PaginationDemo() {\n  return (\n    <Pagination>\n      <Pagination.List>\n        <Pagination.Item variant=\"first\" href=\"#\" />\n        <Pagination.Item variant=\"previous\" href=\"#\" />\n        <Pagination.Item href=\"#\">1</Pagination.Item>\n        <Pagination.Item href=\"#\" isCurrent>\n          2\n        </Pagination.Item>\n        <Pagination.Item variant=\"ellipsis\" />\n        <Pagination.Item variant=\"next\" href=\"#\" />\n        <Pagination.Item variant=\"last\" href=\"#\" />\n      </Pagination.List>\n    </Pagination>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/pagination/simple-pagination-demo": {
    "component": "@/components/docs/navigation/pagination/simple-pagination-demo",
    "raw": "\"use client\"\n\nimport { Pagination } from \"ui\"\n\nexport default function SimplePaginationDemo() {\n  return (\n    <Pagination>\n      <Pagination.List>\n        <Pagination.Item variant=\"first\" href=\"#\" />\n        <Pagination.Item variant=\"previous\" href=\"#\" />\n        <Pagination.Section aria-label=\"Pagination Segment\" className=\"rounded-lg border\">\n          <Pagination.Item variant=\"label\">1</Pagination.Item>\n          <Pagination.Item variant=\"separator\" />\n          <Pagination.Item className=\"text-muted-fg\" variant=\"label\">\n            10\n          </Pagination.Item>\n        </Pagination.Section>\n        <Pagination.Item variant=\"next\" href=\"#\" />\n        <Pagination.Item variant=\"last\" href=\"#\" />\n      </Pagination.List>\n    </Pagination>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/disclosure-group/disclosure-group-hide-indicator-demo": {
    "component": "@/components/docs/navigation/disclosure-group/disclosure-group-hide-indicator-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Disclosure, DisclosureGroup } from \"ui\"\n\nexport default function DisclosureGroupHideIndicatorDemo() {\n  return (\n    <DisclosureGroup hideIndicator>\n      {faqs.map((item, index) => (\n        <Disclosure key={index} id={index}>\n          <Disclosure.Trigger>{item.q}</Disclosure.Trigger>\n          <Disclosure.Panel>{item.a}</Disclosure.Panel>\n        </Disclosure>\n      ))}\n    </DisclosureGroup>\n  )\n}\n\nconst faqs = [\n  {\n    q: \"What payment methods are accepted?\",\n    a: \"We accept all major credit cards, PayPal, and Apple Pay.\"\n  },\n  {\n    q: \"How long does shipping take?\",\n    a: \"Shipping times vary by location but typically take between 3-7 business days.\"\n  },\n  {\n    q: \"Can I track my order?\",\n    a: \"Yes, you can track your order using the tracking link provided in your shipping confirmation email.\"\n  }\n]\n",
    "type": "docs"
  },
  "navigation/disclosure-group/disclosure-group-disabled-demo": {
    "component": "@/components/docs/navigation/disclosure-group/disclosure-group-disabled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Disclosure, DisclosureGroup } from \"ui\"\n\nexport default function DisclosureGroupDisabledDemo() {\n  return (\n    <DisclosureGroup>\n      {faqs.map((item, index) => (\n        <Disclosure isDisabled={index === 2} key={index} id={index}>\n          <Disclosure.Trigger>{item.q}</Disclosure.Trigger>\n          <Disclosure.Panel>{item.a}</Disclosure.Panel>\n        </Disclosure>\n      ))}\n    </DisclosureGroup>\n  )\n}\n\nconst faqs = [\n  {\n    q: \"Do you offer gift wrapping options?\",\n    a: \"Yes, we provide gift wrapping services for a small additional charge at checkout.\"\n  },\n  {\n    q: \"Can I return a gift card?\",\n    a: \"Sorry, gift cards are non-refundable and cannot be returned.\"\n  },\n  {\n    q: \"What are your store hours?\",\n    a: \"Our store is open from 9 AM to 9 PM on weekdays and 10 AM to 6 PM on weekends.\"\n  },\n  {\n    q: \"Do you have a loyalty program?\",\n    a: \"Yes, we have a loyalty program where you can earn points for every purchase and redeem them for discounts.\"\n  },\n  {\n    q: \"How do I update my billing information?\",\n    a: \"You can update your billing information through your account settings on our website.\"\n  },\n  {\n    q: \"Are there any discounts for bulk orders?\",\n    a: \"Yes, we offer discounts on bulk orders. Please contact our sales team for more details.\"\n  }\n]\n",
    "type": "docs"
  },
  "navigation/disclosure-group/disclosure-group-border-hidden-demo": {
    "component": "@/components/docs/navigation/disclosure-group/disclosure-group-border-hidden-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport {\n  IconBell,\n  IconCreditCard,\n  IconDownload,\n  IconSettings,\n  IconShield,\n  IconSupport\n} from \"justd-icons\"\nimport { Disclosure, DisclosureGroup } from \"ui\"\n\nexport default function DisclosureGroupBorderHiddenDemo() {\n  return (\n    <DisclosureGroup hideBorder>\n      {items.map((item, index) => (\n        <Disclosure key={index} id={index}>\n          <Disclosure.Trigger>{item.title}</Disclosure.Trigger>\n          <Disclosure.Panel>{item.description}</Disclosure.Panel>\n        </Disclosure>\n      ))}\n    </DisclosureGroup>\n  )\n}\n\nconst items = [\n  {\n    icon: <IconSettings />,\n    title: \"Personal Settings\",\n    description:\n      \"You can update your profile, change your password, and manage your account settings here.\"\n  },\n  {\n    icon: <IconBell />,\n    title: \"Notifications\",\n    description:\n      \"Manage your notifications preferences, including alerts, emails, and push notifications.\"\n  },\n  {\n    icon: <IconShield />,\n    title: \"Privacy Options\",\n    description:\n      \"Adjust your privacy settings to control who can see your information and contact you.\"\n  },\n  {\n    icon: <IconCreditCard />,\n    title: \"Payment Methods\",\n    description:\n      \"Add, remove, or update your payment methods including credit cards and digital wallets.\"\n  },\n  {\n    icon: <IconSupport />,\n    title: \"Support Center\",\n    description: \"Find help with common issues, or contact support for further assistance.\"\n  },\n  {\n    icon: <IconDownload />,\n    title: \"Download Data\",\n    description:\n      \"Request a download of all your data we have stored, including account activity and user data.\"\n  }\n]\n",
    "type": "docs"
  },
  "navigation/disclosure-group/disclosure-group-demo": {
    "component": "@/components/docs/navigation/disclosure-group/disclosure-group-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Disclosure, DisclosureGroup } from \"ui\"\n\nexport default function DisclosureGroupDemo() {\n  return (\n    <DisclosureGroup>\n      <Disclosure id={1}>\n        <Disclosure.Trigger>What is a VPS?</Disclosure.Trigger>\n        <Disclosure.Panel>\n          A VPS is a Virtual Private Server, which provides dedicated resources on a server shared\n          with other users, offering more control and customization than shared hosting.\n        </Disclosure.Panel>\n      </Disclosure>\n\n      <Disclosure id={2}>\n        <Disclosure.Trigger>What is cloud hosting?</Disclosure.Trigger>\n        <Disclosure.Panel>\n          Cloud hosting utilizes multiple servers to balance load and maximize uptime. Instead of\n          being hosted on a single server, your data and resources are spread across multiple\n          servers.\n        </Disclosure.Panel>\n      </Disclosure>\n\n      <Disclosure id={3}>\n        <Disclosure.Trigger>What is shared hosting?</Disclosure.Trigger>\n        <Disclosure.Panel>\n          Shared hosting is a type of web hosting where multiple websites share the same server and\n          its resources. It's an affordable option, but may have limitations on performance and\n          customization.\n        </Disclosure.Panel>\n      </Disclosure>\n      <Disclosure id={4}>\n        <Disclosure.Trigger>What is dedicated hosting?</Disclosure.Trigger>\n        <Disclosure.Panel>\n          Dedicated hosting means your website is hosted on a single server exclusively reserved for\n          your site. This provides maximum performance and customization, but at a higher cost.\n        </Disclosure.Panel>\n      </Disclosure>\n    </DisclosureGroup>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/disclosure-group/disclosure-group-hide-everything-demo": {
    "component": "@/components/docs/navigation/disclosure-group/disclosure-group-hide-everything-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Disclosure, DisclosureGroup } from \"ui\"\n\nexport default function DisclosureGroupHideEverythingDemo() {\n  return (\n    <DisclosureGroup hideIndicator hideBorder>\n      {faqs.map((item, index) => (\n        <Disclosure key={index} id={index}>\n          <Disclosure.Trigger>{item.q}</Disclosure.Trigger>\n          <Disclosure.Panel>{item.a}</Disclosure.Panel>\n        </Disclosure>\n      ))}\n    </DisclosureGroup>\n  )\n}\n\nconst faqs = [\n  {\n    q: \"What payment methods are accepted?\",\n    a: \"We accept all major credit cards, PayPal, and Apple Pay.\"\n  },\n  {\n    q: \"How long does shipping take?\",\n    a: \"Shipping times vary by location but typically take between 3-7 business days.\"\n  },\n  {\n    q: \"Can I track my order?\",\n    a: \"Yes, you can track your order using the tracking link provided in your shipping confirmation email.\"\n  }\n]\n",
    "type": "docs"
  },
  "navigation/disclosure-group/disclosure-group-allow-multiple-expand-demo": {
    "component": "@/components/docs/navigation/disclosure-group/disclosure-group-allow-multiple-expand-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Disclosure, DisclosureGroup } from \"ui\"\n\nexport default function DisclosureGroupAllowMultipleExpandDemo() {\n  return (\n    <DisclosureGroup allowsMultipleExpanded defaultExpandedKeys={[1, 2]}>\n      {faqs.map((item, index) => (\n        <Disclosure key={index} id={index}>\n          <Disclosure.Trigger>{item.q}</Disclosure.Trigger>\n          <Disclosure.Panel>{item.a}</Disclosure.Panel>\n        </Disclosure>\n      ))}\n    </DisclosureGroup>\n  )\n}\n\nconst faqs = [\n  {\n    q: \"How do I reset my password?\",\n    a: \"You can reset your password by going to the settings page and clicking on 'Reset Password'.\"\n  },\n  {\n    q: \"Can I change my subscription plan?\",\n    a: \"Yes, you can upgrade or downgrade your subscription plan at any time from your account settings.\"\n  },\n  {\n    q: \"Where can I view my past orders?\",\n    a: \"Your past orders can be viewed in the 'Orders' section of your account dashboard.\"\n  },\n  {\n    q: \"What is the return policy?\",\n    a: \"Our return policy allows you to return products within 30 days of purchase for a full refund or exchange.\"\n  },\n  {\n    q: \"How do I contact customer support?\",\n    a: \"You can contact customer support via email at support@example.com or through our online chat system.\"\n  }\n]\n",
    "type": "docs"
  },
  "navigation/disclosure-group/disclosure-group-default-expand-demo": {
    "component": "@/components/docs/navigation/disclosure-group/disclosure-group-default-expand-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Disclosure, DisclosureGroup } from \"ui\"\n\nexport default function DisclosureGroupDefaultExpandDemo() {\n  return (\n    <DisclosureGroup defaultExpandedKeys={[1]}>\n      {faqs.map((item, index) => (\n        <Disclosure key={index} id={index}>\n          <Disclosure.Trigger>{item.q}</Disclosure.Trigger>\n          <Disclosure.Panel>{item.a}</Disclosure.Panel>\n        </Disclosure>\n      ))}\n    </DisclosureGroup>\n  )\n}\n\nconst faqs = [\n  {\n    q: \"How do I reset my password?\",\n    a: \"You can reset your password by going to the settings page and clicking on 'Reset Password'.\"\n  },\n  {\n    q: \"Can I change my subscription plan?\",\n    a: \"Yes, you can upgrade or downgrade your subscription plan at any time from your account settings.\"\n  },\n  {\n    q: \"Where can I view my past orders?\",\n    a: \"Your past orders can be viewed in the 'Orders' section of your account dashboard.\"\n  },\n  {\n    q: \"What is the return policy?\",\n    a: \"Our return policy allows you to return products within 30 days of purchase for a full refund or exchange.\"\n  },\n  {\n    q: \"How do I contact customer support?\",\n    a: \"You can contact customer support via email at support@example.com or through our online chat system.\"\n  }\n]\n",
    "type": "docs"
  },
  "navigation/link/link-intent-demo": {
    "component": "@/components/docs/navigation/link/link-intent-demo",
    "raw": "\"use client\"\n\nimport { Link } from \"ui\"\n\nexport default function LinkIntentDemo() {\n  return (\n    <div className=\"flex gap-4\">\n      <Link intent=\"primary\" href=\"#intent-1\">\n        Label\n      </Link>\n      <Link intent=\"secondary\" href=\"#intent-2\">\n        Label\n      </Link>\n      <Link intent=\"lad/primary\" href=\"#intent-3\">\n        Label\n      </Link>\n      <Link intent=\"danger\" href=\"#intent-4\">\n        Label\n      </Link>\n      <Link href=\"#intent-5\">Label</Link>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/link/link-unstyled-demo": {
    "component": "@/components/docs/navigation/link/link-unstyled-demo",
    "raw": "\"use client\"\n\nimport { Link } from \"ui\"\n\nexport default function LinkUnstyledDemo() {\n  return <Link href=\"#unstyled\">Label</Link>\n}\n",
    "type": "docs"
  },
  "navigation/link/link-button-demo": {
    "component": "@/components/docs/navigation/link/link-button-demo",
    "raw": "\"use client\"\n\nimport { buttonStyles, Link } from \"ui\"\n\nexport default function LinkButtonDemo() {\n  return (\n    <div className=\"flex gap-2\">\n      <Link className={buttonStyles()} href=\"#use-as-button\">\n        Link\n      </Link>\n      <Link className={buttonStyles({ appearance: \"outline\" })} href=\"#use-as-button\">\n        Link\n      </Link>\n      <Link\n        className={buttonStyles({ appearance: \"plain\", shape: \"circle\" })}\n        href=\"#use-as-button\"\n      >\n        Link\n      </Link>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/link/link-demo": {
    "component": "@/components/docs/navigation/link/link-demo",
    "raw": "\"use client\"\n\nimport { Link } from \"ui\"\n\nexport default function LinkDemo() {\n  return (\n    <Link intent=\"primary\" href=\"#basic\">\n      Label\n    </Link>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/link/link-disabled-demo": {
    "component": "@/components/docs/navigation/link/link-disabled-demo",
    "raw": "\"use client\"\n\nimport { Link } from \"ui\"\n\nexport default function LinkDisabledDemo() {\n  return (\n    <div className=\"flex gap-4\">\n      <Link isDisabled intent=\"primary\" href=\"#intent-1\">\n        Label\n      </Link>\n      <Link isDisabled intent=\"secondary\" href=\"#intent-2\">\n        Label\n      </Link>\n      <Link isDisabled intent=\"lad/primary\" href=\"#intent-3\">\n        Label\n      </Link>\n      <Link isDisabled intent=\"danger\" href=\"#intent-4\">\n        Label\n      </Link>\n      <Link isDisabled href=\"#intent-5\">\n        Label\n      </Link>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/breadcrumbs/breadcrumbs-collections-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-collections-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { Key } from \"react-aria-components\"\nimport { Breadcrumbs } from \"ui\"\n\nexport default function BreadcrumbsCollectionsDemo() {\n  const [breadcrumbs, setBreadcrumbs] = React.useState([\n    { id: 1, label: \"Dashboard\", href: \"#\" },\n    { id: 2, label: \"Reports\", href: \"#\" },\n    { id: 3, label: \"2024 Quarterly Review\" }\n  ])\n\n  const navigate = (id: Key) => {\n    const i = breadcrumbs.findIndex((item) => item.id === id)\n    setBreadcrumbs(breadcrumbs.slice(0, i + 1))\n  }\n  return (\n    <Breadcrumbs items={breadcrumbs} onAction={navigate}>\n      {(item) => (\n        <>\n          <Breadcrumbs.Item href={item.href}>{item.label}</Breadcrumbs.Item>\n        </>\n      )}\n    </Breadcrumbs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/breadcrumbs/breadcrumbs-menu-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-menu-demo",
    "raw": "\"use client\"\n\nimport { IconDotsHorizontal } from \"justd-icons\"\nimport { Breadcrumbs, Menu } from \"ui\"\n\nexport default function BreadcrumbsMenuDemo() {\n  return (\n    <Breadcrumbs>\n      <Breadcrumbs.Item href=\"#\">Home</Breadcrumbs.Item>\n\n      <Breadcrumbs.Item separator>\n        <Menu>\n          <Menu.Trigger>\n            <IconDotsHorizontal />\n          </Menu.Trigger>\n          <Menu.Content placement=\"bottom\">\n            <Menu.Item href=\"/docs/2.x/components/layouts/sidebar\">Sidebar</Menu.Item>\n            <Menu.Item href=\"/docs/2.x/components/controls/toolbar\">Toolbar</Menu.Item>\n            <Menu.Item href=\"/docs/2.x/components/collections/menu\">Menu</Menu.Item>\n            <Menu.Item href=\"/docs/2.x/components/layouts/container\">Container</Menu.Item>\n            <Menu.Item href=\"/docs/2.x/components/surfaces/chart\">Chart</Menu.Item>\n            <Menu.Item href=\"/docs/2.x/components/collections/table\">Table</Menu.Item>\n            <Menu.Item href=\"/docs/2.x/components/overlays/modal\">Modal</Menu.Item>\n          </Menu.Content>\n        </Menu>\n      </Breadcrumbs.Item>\n\n      <Breadcrumbs.Item>Navbar</Breadcrumbs.Item>\n    </Breadcrumbs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/breadcrumbs/breadcrumbs-current-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-current-demo",
    "raw": "\"use client\"\n\nimport { Breadcrumbs } from \"ui\"\n\nexport default function BreadcrumbsCurrentDemo() {\n  return (\n    <Breadcrumbs>\n      <Breadcrumbs.Item href=\"#\">Home</Breadcrumbs.Item>\n      <Breadcrumbs.Item href=\"#\">Components</Breadcrumbs.Item>\n\n      <Breadcrumbs.Item\n        className={({ isCurrent }) => (isCurrent ? \"text-sky-500\" : \"text-secondary\")}\n      >\n        Navbar\n      </Breadcrumbs.Item>\n    </Breadcrumbs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/breadcrumbs/breadcrumbs-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-demo",
    "raw": "\"use client\"\n\nimport { Breadcrumbs } from \"ui\"\n\nexport default function BreadcrumbsDemo() {\n  return (\n    <Breadcrumbs>\n      <Breadcrumbs.Item href=\"#\">Home</Breadcrumbs.Item>\n\n      <Breadcrumbs.Item href=\"#\">Design System</Breadcrumbs.Item>\n\n      <Breadcrumbs.Item>Collections</Breadcrumbs.Item>\n    </Breadcrumbs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/breadcrumbs/breadcrumbs-separator-demo": {
    "component": "@/components/docs/navigation/breadcrumbs/breadcrumbs-separator-demo",
    "raw": "\"use client\"\n\nimport { Breadcrumbs } from \"ui\"\n\nexport default function BreadcrumbsSeparatorDemo() {\n  return (\n    <Breadcrumbs>\n      <Breadcrumbs.Item separator=\"slash\" href=\"#\">\n        Home\n      </Breadcrumbs.Item>\n      <Breadcrumbs.Item separator=\"slash\" href=\"#\">\n        Design System\n      </Breadcrumbs.Item>\n      <Breadcrumbs.Item>Collections</Breadcrumbs.Item>\n    </Breadcrumbs>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/pagination-anatomy": {
    "component": "@/components/docs/anatomies/pagination-anatomy",
    "raw": "import { Pagination } from \"ui\"\n\nexport default function PaginationAnatomy() {\n  return (\n    <Pagination>\n      <Pagination.List>\n        <Pagination.Item variant=\"first\" href=\"#\" />\n        <Pagination.Item variant=\"previous\" href=\"#\" />\n        <Pagination.Section aria-label=\"Pagination Segment\" className=\"rounded-lg lg:hidden border\">\n          <Pagination.Item variant=\"label\">1</Pagination.Item>\n          <Pagination.Item variant=\"separator\" />\n          <Pagination.Item className=\"text-muted-fg\" variant=\"label\">\n            10\n          </Pagination.Item>\n        </Pagination.Section>\n        <Pagination.Section aria-label=\"Pagination Segment\" className=\"hidden lg:flex\">\n          <Pagination.Item href=\"#\">1</Pagination.Item>\n        </Pagination.Section>\n        <Pagination.Item variant=\"next\" href=\"#\" />\n        <Pagination.Item variant=\"last\" href=\"#\" />\n      </Pagination.List>\n    </Pagination>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/table-anatomy": {
    "component": "@/components/docs/anatomies/table-anatomy",
    "raw": "import { Table } from \"ui\"\n\nexport default function TableAnatomy() {\n  return (\n    <Table aria-label=\"Bands\">\n      <Table.Header>\n        <Table.Column>#</Table.Column>\n        <Table.Column isRowHeader>Name</Table.Column>\n      </Table.Header>\n      <Table.Body>\n        <Table.Row>\n          <Table.Cell>1</Table.Cell>\n          <Table.Cell>Nirvana</Table.Cell>\n        </Table.Row>\n        <Table.Row>\n          <Table.Cell>2</Table.Cell>\n          <Table.Cell>The Beatles</Table.Cell>\n        </Table.Row>\n      </Table.Body>\n    </Table>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/radio-group-anatomy": {
    "component": "@/components/docs/anatomies/radio-group-anatomy",
    "raw": "import React from \"react\"\n\nimport { Radio, RadioGroup } from \"ui\"\n\nexport default function RadioGroupAnatomy() {\n  return (\n    <RadioGroup label=\"Features\">\n      <Radio value=\"fs\">Font size: Small, Medium, Large</Radio>\n      <Radio value=\"ks\">Keyboard shortcuts: Enabled, Disabled</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/list-box-anatomy": {
    "component": "@/components/docs/anatomies/list-box-anatomy",
    "raw": "import { ListBox } from \"ui\"\n\nexport default function ListBoxAnatomy() {\n  return (\n    <ListBox aria-label=\"Bands\">\n      <ListBox.Item>Nirvana</ListBox.Item>\n      <ListBox.Item>Radiohead</ListBox.Item>\n      <ListBox.Item>Foo Fighters</ListBox.Item>\n      <ListBox.Item>Arctic Monkeys</ListBox.Item>\n      <ListBox.Item>The Strokes</ListBox.Item>\n    </ListBox>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/file-trigger-anatomy": {
    "component": "@/components/docs/anatomies/file-trigger-anatomy",
    "raw": "import { FileTrigger } from \"ui\"\n\nexport default function FileTriggerAnatomy() {\n  return <FileTrigger />\n}\n",
    "type": "docs"
  },
  "anatomies/chart-anatomy": {
    "component": "@/components/docs/anatomies/chart-anatomy",
    "raw": "import { BarChart } from \"recharts\"\nimport { Chart } from \"ui\"\n\nexport default function ChartAnatomy() {\n  return (\n    <Chart\n      config={{\n        sales: {\n          label: \"Sales\",\n          color: \"hsl(var(--primary-chart))\"\n        }\n      }}\n    >\n      <BarChart\n        accessibilityLayer\n        data={[\n          { month: \"January\", sales: 5000 },\n          { month: \"February\", sales: 7000 }\n        ]}\n      >\n        <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n      </BarChart>\n    </Chart>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/progress-circle-anatomy": {
    "component": "@/components/docs/anatomies/progress-circle-anatomy",
    "raw": "import React from \"react\"\n\nimport { ProgressCircle } from \"ui\"\n\nexport default function ProgressBarAnatomy() {\n  return (\n    <>\n      <ProgressCircle aria-label=\"Loading…\" value={25} />\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/number-field-anatomy": {
    "component": "@/components/docs/anatomies/number-field-anatomy",
    "raw": "import { NumberField } from \"ui\"\n\nexport default function TextFieldAnatomy() {\n  return <NumberField label=\"Cookies\" />\n}\n",
    "type": "docs"
  },
  "anatomies/color-field-anatomy": {
    "component": "@/components/docs/anatomies/color-field-anatomy",
    "raw": "import { ColorField } from \"ui\"\n\nexport default function ColorFieldAnatomy() {\n  return <ColorField defaultValue=\"#0d6efd\" />\n}\n",
    "type": "docs"
  },
  "anatomies/sidebar-anatomy": {
    "component": "@/components/docs/anatomies/sidebar-anatomy",
    "raw": "import { IconCreditCard, IconShoppingBag } from \"justd-icons\"\nimport { Sidebar } from \"ui\"\n\nexport default function SidebarAnatomy() {\n  return (\n    <Sidebar.Provider>\n      <Sidebar>\n        <Sidebar.Header>\n          <Sidebar.Nav isSticky />\n        </Sidebar.Header>\n        <Sidebar.Content>\n          <Sidebar.Section>\n            <Sidebar.Item />\n            <Sidebar.Item />\n          </Sidebar.Section>\n          <Sidebar.Section title=\"Projects\">\n            <Sidebar.Item icon={IconShoppingBag} />\n            <Sidebar.Item icon={IconCreditCard} />\n          </Sidebar.Section>\n          <Sidebar.Section collapsible title=\"Team\">\n            <Sidebar.Item />\n          </Sidebar.Section>\n        </Sidebar.Content>\n        <Sidebar.Footer />\n        <Sidebar.Rail />\n      </Sidebar>\n      <Sidebar.Inset>{/* your main content */}</Sidebar.Inset>\n    </Sidebar.Provider>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/color-swatch-anatomy": {
    "component": "@/components/docs/anatomies/color-swatch-anatomy",
    "raw": "import { ColorSwatch } from \"ui\"\n\nexport default function ColorSwatchAnatomy() {\n  return <ColorSwatch aria-label=\"Current color\" color=\"#0d6efd\" />\n}\n",
    "type": "docs"
  },
  "anatomies/tooltip-anatomy": {
    "component": "@/components/docs/anatomies/tooltip-anatomy",
    "raw": "import { IconBrandX } from \"justd-icons\"\nimport { Tooltip } from \"ui\"\n\nexport default function TooltipAnatomy() {\n  return (\n    <Tooltip>\n      <Tooltip.Trigger aria-label=\"Follow My Twitter\">\n        <IconBrandX />\n      </Tooltip.Trigger>\n      <Tooltip.Content>Follow me on X @irsyadadl</Tooltip.Content>\n    </Tooltip>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/breadcrumbs-anatomy": {
    "component": "@/components/docs/anatomies/breadcrumbs-anatomy",
    "raw": "import * as React from \"react\"\n\nimport { Breadcrumbs } from \"ui\"\n\nexport default function BreadcrumbsAnatomy() {\n  return (\n    <Breadcrumbs>\n      <Breadcrumbs.Item href=\"#\">Home</Breadcrumbs.Item>\n      <Breadcrumbs.Item href=\"#\">Design System</Breadcrumbs.Item>\n      <Breadcrumbs.Item>Collections</Breadcrumbs.Item>\n    </Breadcrumbs>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/description-list-anatomy": {
    "component": "@/components/docs/anatomies/description-list-anatomy",
    "raw": "import { DescriptionList } from \"ui\"\n\nexport function DescriptionListAnatomy() {\n  return (\n    <DescriptionList>\n      <DescriptionList.Term>Invoice Number</DescriptionList.Term>\n      <DescriptionList.Details>INV-12345</DescriptionList.Details>\n      <DescriptionList.Term>Invoice Date</DescriptionList.Term>\n      <DescriptionList.Details>September 21, 2024</DescriptionList.Details>\n    </DescriptionList>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/modal-anatomy": {
    "component": "@/components/docs/anatomies/modal-anatomy",
    "raw": "import { Button, Modal } from \"ui\"\n\nexport default function ModalAnatomy() {\n  return (\n    <Modal>\n      <Button>Turn on 2FA</Button>\n      <Modal.Content>\n        <Modal.Header>\n          <Modal.Title>Let's beef up your account.</Modal.Title>\n          <Modal.Description>...</Modal.Description>\n        </Modal.Header>\n        <Modal.Body>...</Modal.Body>\n        <Modal.Footer>\n          <Modal.Close>Nope</Modal.Close>\n          <Button>Yep</Button>\n        </Modal.Footer>\n      </Modal.Content>\n    </Modal>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/color-area-anatomy": {
    "component": "@/components/docs/anatomies/color-area-anatomy",
    "raw": "import { ColorArea } from \"ui\"\n\nexport default function ColorAreaAnatomy() {\n  return <ColorArea />\n}\n",
    "type": "docs"
  },
  "anatomies/carousel-anatomy": {
    "component": "@/components/docs/anatomies/carousel-anatomy",
    "raw": "import { Carousel } from \"ui\"\n\nexport default function CarouselAnatomy() {\n  return (\n    <Carousel className=\"w-full [&_.xrkr]:h-56 [&_.xrkr]:overflow-hidden [&_.xrkr]:flex [&_.xrkr]:flex-col max-w-xs\">\n      <Carousel.Content>\n        <Carousel.Item className=\"basis-1/2\">1</Carousel.Item>\n        <Carousel.Item className=\"basis-1/2\">2</Carousel.Item>\n        <Carousel.Item className=\"basis-1/2\">3</Carousel.Item>\n      </Carousel.Content>\n\n      <Carousel.Handler>\n        <Carousel.Button slot=\"previous\" />\n        <Carousel.Button slot=\"next\" />\n      </Carousel.Handler>\n    </Carousel>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/color-swatch-picker-anatomy": {
    "component": "@/components/docs/anatomies/color-swatch-picker-anatomy",
    "raw": "import { ColorSwatchPicker } from \"ui\"\n\nexport default function ColorSwatchPickerAnatomy() {\n  return (\n    <ColorSwatchPicker aria-label=\"Pick color\">\n      <ColorSwatchPicker.Item color=\"#f59e0b\" />\n      <ColorSwatchPicker.Item color=\"#84cc16\" />\n      <ColorSwatchPicker.Item color=\"#0d6efd\" />\n    </ColorSwatchPicker>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/note-anatomy": {
    "component": "@/components/docs/anatomies/note-anatomy",
    "raw": "import React from \"react\"\n\nimport { Note } from \"ui\"\n\nexport default function NoteAnatomy() {\n  return (\n    <Note>\n      We hook you up with top-tier migration services in our startup plan. Wanna roll with it? Hit\n      us up here.\n    </Note>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/drop-zone-anatomy": {
    "component": "@/components/docs/anatomies/drop-zone-anatomy",
    "raw": "import { DropZone, Label } from \"ui\"\n\nexport default function DropZoneAnatomy() {\n  return (\n    <DropZone>\n      <Label>Toss your stuff here</Label>\n    </DropZone>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/tag-group-anatomy": {
    "component": "@/components/docs/anatomies/tag-group-anatomy",
    "raw": "import { Tag } from \"ui\"\n\nexport default function TagGroupAnatomy() {\n  return (\n    <Tag.Group label=\"Serverless\" selectionMode=\"multiple\">\n      <Tag.List>\n        <Tag.Item>AWS Lambda</Tag.Item>\n        <Tag.Item>Google Cloud Functions</Tag.Item>\n        <Tag.Item>Azure Functions</Tag.Item>\n      </Tag.List>\n    </Tag.Group>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/toolbar-anatomy": {
    "component": "@/components/docs/anatomies/toolbar-anatomy",
    "raw": "import { IconBold, IconBoldFill, IconItalic, IconItalicFill } from \"justd-icons\"\nimport { Checkbox, Toolbar } from \"ui\"\n\nexport default function ToolbarAnatomy() {\n  return (\n    <Toolbar aria-label=\"Toolbars\">\n      <Toolbar.Group aria-label=\"Text Formatting Options\">\n        <Toolbar.Item defaultSelected aria-label=\"Bold\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconBoldFill /> : <IconBold />}</>}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Italic\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconItalicFill /> : <IconItalic />}</>}\n        </Toolbar.Item>\n      </Toolbar.Group>\n      <Toolbar.Separator />\n      <Checkbox>Spell Check</Checkbox>\n    </Toolbar>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/toggle-group-anatomy": {
    "component": "@/components/docs/anatomies/toggle-group-anatomy",
    "raw": "import { Toggle, ToggleGroup } from \"ui\"\n\nexport default function ToggleGroupAnatomy(props: React.ComponentProps<typeof ToggleGroup>) {\n  return (\n    <ToggleGroup {...props}>\n      <Toggle />\n      <Toggle />\n      <Toggle />\n    </ToggleGroup>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/heading-anatomy": {
    "component": "@/components/docs/anatomies/heading-anatomy",
    "raw": "import { Heading } from \"ui\"\n\nexport default function HeadingAnatomy() {\n  return (\n    <>\n      <Heading level={2}>The quick brown fox jumps over the lazy dog</Heading>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/disclosure-anatomy": {
    "component": "@/components/docs/anatomies/disclosure-anatomy",
    "raw": "import { Disclosure } from \"ui\"\n\nexport default function DisclosureAnatomy() {\n  return (\n    <Disclosure>\n      <Disclosure.Trigger>...</Disclosure.Trigger>\n      <Disclosure.Panel>...</Disclosure.Panel>\n    </Disclosure>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/tabs-anatomy": {
    "component": "@/components/docs/anatomies/tabs-anatomy",
    "raw": "\"use client\"\n\nimport { Tabs } from \"ui\"\n\nexport default function TabsAnatomy() {\n  return (\n    <Tabs aria-label=\"Recipe App\">\n      <Tabs.List>\n        <Tabs.Tab id=\"i\">Ingredients</Tabs.Tab>\n        <Tabs.Tab id=\"m\">Meal Plans</Tabs.Tab>\n      </Tabs.List>\n      <Tabs.Panel id=\"i\">Check the list of ingredients needed for your chosen recipes.</Tabs.Panel>\n      <Tabs.Panel id=\"m\">Discover curated meal plans to simplify your weekly cooking.</Tabs.Panel>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/grid-list-anatomy": {
    "component": "@/components/docs/anatomies/grid-list-anatomy",
    "raw": "import { GridList } from \"ui\"\n\nexport default function GridListAnatomy() {\n  return (\n    <GridList selectionMode=\"single\" aria-label=\"Bands\">\n      <GridList.Item>Nirvana</GridList.Item>\n      <GridList.Item>Radiohead</GridList.Item>\n      <GridList.Item>Arctic Monkeys</GridList.Item>\n    </GridList>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/sheet-anatomy": {
    "component": "@/components/docs/anatomies/sheet-anatomy",
    "raw": "import { Button, Sheet } from \"ui\"\n\nexport default function SheetAnatomy() {\n  return (\n    <Sheet>\n      <Button>Edit Settings</Button>\n      <Sheet.Content>\n        <Sheet.Header>\n          <Sheet.Title>Update User Settings</Sheet.Title>\n          <Sheet.Description>Adjust your preferences and configurations here.</Sheet.Description>\n        </Sheet.Header>\n        <Sheet.Body>...</Sheet.Body>\n        <Sheet.Footer>\n          <Sheet.Close>Cancel</Sheet.Close>\n          <Button intent=\"primary\" type=\"submit\">\n            Save Changes\n          </Button>\n        </Sheet.Footer>\n      </Sheet.Content>\n    </Sheet>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/skeleton-anatomy": {
    "component": "@/components/docs/anatomies/skeleton-anatomy",
    "raw": "import { Card, Skeleton } from \"ui\"\n\nexport default function SkeletonAnatomy() {\n  return (\n    <Card className=\"p-4\">\n      <div className=\"flex gap-2\">\n        <Skeleton intent=\"lighter\" shape=\"circle\" className=\"size-8\" />\n        <div className=\"space-y-1\">\n          <Skeleton intent=\"muted\" shape=\"circle\" className=\"h-4 w-56\" />\n          <Skeleton intent=\"lighter\" shape=\"circle\" className=\"h-4 w-16\" />\n          <Skeleton intent=\"lighter\" className=\"h-4 w-24\" />\n          <Skeleton intent=\"muted\" className=\"h-4 w-32\" />\n        </div>\n      </div>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/color-picker-anatomy": {
    "component": "@/components/docs/anatomies/color-picker-anatomy",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ColorPicker } from \"ui\"\n\nexport default function ColorPickerAnatomy() {\n  return (\n    <ColorPicker\n      label=\"Theme Color\"\n      description=\"Snag a color for the app theme\"\n      defaultValue=\"hsl(216, 98%, 52%)\"\n    />\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/drawer-anatomy": {
    "component": "@/components/docs/anatomies/drawer-anatomy",
    "raw": "import { Button, Drawer } from \"ui\"\n\nexport default function DrawerAnatomy() {\n  return (\n    <Drawer>\n      <Drawer.Trigger />\n      <Drawer.Content>\n        <Drawer.Header>\n          <Drawer.Title />\n          <Drawer.Description />\n        </Drawer.Header>\n        <Drawer.Body />\n        <Drawer.Footer>\n          <Drawer.Close />\n          <Button />\n        </Drawer.Footer>\n      </Drawer.Content>\n    </Drawer>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/grid-anatomy": {
    "component": "@/components/docs/anatomies/grid-anatomy",
    "raw": "import { Grid } from \"ui\"\n\nexport default function GridAnatomy() {\n  return (\n    <Grid columns={3}>\n      <Grid.Item />\n      <Grid.Item />\n      <Grid.Item />\n    </Grid>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/checkbox-anatomy": {
    "component": "@/components/docs/anatomies/checkbox-anatomy",
    "raw": "import { Checkbox } from \"ui\"\n\nexport default function CheckboxAnatomy() {\n  return <Checkbox>Enable notifications</Checkbox>\n}\n",
    "type": "docs"
  },
  "anatomies/tree-anatomy": {
    "component": "@/components/docs/anatomies/tree-anatomy",
    "raw": "import { Collection } from \"react-aria-components\"\nimport { Tree, TreeItem } from \"ui\"\n\nexport default function TreeAnatomy() {\n  return (\n    <Tree>\n      <TreeItem textValue=\"Item 1\">\n        <TreeItem.Content>\n          <TreeItem.Indicator />\n          <TreeItem.Checkbox />\n          <TreeItem.Label>Title</TreeItem.Label>\n        </TreeItem.Content>\n        <Collection />\n      </TreeItem>\n    </Tree>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/disclosure-group-anatomy": {
    "component": "@/components/docs/anatomies/disclosure-group-anatomy",
    "raw": "import { Disclosure, DisclosureGroup } from \"ui\"\n\nexport default function DisclosureAnatomy() {\n  return (\n    <DisclosureGroup defaultExpandedKeys={[\"x\"]}>\n      <Disclosure id=\"x\">\n        <Disclosure.Trigger>Q1</Disclosure.Trigger>\n        <Disclosure.Panel>A1</Disclosure.Panel>\n      </Disclosure>\n      <Disclosure id=\"y\">\n        <Disclosure.Trigger>Q2</Disclosure.Trigger>\n        <Disclosure.Panel>A2</Disclosure.Panel>\n      </Disclosure>\n      <Disclosure id=\"z\">\n        <Disclosure.Trigger>Q3</Disclosure.Trigger>\n        <Disclosure.Panel>A3</Disclosure.Panel>\n      </Disclosure>\n    </DisclosureGroup>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/avatar-anatomy": {
    "component": "@/components/docs/anatomies/avatar-anatomy",
    "raw": "import { Avatar } from \"ui\"\n\nexport default function AvatarAnatomy() {\n  return (\n    <>\n      <Avatar src=\"https://i.pravatar.cc/150?img=61\" alt=\"...\" initials=\"SGT\" />\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/choicebox-anatomy": {
    "component": "@/components/docs/anatomies/choicebox-anatomy",
    "raw": "import { Choicebox } from \"ui\"\n\nexport default function AccordionAnatomy() {\n  return (\n    <Choicebox aria-label=\"Select items\" selectionMode=\"multiple\">\n      <Choicebox.Item title=\"...\" description=\"...\" />\n      <Choicebox.Item title=\"...\" description=\"...\" />\n    </Choicebox>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/loader-anatomy": {
    "component": "@/components/docs/anatomies/loader-anatomy",
    "raw": "import { Loader } from \"ui\"\n\nexport default function LoaderAnatomy() {\n  return (\n    <div className=\"flex gap-6\">\n      <Loader variant=\"ring\" />\n      <Loader variant=\"spin\" />\n      <Loader variant=\"bars\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/visually-hidden-anatomy": {
    "component": "@/components/docs/anatomies/visually-hidden-anatomy",
    "raw": "import { Label, VisuallyHidden } from \"ui\"\n\nexport default function VisuallyHiddenAnatomy() {\n  return (\n    <div>\n      <Label>It's shown to you</Label>\n      <VisuallyHidden>You can't see me, but I'm still accessible to screen readers.</VisuallyHidden>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/color-wheel-anatomy": {
    "component": "@/components/docs/anatomies/color-wheel-anatomy",
    "raw": "import { ColorWheel } from \"ui\"\n\nexport default function ColorWheelAnatomy() {\n  return <ColorWheel aria-label=\"Background color\" />\n}\n",
    "type": "docs"
  },
  "anatomies/search-field-anatomy": {
    "component": "@/components/docs/anatomies/search-field-anatomy",
    "raw": "import { SearchField } from \"ui\"\n\nexport default function SearchFieldAnatomy() {\n  return <SearchField name=\"name\" type=\"text\" />\n}\n",
    "type": "docs"
  },
  "anatomies/checkbox-group-anatomy": {
    "component": "@/components/docs/anatomies/checkbox-group-anatomy",
    "raw": "import { Checkbox, CheckboxGroup } from \"ui\"\n\nexport default function CheckboxGroupAnatomy() {\n  return (\n    <CheckboxGroup label=\"Settings\">\n      <Checkbox value=\"notifications\">Enable notifications</Checkbox>\n      <Checkbox value=\"auto_update\">Auto-update applications</Checkbox>\n      <Checkbox value=\"dark_mode\">Enable dark mode</Checkbox>\n    </CheckboxGroup>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/textarea-anatomy": {
    "component": "@/components/docs/anatomies/textarea-anatomy",
    "raw": "import { Textarea } from \"ui\"\n\nexport default function TextareaAnatomy() {\n  return <Textarea label=\"Address\" description=\"Please enter your address\" />\n}\n",
    "type": "docs"
  },
  "anatomies/color-slider-anatomy": {
    "component": "@/components/docs/anatomies/color-slider-anatomy",
    "raw": "import { ColorSlider } from \"ui\"\n\nexport default function ColorSliderAnatomy() {\n  return <ColorSlider channel=\"hue\" />\n}\n",
    "type": "docs"
  },
  "anatomies/select-anatomy": {
    "component": "@/components/docs/anatomies/select-anatomy",
    "raw": "import { Select } from \"ui\"\n\nexport default function SelectAnatomy() {\n  return (\n    <Select>\n      <Select.Trigger>Select Provider</Select.Trigger>\n      <Select.List>\n        <Select.Option>GitHub</Select.Option>\n        <Select.Option>GitLab</Select.Option>\n        <Select.Option>Bitbucket</Select.Option>\n      </Select.List>\n    </Select>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/input-otp-anatomy": {
    "component": "@/components/docs/anatomies/input-otp-anatomy",
    "raw": "import { InputOTP } from \"ui\"\n\nexport default function InputOtpAnatomy() {\n  return (\n    <InputOTP maxLength={6}>\n      <InputOTP.Group>\n        <InputOTP.Slot index={0} />\n        <InputOTP.Slot index={1} />\n        <InputOTP.Slot index={2} />\n      </InputOTP.Group>\n      <InputOTP.Separator />\n      <InputOTP.Group>\n        <InputOTP.Slot index={3} />\n        <InputOTP.Slot index={4} />\n        <InputOTP.Slot index={5} />\n      </InputOTP.Group>\n    </InputOTP>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/card-anatomy": {
    "component": "@/components/docs/anatomies/card-anatomy",
    "raw": "import { Button, Card } from \"ui\"\n\nexport default function CardAnatomy() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Monthly Report</Card.Title>\n        <Card.Description>Financial summary for June</Card.Description>\n      </Card.Header>\n      <Card.Content>...</Card.Content>\n      <Card.Footer>\n        <Button>View Details</Button>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/multiple-select-anatomy": {
    "component": "@/components/docs/anatomies/multiple-select-anatomy",
    "raw": "import { useListData } from \"react-stately\"\nimport { MultipleSelect, type SelectedKey } from \"ui\"\n\nexport default function MultipleSelectAnatomy() {\n  const selectedItems = useListData<SelectedKey>({ initialItems: [] })\n  return (\n    <MultipleSelect\n      className=\"max-w-xs\"\n      label=\"Fruits\"\n      selectedItems={selectedItems}\n      items={[\n        { id: 1, name: \"Apple\" },\n        { id: 2, name: \"Banana\" }\n      ]}\n      tag={(item) => <MultipleSelect.Tag textValue={item.name}>{item.name}</MultipleSelect.Tag>}\n    >\n      {(item) => {\n        return <MultipleSelect.Option textValue={item.name}>{item.name}</MultipleSelect.Option>\n      }}\n    </MultipleSelect>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/menu-anatomy": {
    "component": "@/components/docs/anatomies/menu-anatomy",
    "raw": "import { Menu } from \"ui\"\n\nexport default function MenuAnatomy() {\n  return (\n    <Menu>\n      <Menu.Trigger>Open</Menu.Trigger>\n      <Menu.Content>\n        <Menu.Item>Inbox</Menu.Item>\n        <Menu.Item>Sent</Menu.Item>\n        <Menu.Item>New Message</Menu.Item>\n      </Menu.Content>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/command-menu-anatomy": {
    "component": "@/components/docs/anatomies/command-menu-anatomy",
    "raw": "import React from \"react\"\n\nimport { IconHome } from \"justd-icons\"\nimport { CommandMenu, Link } from \"ui\"\n\nexport default function CommandMenuAnatomy() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <CommandMenu isOpen={isOpen} onOpenChange={setIsOpen}>\n      <CommandMenu.Input placeholder=\"Quick search...\" />\n      <CommandMenu.List>\n        <CommandMenu.Section separator heading=\"Pages\">\n          <CommandMenu.Item asChild>\n            <Link href=\"#\">\n              <IconHome /> Home\n            </Link>\n          </CommandMenu.Item>\n        </CommandMenu.Section>\n      </CommandMenu.List>\n    </CommandMenu>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/meter-anatomy": {
    "component": "@/components/docs/anatomies/meter-anatomy",
    "raw": "import React from \"react\"\n\nimport { Meter } from \"ui\"\n\nexport default function MeterAnatomy() {\n  return (\n    <>\n      <Meter label=\"Storage space\" value={32} />\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/combo-box-anatomy": {
    "component": "@/components/docs/anatomies/combo-box-anatomy",
    "raw": "import { ComboBox } from \"ui\"\n\nexport default function ComboBoxAnatomy() {\n  return (\n    <ComboBox placeholder=\"Select a user\" label=\"Users\">\n      <ComboBox.Input />\n      <ComboBox.List>\n        <ComboBox.Option>John Lennon</ComboBox.Option>\n        <ComboBox.Option>Paul McCartney</ComboBox.Option>\n        <ComboBox.Option>George Harrison</ComboBox.Option>\n        <ComboBox.Option>Ringo Starr</ComboBox.Option>\n      </ComboBox.List>\n    </ComboBox>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/navbar-anatomy": {
    "component": "@/components/docs/anatomies/navbar-anatomy",
    "raw": "import { IconBrandApple, IconSearch, IconShoppingBag } from \"justd-icons\"\nimport { Button, Navbar, Separator } from \"ui\"\n\nexport default function NavbarAnatomy() {\n  return (\n    <Navbar>\n      {/* Desktop */}\n      <Navbar.Nav>\n        <Navbar.Logo />\n        <Navbar.Section>\n          <Navbar.Item href=\"#\" />\n        </Navbar.Section>\n      </Navbar.Nav>\n\n      {/* Mobile */}\n      <Navbar.Compact>\n        <Navbar.Flex>\n          <Navbar.Trigger className=\"-ml-2\" />\n          <Separator orientation=\"vertical\" className=\"h-6 mx-2\" />\n          <Navbar.Logo href=\"/docs/2.x/components/navigation/navbar\">\n            <IconBrandApple className=\"size-5\" />\n          </Navbar.Logo>\n        </Navbar.Flex>\n        <Navbar.Flex>\n          <Button appearance=\"plain\" size=\"square-petite\" aria-label=\"Search for products\">\n            <IconSearch />\n          </Button>\n          <Button appearance=\"plain\" size=\"square-petite\" aria-label=\"Your Bag\">\n            <IconShoppingBag />\n          </Button>\n        </Navbar.Flex>\n      </Navbar.Compact>\n\n      <Navbar.Inset />\n    </Navbar>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/text-field-anatomy": {
    "component": "@/components/docs/anatomies/text-field-anatomy",
    "raw": "import { TextField } from \"ui\"\n\nexport default function TextFieldAnatomy() {\n  return (\n    <TextField\n      name=\"name\"\n      type=\"text\"\n      label=\"Name\"\n      description=\"Enter your name\"\n      placeholder=\"John Doe\"\n      errorMessage=\"This field is required\"\n      prefix=\"...\"\n      suffix=\"...\"\n    />\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/button-anatomy": {
    "component": "@/components/docs/anatomies/button-anatomy",
    "raw": "import { Button } from \"ui\"\n\nexport default function ButtonAnatomy() {\n  return <Button type=\"submit\">Label</Button>\n}\n",
    "type": "docs"
  },
  "anatomies/progress-bar-anatomy": {
    "component": "@/components/docs/anatomies/progress-bar-anatomy",
    "raw": "import React from \"react\"\n\nimport { ProgressBar } from \"ui\"\n\nexport default function ProgressBarAnatomy() {\n  return (\n    <>\n      <ProgressBar label=\"Loading…\" value={25} />\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/link-anatomy": {
    "component": "@/components/docs/anatomies/link-anatomy",
    "raw": "import { Link } from \"ui\"\n\nexport default function LinkAnatomy() {\n  return (\n    <Link intent=\"primary\" href=\"#basic\">\n      Label\n    </Link>\n  )\n}\n",
    "type": "docs"
  },
  "anatomies/separator-anatomy": {
    "component": "@/components/docs/anatomies/separator-anatomy",
    "raw": "import { Separator } from \"ui\"\n\nexport default function SeparatorAnatomy() {\n  return <Separator />\n}\n",
    "type": "docs"
  },
  "anatomies/popover-anatomy": {
    "component": "@/components/docs/anatomies/popover-anatomy",
    "raw": "import { Button, Popover } from \"ui\"\n\nexport default function PopoverAnatomy() {\n  return (\n    <Popover>\n      <Button>Forgot Password</Button>\n      <Popover.Content className=\"min-w-72\">\n        <Popover.Header>\n          <Popover.Title>Email</Popover.Title>\n          <Popover.Description>We'll send you an email to log in.</Popover.Description>\n        </Popover.Header>\n        <Popover.Footer>\n          <Button>Send Login Link</Button>\n        </Popover.Footer>\n      </Popover.Content>\n    </Popover>\n  )\n}\n",
    "type": "docs"
  },
  "controls/toolbar/toolbar-disabled-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-disabled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport {\n  IconAlignmentJustify,\n  IconAlignmentJustifyFill,\n  IconAlignmentRight,\n  IconAlignmentRightFill,\n  IconCamera,\n  IconCameraFill,\n  IconCursor,\n  IconCursorFill,\n  IconGallery,\n  IconGalleryFill,\n  IconPencilBox,\n  IconPencilBoxFill,\n  IconToolbox,\n  IconToolboxFill\n} from \"justd-icons\"\nimport { Toggle, Toolbar } from \"ui\"\n\nexport default function ToolbarDisabledDemo() {\n  return (\n    <Toolbar aria-label=\"Toolbox\">\n      <Toolbar.Group aria-label=\"Toolbox\">\n        <Toggle isDisabled aria-label=\"Cursor\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconCursorFill /> : <IconCursor />}</>}\n        </Toggle>\n        <Toggle aria-label=\"Pencil Box\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconPencilBoxFill /> : <IconPencilBox />}</>}\n        </Toggle>\n        <Toggle aria-label=\"Pencil Box\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconToolboxFill /> : <IconToolbox />}</>}\n        </Toggle>\n      </Toolbar.Group>\n      <Toolbar.Separator />\n      <Toolbar.Group isDisabled aria-label=\"Gallery\">\n        <Toolbar.Item aria-label=\"Camera\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconCameraFill /> : <IconCamera />}</>}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Gallery\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconGalleryFill /> : <IconGallery />}</>}\n        </Toolbar.Item>\n      </Toolbar.Group>\n      <Toolbar.Separator />\n      <Toolbar.Group aria-label=\"Alignment\">\n        <Toggle aria-label=\"Align Right\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconAlignmentRightFill /> : <IconAlignmentRight />}</>\n          )}\n        </Toggle>\n        <Toggle aria-label=\"Align Justify\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconAlignmentJustifyFill /> : <IconAlignmentJustify />}</>\n          )}\n        </Toggle>\n      </Toolbar.Group>\n    </Toolbar>\n  )\n}\n",
    "type": "docs"
  },
  "controls/toolbar/toolbar-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport {\n  IconAlignmentCenter,\n  IconAlignmentCenterFill,\n  IconAlignmentJustify,\n  IconAlignmentJustifyFill,\n  IconAlignmentLeft,\n  IconAlignmentLeftFill,\n  IconAlignmentRight,\n  IconAlignmentRightFill,\n  IconBold,\n  IconBoldFill,\n  IconChevronDown,\n  IconGallery,\n  IconGrid4,\n  IconItalic,\n  IconItalicFill,\n  IconLink,\n  IconRedo,\n  IconStrikeThrough,\n  IconStrikeThroughFill,\n  IconUnderline,\n  IconUnderlineFill,\n  IconUndo\n} from \"justd-icons\"\nimport { Button, Checkbox, Menu, Toolbar } from \"ui\"\n\nexport default function ToolbarDemo() {\n  return (\n    <Toolbar aria-label=\"Toolbars\">\n      <Toolbar.Group aria-label=\"Text Formatting Options\">\n        <Toolbar.Item defaultSelected aria-label=\"Bold\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconBoldFill /> : <IconBold />}</>}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Italic\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconItalicFill /> : <IconItalic />}</>}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Underline\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconUnderlineFill /> : <IconUnderline />}</>}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Strikethrough\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconStrikeThroughFill /> : <IconStrikeThrough />}</>\n          )}\n        </Toolbar.Item>\n      </Toolbar.Group>\n      <Toolbar.Separator />\n      <Toolbar.Group aria-label=\"Alignment\">\n        <Toolbar.Item aria-label=\"Align Left\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconAlignmentLeftFill /> : <IconAlignmentLeft />}</>\n          )}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Align Center\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconAlignmentCenterFill /> : <IconAlignmentCenter />}</>\n          )}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Align Right\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconAlignmentRightFill /> : <IconAlignmentRight />}</>\n          )}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Align Justify\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconAlignmentJustifyFill /> : <IconAlignmentJustify />}</>\n          )}\n        </Toolbar.Item>\n      </Toolbar.Group>\n      <Toolbar.Separator />\n      <Checkbox>Spell Check</Checkbox>\n      <Toolbar.Group className=\"ml-auto\">\n        <Menu>\n          <Button aria-label=\"Other options\" appearance=\"outline\" size=\"small\">\n            Options...\n            <IconChevronDown />\n          </Button>\n          <Menu.Content showArrow placement=\"bottom right\">\n            <Menu.Item>\n              <IconUndo />\n              Undo\n            </Menu.Item>\n            <Menu.Item>\n              <IconRedo />\n              Redo\n            </Menu.Item>\n            <Menu.Item>\n              <IconLink />\n              Insert Link\n            </Menu.Item>\n            <Menu.Item>\n              <IconGallery />\n              Insert Image\n            </Menu.Item>\n            <Menu.Item>\n              <IconGrid4 />\n              Insert Grid\n            </Menu.Item>\n          </Menu.Content>\n        </Menu>\n      </Toolbar.Group>\n    </Toolbar>\n  )\n}\n",
    "type": "docs"
  },
  "controls/toolbar/toolbar-orientation-demo": {
    "component": "@/components/docs/controls/toolbar/toolbar-orientation-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport {\n  IconAlignmentCenter,\n  IconAlignmentCenterFill,\n  IconAlignmentJustify,\n  IconAlignmentJustifyFill,\n  IconAlignmentLeft,\n  IconAlignmentLeftFill,\n  IconCamera,\n  IconCameraFill,\n  IconCursor,\n  IconCursorFill,\n  IconDotsVertical,\n  IconGallery,\n  IconGalleryFill,\n  IconGrid4,\n  IconLink,\n  IconPencilBox,\n  IconPencilBoxFill,\n  IconRedo,\n  IconToolbox,\n  IconToolboxFill,\n  IconUndo\n} from \"justd-icons\"\nimport { Button, Menu, Toggle, Toolbar } from \"ui\"\n\nexport default function ToolbarOrientationDemo() {\n  return (\n    <Toolbar aria-label=\"Toolbox\" orientation=\"vertical\">\n      <Toolbar.Group aria-label=\"Toolbox\">\n        <Toolbar.Item aria-label=\"Cursor\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconCursorFill /> : <IconCursor />}</>}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Pencil Box\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconPencilBoxFill /> : <IconPencilBox />}</>}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Pencil Box\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconToolboxFill /> : <IconToolbox />}</>}\n        </Toolbar.Item>\n      </Toolbar.Group>\n      <Toolbar.Separator />\n      <Toolbar.Group aria-label=\"Gallery\">\n        <Toolbar.Item aria-label=\"Camera\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconCameraFill /> : <IconCamera />}</>}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Gallery\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconGalleryFill /> : <IconGallery />}</>}\n        </Toolbar.Item>\n      </Toolbar.Group>\n      <Toolbar.Separator />\n      <Toolbar.Group aria-label=\"Alignment\">\n        <Toggle aria-label=\"Align Left\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconAlignmentLeftFill /> : <IconAlignmentLeft />}</>\n          )}\n        </Toggle>\n        <Toolbar.Item aria-label=\"Align Center\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconAlignmentCenterFill /> : <IconAlignmentCenter />}</>\n          )}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Align Justify\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconAlignmentJustifyFill /> : <IconAlignmentJustify />}</>\n          )}\n        </Toolbar.Item>\n      </Toolbar.Group>\n      <Toolbar.Separator />\n      <Toolbar.Group>\n        <Menu>\n          <Button aria-label=\"Other options\" appearance=\"outline\" size=\"square-petite\">\n            <IconDotsVertical />\n          </Button>\n          <Menu.Content showArrow placement=\"right\">\n            <Menu.Item>\n              <IconUndo />\n              Undo\n            </Menu.Item>\n            <Menu.Item>\n              <IconRedo />\n              Redo\n            </Menu.Item>\n            <Menu.Item>\n              <IconLink />\n              Insert Link\n            </Menu.Item>\n            <Menu.Item>\n              <IconGallery />\n              Insert Image\n            </Menu.Item>\n            <Menu.Item>\n              <IconGrid4 />\n              Insert Grid\n            </Menu.Item>\n          </Menu.Content>\n        </Menu>\n      </Toolbar.Group>\n    </Toolbar>\n  )\n}\n",
    "type": "docs"
  },
  "controls/slider/slider-range-demo": {
    "component": "@/components/docs/controls/slider/slider-range-demo",
    "raw": "\"use client\"\n\nimport { Slider } from \"ui\"\n\nexport default function SliderRangeDemo() {\n  return <Slider defaultValue={[25, 75]} label=\"Distance Range\" />\n}\n",
    "type": "docs"
  },
  "controls/slider/slider-orientation-demo": {
    "component": "@/components/docs/controls/slider/slider-orientation-demo",
    "raw": "\"use client\"\n\nimport React, { useState } from \"react\"\n\nimport { Card, Description, Slider } from \"ui\"\n\nexport default function SliderOrientationDemo() {\n  const [equalizer, setEqualizer] = useState({\n    subBass: 40,\n    bass: 50,\n    lowMid: 60,\n    mid: 70,\n    highMid: 65,\n    presence: 75,\n    brilliance: 80\n  })\n\n  const handleSliderChange = (name: string, value: number) => {\n    setEqualizer((prev) => ({ ...prev, [name]: value }))\n  }\n\n  return (\n    <Card className=\"p-4\">\n      <div className=\"flex justify-center [&>*]:w-6 gap-4\">\n        <Slider\n          aria-label=\"Sub Bass\"\n          value={equalizer.subBass}\n          onChange={(newValue) => handleSliderChange(\"subBass\", newValue as number)}\n          orientation=\"vertical\"\n        />\n        <Slider\n          aria-label=\"Bass\"\n          value={equalizer.bass}\n          onChange={(newValue) => handleSliderChange(\"bass\", newValue as number)}\n          orientation=\"vertical\"\n        />\n        <Slider\n          aria-label=\"Low Mid\"\n          value={equalizer.lowMid}\n          onChange={(newValue) => handleSliderChange(\"lowMid\", newValue as number)}\n          orientation=\"vertical\"\n        />\n        <Slider\n          aria-label=\"Mid\"\n          value={equalizer.mid}\n          onChange={(newValue) => handleSliderChange(\"mid\", newValue as number)}\n          orientation=\"vertical\"\n        />\n        <Slider\n          aria-label=\"High Mid\"\n          value={equalizer.highMid}\n          onChange={(newValue) => handleSliderChange(\"highMid\", newValue as number)}\n          orientation=\"vertical\"\n        />\n        <Slider\n          aria-label=\"Presence\"\n          value={equalizer.presence}\n          onChange={(newValue) => handleSliderChange(\"presence\", newValue as number)}\n          orientation=\"vertical\"\n        />\n        <Slider\n          aria-label=\"Brilliance\"\n          value={equalizer.brilliance}\n          onChange={(newValue) => handleSliderChange(\"brilliance\", newValue as number)}\n          orientation=\"vertical\"\n        />\n      </div>\n      <Description className=\"mt-6 block text-center\">Equilizer</Description>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "controls/slider/slider-controlled-demo": {
    "component": "@/components/docs/controls/slider/slider-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Slider } from \"ui\"\n\nexport default function SliderControlledDemo() {\n  const [temperature, setTemperature] = React.useState<number>(31)\n  const [saturation, setSaturation] = React.useState<number[]>([21, 86])\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <Slider\n          value={temperature}\n          onChange={(v) => setTemperature(v as number)}\n          label=\"Temperature\"\n          description={`Current temperature: ${temperature ?? \"-\"}`}\n        />\n      </div>\n      <div>\n        <Slider\n          value={saturation}\n          onChange={(v) => setSaturation(v as number[])}\n          label=\"Saturation\"\n          description={`Current saturation: ${saturation ?? \"-\"}`}\n        />\n      </div>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "controls/slider/slider-demo": {
    "component": "@/components/docs/controls/slider/slider-demo",
    "raw": "\"use client\"\n\nimport { Slider } from \"ui\"\n\nexport default function SliderDemo() {\n  return <Slider label=\"Volume\" />\n}\n",
    "type": "docs"
  },
  "controls/slider/slider-prefix-suffix-demo": {
    "component": "@/components/docs/controls/slider/slider-prefix-suffix-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconVolumeFull, IconVolumeOff } from \"justd-icons\"\nimport { Slider } from \"ui\"\n\nexport default function SliderPrefixSuffixDemo() {\n  const [volume, setVolume] = React.useState<number>(0.5)\n  return (\n    <div className=\"max-w-2xl items-center flex gap-4 [&>[data-slot=icon]]:translate-y-3.5 [&>[data-slot=icon]]:size-4 [&>[data-slot=icon]]:shrink-0\">\n      <IconVolumeOff />\n      <Slider value={volume} onChange={(v) => setVolume(v as number)} label=\"Volume\" />\n      <IconVolumeFull />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "controls/slider/slider-disabled-demo": {
    "component": "@/components/docs/controls/slider/slider-disabled-demo",
    "raw": "\"use client\"\n\nimport { Slider } from \"ui\"\n\nexport default function SliderDisabledDemo() {\n  return <Slider isDisabled label=\"Volume\" />\n}\n",
    "type": "docs"
  },
  "controls/slider/slider-step-demo": {
    "component": "@/components/docs/controls/slider/slider-step-demo",
    "raw": "\"use client\"\n\nimport { Slider } from \"ui\"\n\nexport default function SliderStepDemo() {\n  return <Slider step={10} description=\"Step in 10\" label=\"Progress tracking\" />\n}\n",
    "type": "docs"
  },
  "controls/context-menu/context-menu-disabled-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-disabled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ContextMenu } from \"ui\"\n\nexport default function ContextMenuDisabledDemo() {\n  return (\n    <ContextMenu>\n      <ContextMenu.Trigger className=\"h-28 w-56 border-2 border-dashed rounded-lg grid place-content-center\">\n        Right click me\n      </ContextMenu.Trigger>\n      <ContextMenu.Content>\n        <ContextMenu.Item id=\"view\">View</ContextMenu.Item>\n        <ContextMenu.Item id=\"edit\">Edit</ContextMenu.Item>\n        <ContextMenu.Item id=\"gsu\" isDisabled>\n          Generate Short URL\n        </ContextMenu.Item>\n      </ContextMenu.Content>\n    </ContextMenu>\n  )\n}\n",
    "type": "docs"
  },
  "controls/context-menu/context-menu-separator-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-separator-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ContextMenu } from \"ui\"\n\nexport default function ContextMenuSeparatorDemo() {\n  return (\n    <ContextMenu>\n      <ContextMenu.Trigger className=\"h-28 w-56 border-2 border-dashed rounded-lg grid place-content-center\">\n        Right click me\n      </ContextMenu.Trigger>\n      <ContextMenu.Content>\n        <ContextMenu.Item id=\"view\">View</ContextMenu.Item>\n        <ContextMenu.Item id=\"edit\">Edit</ContextMenu.Item>\n        <ContextMenu.Separator />\n        <ContextMenu.Item id=\"gsu\">Generate Short URL</ContextMenu.Item>\n      </ContextMenu.Content>\n    </ContextMenu>\n  )\n}\n",
    "type": "docs"
  },
  "controls/context-menu/context-menu-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ContextMenu } from \"ui\"\n\nexport default function ContextMenuDemo() {\n  return (\n    <ContextMenu>\n      <ContextMenu.Trigger className=\"h-28 w-56 border-2 border-dashed rounded-lg grid place-content-center\">\n        Right click me\n      </ContextMenu.Trigger>\n      <ContextMenu.Content className=\"sm:min-w-56\">\n        <ContextMenu.Item>Back</ContextMenu.Item>\n        <ContextMenu.Item isDisabled>Forward</ContextMenu.Item>\n        <ContextMenu.Item>Reload</ContextMenu.Item>\n        <ContextMenu.Separator />\n        <ContextMenu.Item>Bookmark</ContextMenu.Item>\n        <ContextMenu.Item>Save as</ContextMenu.Item>\n        <ContextMenu.Item>\n          Select all\n          <ContextMenu.Keyboard keys=\"⌘A\" />\n        </ContextMenu.Item>\n        <ContextMenu.Separator />\n        <ContextMenu.Item>View source</ContextMenu.Item>\n        <ContextMenu.Item>Inspect Accessibility</ContextMenu.Item>\n        <ContextMenu.Item>Inspect</ContextMenu.Item>\n      </ContextMenu.Content>\n    </ContextMenu>\n  )\n}\n",
    "type": "docs"
  },
  "controls/context-menu/context-menu-danger-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-danger-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ContextMenu } from \"ui\"\n\nexport default function ContextMenuDangerDemo() {\n  return (\n    <ContextMenu>\n      <ContextMenu.Trigger className=\"h-28 w-56 border-2 border-dashed rounded-lg grid place-content-center\">\n        Right click me\n      </ContextMenu.Trigger>\n      <ContextMenu.Content>\n        <ContextMenu.Item>Open</ContextMenu.Item>\n        <ContextMenu.Item>Rename</ContextMenu.Item>\n        <ContextMenu.Item>Duplicate</ContextMenu.Item>\n        <ContextMenu.Item>Share</ContextMenu.Item>\n        <ContextMenu.Separator />\n        <ContextMenu.Item isDanger>Delete</ContextMenu.Item>\n      </ContextMenu.Content>\n    </ContextMenu>\n  )\n}\n",
    "type": "docs"
  },
  "controls/context-menu/context-menu-item-details-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-item-details-demo",
    "raw": "\"use client\"\n\nimport { ContextMenu } from \"ui\"\n\nexport default function ContextMenuItemDetailsDemo() {\n  return (\n    <ContextMenu>\n      <ContextMenu.Trigger className=\"h-28 w-56 border-2 border-dashed rounded-lg grid place-content-center\">\n        Right click me\n      </ContextMenu.Trigger>\n      <ContextMenu.Content items={roles}>\n        {(item) => (\n          <ContextMenu.Item id={item.id} textValue={item.name}>\n            <ContextMenu.ItemDetails label={item.name} description={item.description} />\n          </ContextMenu.Item>\n        )}\n      </ContextMenu.Content>\n    </ContextMenu>\n  )\n}\n\nconst roles = [\n  { id: 1, name: \"Admin\", description: \"Has full access to all resources\" },\n  { id: 2, name: \"Editor\", description: \"Can edit content but has limited access to settings\" },\n  { id: 3, name: \"Viewer\", description: \"Can view content but cannot make changes\" },\n  { id: 4, name: \"Contributor\", description: \"Can contribute content for review\" },\n  { id: 5, name: \"Guest\", description: \"Limited access, mostly for viewing purposes\" }\n]\n",
    "type": "docs"
  },
  "controls/context-menu/context-menu-with-icon-demo": {
    "component": "@/components/docs/controls/context-menu/context-menu-with-icon-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconDuplicate, IconFolder, IconHighlight, IconTrash, IconUpload } from \"justd-icons\"\nimport { ContextMenu } from \"ui\"\n\nexport default function ContextMenuWithIconDemo() {\n  return (\n    <ContextMenu>\n      <ContextMenu.Trigger className=\"h-28 w-56 border-2 border-dashed rounded-lg grid place-content-center\">\n        Right click me\n      </ContextMenu.Trigger>\n      <ContextMenu.Content>\n        <ContextMenu.Item>\n          <IconFolder />\n          Open\n        </ContextMenu.Item>\n        <ContextMenu.Item>\n          <IconHighlight />\n          Rename\n        </ContextMenu.Item>\n        <ContextMenu.Item>\n          <IconDuplicate />\n          Duplicate\n        </ContextMenu.Item>\n        <ContextMenu.Item>\n          <IconUpload />\n          Share\n        </ContextMenu.Item>\n        <ContextMenu.Separator />\n        <ContextMenu.Item isDanger>\n          <IconTrash />\n          Delete\n        </ContextMenu.Item>\n      </ContextMenu.Content>\n    </ContextMenu>\n  )\n}\n",
    "type": "docs"
  },
  "controls/command-menu/command-menu-disabled-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-disabled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Button, CommandMenu } from \"ui\"\n\nexport default function CommandMenuDisabledDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button appearance=\"outline\" onPress={() => setIsOpen(true)}>\n        Open\n      </Button>\n      <CommandMenu isOpen={isOpen} onOpenChange={setIsOpen}>\n        <CommandMenu.Input placeholder=\"Quick search...\" />\n        <CommandMenu.List>\n          <CommandMenu.Section heading=\"Suggestions\">\n            <CommandMenu.Item>\n              PhpStorm\n              <CommandMenu.Description>Application</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item>\n              WebStorm\n              <CommandMenu.Description>Application</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item disabled>\n              Warp\n              <CommandMenu.Description>Need to enable</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item disabled>\n              Sublime Text\n              <CommandMenu.Description>Need to enable</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item>\n              VS Code\n              <CommandMenu.Description>Application</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item disabled>\n              Atom\n              <CommandMenu.Description>Killed</CommandMenu.Description>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "controls/command-menu/command-menu-section-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-section-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Button, CommandMenu } from \"ui\"\n\nexport default function CommandMenuSectionDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button appearance=\"outline\" onPress={() => setIsOpen(true)}>\n        Open\n      </Button>\n      <CommandMenu isOpen={isOpen} onOpenChange={setIsOpen}>\n        <CommandMenu.Input placeholder=\"Quick search...\" />\n        <CommandMenu.List>\n          <CommandMenu.Section heading=\"Pages\">\n            <CommandMenu.Item asChild>\n              <a href=\"/public\">Home</a>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <a href=\"/docs/getting-started/installation\">Docs</a>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <a href=\"/components\">Components</a>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n          <CommandMenu.Separator />\n          <CommandMenu.Section heading=\"Users\">\n            {users.map((user) => (\n              <CommandMenu.Item key={user.id}>{user.name}</CommandMenu.Item>\n            ))}\n          </CommandMenu.Section>\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n\nconst users = [\n  { id: 1, name: \"Barbara Kirlin Sr.\", image_url: \"https://i.pravatar.cc/150?img=1\" },\n  { id: 2, name: \"Rosemarie Koch\", image_url: \"https://i.pravatar.cc/150?img=2\" },\n  { id: 3, name: \"Mrs. Reva Heaney Jr.\", image_url: \"https://i.pravatar.cc/150?img=3\" },\n  { id: 4, name: \"Ms. Ettie Abshire DVM\", image_url: \"https://i.pravatar.cc/150?img=4\" },\n  { id: 5, name: \"Bria Ziemann\", image_url: \"https://i.pravatar.cc/150?img=5\" },\n  { id: 6, name: \"Heloise Borer Sr.\", image_url: \"https://i.pravatar.cc/150?img=6\" },\n  {\n    id: 7,\n    name: \"Miss Jacinthe Gerlach DVM\",\n    image_url: \"https://i.pravatar.cc/150?img=7\"\n  },\n  {\n    id: 8,\n    name: \"Miss Stephania Schaefer Sr.\",\n    image_url: \"https://i.pravatar.cc/150?img=8\"\n  },\n  { id: 9, name: \"Kevon Hackett MD\", image_url: \"https://i.pravatar.cc/150?img=9\" },\n  { id: 10, name: \"Tom Ledner\", image_url: \"https://i.pravatar.cc/150?img=10\" }\n]\n",
    "type": "docs"
  },
  "controls/command-menu/command-menu-trigger-by-keyboard-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-trigger-by-keyboard-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconCreditCard, IconCube, IconGear, IconHome2, IconNotes, IconShield } from \"justd-icons\"\nimport Link from \"next/link\"\nimport { CommandMenu } from \"ui\"\n\nexport default function CommandMenuTriggerByKeyboardDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"/\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setIsOpen((open: boolean) => !open)\n      }\n    }\n\n    document.addEventListener(\"keydown\", down)\n\n    return () => document.removeEventListener(\"keydown\", down)\n  }, [setIsOpen])\n  return (\n    <>\n      ⌘ /\n      <CommandMenu isOpen={isOpen} onOpenChange={setIsOpen}>\n        <CommandMenu.Input placeholder=\"Quick search...\" />\n        <CommandMenu.List>\n          <CommandMenu.Section separator heading=\"Pages\">\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconHome2 /> Home\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconNotes /> Docs\n                <CommandMenu.Keyboard keys=\"⌘k\" />\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconCube /> Components\n              </Link>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n          <CommandMenu.Section heading=\"Dashboard\">\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconCreditCard /> Billing\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconGear /> Settings\n                <CommandMenu.Keyboard keys=\"⌘s\" />\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconShield /> Security\n              </Link>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "controls/command-menu/command-menu-blur-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-blur-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconBill, IconCube, IconGear, IconHome, IconNotes, IconShield } from \"justd-icons\"\n// Replace with your router link component\nimport Link from \"next/link\"\nimport { Avatar, Button, CommandMenu } from \"ui\"\n\nexport default function CommandMenuBlurDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button appearance=\"outline\" onPress={() => setIsOpen(true)}>\n        Open\n      </Button>\n      <CommandMenu isBlurred isOpen={isOpen} onOpenChange={setIsOpen}>\n        <CommandMenu.Input placeholder=\"Quick search...\" />\n        <CommandMenu.List>\n          <CommandMenu.Section separator heading=\"Pages\">\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconHome /> Home\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconNotes /> Docs\n                <CommandMenu.Keyboard keys=\"⌘k\" />\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconCube /> Components\n              </Link>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n          <CommandMenu.Section separator heading=\"Dashboard\">\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconBill /> Billing\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconGear /> Settings\n                <CommandMenu.Keyboard keys=\"⌘s\" />\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconShield /> Security\n              </Link>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n          <CommandMenu.Section heading=\"Team\">\n            {users.map((user) => (\n              <CommandMenu.Item key={user.id}>\n                <Avatar src={user.image_url} />\n                {user.name}\n              </CommandMenu.Item>\n            ))}\n          </CommandMenu.Section>\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n\nconst users = [\n  { id: 1, name: \"Barbara Kirlin Sr.\", image_url: \"https://i.pravatar.cc/150?img=1\" },\n  { id: 2, name: \"Rosemarie Koch\", image_url: \"https://i.pravatar.cc/150?img=2\" },\n  { id: 3, name: \"Mrs. Reva Heaney Jr.\", image_url: \"https://i.pravatar.cc/150?img=3\" },\n  { id: 5, name: \"Bria Ziemann\", image_url: \"https://i.pravatar.cc/150?img=5\" },\n  { id: 6, name: \"Heloise Borer Sr.\", image_url: \"https://i.pravatar.cc/150?img=6\" }\n]\n",
    "type": "docs"
  },
  "controls/command-menu/command-menu-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconBill, IconCube, IconGear, IconHome, IconNotes, IconShield } from \"justd-icons\"\n// Replace with your router link component\nimport Link from \"next/link\"\nimport { Avatar, Button, CommandMenu } from \"ui\"\n\nexport default function CommandMenuDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button appearance=\"outline\" onPress={() => setIsOpen(true)}>\n        Open\n      </Button>\n      <CommandMenu isOpen={isOpen} onOpenChange={setIsOpen}>\n        <CommandMenu.Input placeholder=\"Quick search...\" />\n        <CommandMenu.List>\n          <CommandMenu.Section separator heading=\"Pages\">\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconHome /> Home\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconNotes /> Docs\n                <CommandMenu.Keyboard keys=\"⌘k\" />\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconCube /> Components\n              </Link>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n          <CommandMenu.Section separator heading=\"Dashboard\">\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconBill /> Billing\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconGear /> Settings\n                <CommandMenu.Keyboard keys=\"⌘s\" />\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconShield /> Security\n              </Link>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n          <CommandMenu.Section heading=\"Team\">\n            {users.map((user) => (\n              <CommandMenu.Item key={user.id}>\n                <Avatar src={user.image_url} />\n                {user.name}\n              </CommandMenu.Item>\n            ))}\n          </CommandMenu.Section>\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n\nconst users = [\n  { id: 1, name: \"Barbara Kirlin Sr.\", image_url: \"https://i.pravatar.cc/150?img=1\" },\n  { id: 2, name: \"Rosemarie Koch\", image_url: \"https://i.pravatar.cc/150?img=2\" },\n  { id: 3, name: \"Mrs. Reva Heaney Jr.\", image_url: \"https://i.pravatar.cc/150?img=3\" },\n  { id: 5, name: \"Bria Ziemann\", image_url: \"https://i.pravatar.cc/150?img=5\" },\n  { id: 6, name: \"Heloise Borer Sr.\", image_url: \"https://i.pravatar.cc/150?img=6\" }\n]\n",
    "type": "docs"
  },
  "controls/command-menu/command-menu-separator-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-separator-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Button, CommandMenu } from \"ui\"\n\nexport default function CommandMenuSeparatorDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button appearance=\"outline\" onPress={() => setIsOpen(true)}>\n        Open\n      </Button>\n      <CommandMenu isOpen={isOpen} onOpenChange={setIsOpen}>\n        <CommandMenu.Input placeholder=\"Quick search...\" />\n        <CommandMenu.List>\n          <CommandMenu.Item asChild>\n            <a href=\"#\">Profile Overview</a>\n          </CommandMenu.Item>\n          <CommandMenu.Item asChild>\n            <a href=\"#\">Profile Settings</a>\n          </CommandMenu.Item>\n          <CommandMenu.Item asChild>\n            <a href=\"#\">Security Settings</a>\n          </CommandMenu.Item>\n          <CommandMenu.Separator />\n          <CommandMenu.Item asChild>\n            <a href=\"#\">Notification Preferences</a>\n          </CommandMenu.Item>\n          <CommandMenu.Item asChild>\n            <a href=\"#\">Privacy Settings</a>\n          </CommandMenu.Item>\n          <CommandMenu.Separator />\n          <CommandMenu.Item asChild>\n            <a href=\"#\">Billing Information</a>\n          </CommandMenu.Item>\n          <CommandMenu.Item asChild>\n            <a href=\"#\">Subscription Plans</a>\n          </CommandMenu.Item>\n          <CommandMenu.Separator />\n          <CommandMenu.Item asChild>\n            <a href=\"#\">Connected Apps</a>\n          </CommandMenu.Item>\n          <CommandMenu.Item asChild>\n            <a href=\"#\">Logout</a>\n          </CommandMenu.Item>\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "controls/command-menu/command-menu-keyboard-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-keyboard-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Button, CommandMenu } from \"ui\"\n\nexport default function CommandMenuKeyboardDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button appearance=\"outline\" onPress={() => setIsOpen(true)}>\n        Open\n      </Button>\n      <CommandMenu isOpen={isOpen} onOpenChange={setIsOpen}>\n        <CommandMenu.Input placeholder=\"Quick search...\" />\n        <CommandMenu.List>\n          <CommandMenu.Item>\n            Account Settings\n            <CommandMenu.Keyboard keys=\"⌘A\" />\n          </CommandMenu.Item>\n\n          <CommandMenu.Item>\n            Profile\n            <CommandMenu.Keyboard keys=\"⌘P\" />\n          </CommandMenu.Item>\n\n          <CommandMenu.Item>\n            Notifications\n            <CommandMenu.Keyboard keys=\"⌘N\" />\n          </CommandMenu.Item>\n\n          <CommandMenu.Item>\n            Privacy Settings\n            <CommandMenu.Keyboard keys=\"⌘S\" />\n          </CommandMenu.Item>\n\n          <CommandMenu.Item>\n            Billing Information\n            <CommandMenu.Keyboard keys=\"⌘B\" />\n          </CommandMenu.Item>\n\n          <CommandMenu.Item>\n            Logout\n            <CommandMenu.Keyboard keys=\"⌘L\" />\n          </CommandMenu.Item>\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "controls/command-menu/command-menu-description-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-description-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconCube } from \"justd-icons\"\nimport { Button, CommandMenu } from \"ui\"\n\nexport default function CommandMenuDescriptionDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button appearance=\"outline\" onPress={() => setIsOpen(true)}>\n        Open\n      </Button>\n      <CommandMenu\n        messageOnEmpty={false}\n        hideCloseButton\n        hideSearchIndicator\n        isOpen={isOpen}\n        onOpenChange={setIsOpen}\n      >\n        <CommandMenu.Input placeholder=\"Search for apps and commands...\" />\n        <CommandMenu.Empty className=\"grid place-content-center\">\n          <div className=\"text-center\">\n            <IconCube className=\"inline\" />\n            <p className=\"mt-2\">No results found.</p>\n          </div>\n        </CommandMenu.Empty>\n\n        <CommandMenu.List>\n          <CommandMenu.Section separator heading=\"Suggestions\">\n            <CommandMenu.Item>\n              PhpStorm\n              <CommandMenu.Description>Application</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item>\n              WebStorm\n              <CommandMenu.Description>Application</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item>\n              Warp\n              <CommandMenu.Description>Application</CommandMenu.Description>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n\n          <CommandMenu.Section separator heading=\"Applications\">\n            <CommandMenu.Item>\n              Terminal\n              <CommandMenu.Description>Application</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item>\n              Docker\n              <CommandMenu.Description>Application</CommandMenu.Description>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n\n          <CommandMenu.Section separator heading=\"Commands\">\n            <CommandMenu.Item>\n              git status\n              <CommandMenu.Description>Command</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item>\n              bun add\n              <CommandMenu.Description>Command</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item>\n              composer require\n              <CommandMenu.Description>Command</CommandMenu.Description>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n\n          <CommandMenu.Section heading=\"System Settings\">\n            <CommandMenu.Item>\n              Display Brightness\n              <CommandMenu.Description>System Settings</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item>\n              Sound Output\n              <CommandMenu.Description>System Settings</CommandMenu.Description>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "controls/command-menu/command-menu-controlled-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Avatar, Button, CommandMenu } from \"ui\"\n\nexport default function CommandMenuControlledDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  const [value, setValue] = React.useState(\"\")\n  return (\n    <>\n      <Button appearance=\"outline\" onPress={() => setIsOpen(true)}>\n        Open\n      </Button>\n      <CommandMenu onValueChange={setValue} value={value} isOpen={isOpen} onOpenChange={setIsOpen}>\n        <CommandMenu.Input defaultValue={value} placeholder=\"Quick search...\" />\n        <CommandMenu.List>\n          {users.map((user) => (\n            <CommandMenu.Item key={user.id} value={user.name}>\n              <Avatar src={user.image_url} />\n              {user.name}{\" \"}\n              {user.name === value && (\n                <CommandMenu.Description>Selected: {value}</CommandMenu.Description>\n              )}\n            </CommandMenu.Item>\n          ))}\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n\nconst users = [\n  { id: 1, name: \"Barbara Kirlin Sr.\", image_url: \"https://i.pravatar.cc/150?img=1\" },\n  { id: 2, name: \"Rosemarie Koch\", image_url: \"https://i.pravatar.cc/150?img=2\" },\n  { id: 3, name: \"Mrs. Reva Heaney Jr.\", image_url: \"https://i.pravatar.cc/150?img=3\" },\n  { id: 4, name: \"Ms. Ettie Abshire DVM\", image_url: \"https://i.pravatar.cc/150?img=4\" },\n  { id: 5, name: \"Bria Ziemann\", image_url: \"https://i.pravatar.cc/150?img=5\" },\n  { id: 6, name: \"Heloise Borer Sr.\", image_url: \"https://i.pravatar.cc/150?img=6\" },\n  {\n    id: 7,\n    name: \"Miss Jacinthe Gerlach DVM\",\n    image_url: \"https://i.pravatar.cc/150?img=7\"\n  },\n  {\n    id: 8,\n    name: \"Miss Stephania Schaefer Sr.\",\n    image_url: \"https://i.pravatar.cc/150?img=8\"\n  },\n  { id: 9, name: \"Kevon Hackett MD\", image_url: \"https://i.pravatar.cc/150?img=9\" },\n  { id: 10, name: \"Tom Ledner\", image_url: \"https://i.pravatar.cc/150?img=10\" }\n]\n",
    "type": "docs"
  },
  "controls/command-menu/command-menu-danger-item-demo": {
    "component": "@/components/docs/controls/command-menu/command-menu-danger-item-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Button, CommandMenu } from \"ui\"\n\nexport default function CommandMenuDangerItemDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button appearance=\"outline\" onPress={() => setIsOpen(true)}>\n        Open\n      </Button>\n      <CommandMenu isOpen={isOpen} onOpenChange={setIsOpen}>\n        <CommandMenu.Input placeholder=\"Quick search...\" />\n        <CommandMenu.List>\n          <CommandMenu.Section>\n            <CommandMenu.Item>System Shutdown</CommandMenu.Item>\n            <CommandMenu.Item isDanger>Format Disk</CommandMenu.Item>\n            <CommandMenu.Item>Restart Service</CommandMenu.Item>\n            <CommandMenu.Item>Empty Trash</CommandMenu.Item>\n            <CommandMenu.Item>Overwrite File</CommandMenu.Item>\n            <CommandMenu.Item isDanger>Reset Factory Settings</CommandMenu.Item>\n            <CommandMenu.Item>Disconnect Network</CommandMenu.Item>\n          </CommandMenu.Section>\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "controls/switch/switch-variant-demo": {
    "component": "@/components/docs/controls/switch/switch-variant-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { OptionPreview } from \"@/components/docs/outside/option-preview\"\nimport { Select, Switch } from \"ui\"\n\nconst items = [\"primary\", \"secondary\", \"success\", \"danger\", \"warning\"].map((item) => ({\n  value: item,\n  label: item\n}))\nexport default function SwitchVariantDemo() {\n  const [intent, setIntent] = React.useState(\"primary\")\n\n  return (\n    <>\n      <OptionPreview>\n        <Select selectedKey={intent} onSelectionChange={(v) => setIntent(v as any)}>\n          <Select.Trigger />\n          <Select.List items={items}>\n            {(item) => (\n              <Select.Option id={item.value} textValue={item.value}>\n                {item.label}\n              </Select.Option>\n            )}\n          </Select.List>\n        </Select>\n      </OptionPreview>\n      <Switch defaultSelected intent={intent as any}>\n        Label\n      </Switch>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "controls/switch/switch-demo": {
    "component": "@/components/docs/controls/switch/switch-demo",
    "raw": "\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Switch } from \"ui\"\n\nexport default function SwitchDemo() {\n  const { resolvedTheme, setTheme } = useTheme()\n  return (\n    <Switch onChange={() => setTheme(resolvedTheme === \"light\" ? \"dark\" : \"light\")}>\n      Switch Theme\n    </Switch>\n  )\n}\n",
    "type": "docs"
  },
  "controls/switch/switch-controlled-demo": {
    "component": "@/components/docs/controls/switch/switch-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Description, Switch } from \"ui\"\n\nexport default function SwitchControlledDemo() {\n  const [darkMode, setDarkMode] = React.useState(false)\n  return (\n    <>\n      <Switch isSelected={darkMode} onChange={setDarkMode} value=\"dark_mode\">\n        Enable Dark Mode\n      </Switch>\n\n      <Description className=\"mt-2 block [&>strong]:text-fg\">\n        Dark Mode is <strong>{darkMode ? \"enabled\" : \"disabled\"}</strong>\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "controls/switch/switch-disabled-demo": {
    "component": "@/components/docs/controls/switch/switch-disabled-demo",
    "raw": "\"use client\"\n\nimport { Switch } from \"ui\"\n\nexport default function SwitchDemo() {\n  return <Switch isDisabled>Dark Mode</Switch>\n}\n",
    "type": "docs"
  },
  "drag-and-drop/drop-zone-and-file-trigger-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-and-file-trigger-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { DropEvent } from \"@react-types/shared\"\nimport { IconGallery } from \"justd-icons\"\nimport { isFileDropItem } from \"react-aria-components\"\nimport { Description, DropZone, FileTrigger } from \"ui\"\n\nexport default function DropZoneAndFileTriggerDemo() {\n  const [droppedImage, setDroppedImage] = React.useState<string | undefined>(undefined)\n\n  const onDropHandler = async (e: DropEvent) => {\n    const item = e.items\n      .filter(isFileDropItem)\n      .find((item) => item.type === \"image/jpeg\" || item.type === \"image/png\")\n    if (item) {\n      const file = await item.getFile()\n      setDroppedImage(URL.createObjectURL(file))\n    }\n  }\n\n  const onSelectHandler = async (e: any) => {\n    if (e) {\n      const files = Array.from([...e])\n      const item = files[0]\n\n      if (item) {\n        setDroppedImage(URL.createObjectURL(item))\n      }\n    }\n  }\n  return (\n    <DropZone\n      getDropOperation={(types) =>\n        types.has(\"image/jpeg\") || types.has(\"image/png\") ? \"copy\" : \"cancel\"\n      }\n      onDrop={onDropHandler}\n    >\n      {droppedImage ? (\n        <img alt=\"\" src={droppedImage} className=\"aspect-square size-full object-contain\" />\n      ) : (\n        <div className=\"grid space-y-3\">\n          <div className=\"size-12 mx-auto grid place-content-center rounded-full border bg-secondary/70 group-data-[drop-target]:bg-primary/20 group-data-[drop-target]:border-primary/70\">\n            <IconGallery className=\"size-5\" />\n          </div>\n          <div className=\"justify-center flex\">\n            <FileTrigger\n              acceptedFileTypes={[\"image/png\", \"image/jpeg\"]}\n              allowsMultiple={false}\n              onSelect={onSelectHandler}\n            >\n              Upload a file\n            </FileTrigger>\n          </div>\n          <Description>Or drag and drop PNG, JPG, GIF up to 10MB</Description>\n        </div>\n      )}\n      <input type=\"hidden\" name=\"image\" value={droppedImage} />\n    </DropZone>\n  )\n}\n",
    "type": "docs"
  },
  "drag-and-drop/drop-zone-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { DropZone, Label } from \"ui\"\n\nexport default function DropZoneDemo() {\n  const [dropped, setDropped] = React.useState(false)\n\n  return (\n    <DropZone onDrop={() => setDropped(true)}>\n      <Label>{dropped ? \"Drop nailed\" : \"Toss your stuff here\"}</Label>\n    </DropZone>\n  )\n}\n",
    "type": "docs"
  },
  "layouts/navbar/navbar-icon-demo": {
    "component": "@/components/docs/layouts/navbar/navbar-icon-demo",
    "raw": "import {\n  IconBrandApple,\n  IconBrandJustd,\n  IconChartBar,\n  IconChevronLgDown,\n  IconColors,\n  IconCommandRegular,\n  IconDashboard,\n  IconHeadphones,\n  IconLogout,\n  IconNotes,\n  IconSearch,\n  IconSettings,\n  IconShoppingBag,\n  IconSidebar\n} from \"justd-icons\"\nimport { Avatar, Button, Menu, Navbar, Separator } from \"ui\"\n\nexport default function NavbarIconDemo() {\n  return (\n    <Navbar>\n      <Navbar.Nav>\n        <Navbar.Logo href=\"/docs/2.x/components/layouts/navbar\">\n          <IconBrandJustd className=\"size-5\" />\n          <strong className=\"font-semibold\">Justd</strong>\n        </Navbar.Logo>\n        <Navbar.Section>\n          <Navbar.Item href=\"/docs/2.x/components/layouts/navbar\">\n            <IconNotes />\n            Documentation\n          </Navbar.Item>\n          <Navbar.Item href=\"https://getjustd.com/docs/2.x/components/layouts/sidebar\">\n            <IconSidebar /> Sidebar\n          </Navbar.Item>\n          <Navbar.Item href=\"https://getjustd.com/themes\">\n            <IconColors /> Themes\n          </Navbar.Item>\n          <Navbar.Item href=\"https://getjustd.com/charts\">\n            <IconChartBar /> Charts\n          </Navbar.Item>\n        </Navbar.Section>\n      </Navbar.Nav>\n      <Navbar.Compact>\n        <Navbar.Flex>\n          <Navbar.Trigger className=\"-ml-2\" />\n          <Separator orientation=\"vertical\" className=\"h-6 mx-2\" />\n          <Navbar.Logo href=\"/docs/2.x/components/layouts/navbar\">\n            <IconBrandApple className=\"size-5\" />\n          </Navbar.Logo>\n        </Navbar.Flex>\n        <Navbar.Flex>\n          <Navbar.Flex>\n            <Button appearance=\"plain\" size=\"square-petite\" aria-label=\"Search for products\">\n              <IconSearch />\n            </Button>\n            <Button appearance=\"plain\" size=\"square-petite\" aria-label=\"Your Bag\">\n              <IconShoppingBag />\n            </Button>\n          </Navbar.Flex>\n          <Separator orientation=\"vertical\" className=\"h-6 ml-1 mr-3\" />\n          <Menu>\n            <Menu.Trigger aria-label=\"Open Menu\" className=\"group gap-x-2 flex items-center\">\n              <Avatar\n                alt=\"slash\"\n                size=\"small\"\n                shape=\"square\"\n                src=\"/images/sidebar/profile-slash.jpg\"\n              />\n              <IconChevronLgDown className=\"size-4 group-pressed:rotate-180 transition-transform\" />\n            </Menu.Trigger>\n            <Menu.Content placement=\"bottom\" showArrow className=\"sm:min-w-56\">\n              <Menu.Section>\n                <Menu.Header separator>\n                  <span className=\"block\">Irsyad A. Panjaitan</span>\n                  <span className=\"font-normal text-muted-fg\">@irsyadadl</span>\n                </Menu.Header>\n              </Menu.Section>\n\n              <Menu.Item href=\"#dashboard\">\n                <IconDashboard />\n                Dashboard\n              </Menu.Item>\n              <Menu.Item href=\"#settings\">\n                <IconSettings />\n                Settings\n              </Menu.Item>\n              <Menu.Separator />\n              <Menu.Item>\n                <IconCommandRegular />\n                Command Menu\n              </Menu.Item>\n              <Menu.Separator />\n              <Menu.Item href=\"#contact-s\">\n                <IconHeadphones />\n                Contact Support\n              </Menu.Item>\n              <Menu.Separator />\n              <Menu.Item href=\"#logout\">\n                <IconLogout />\n                Log out\n              </Menu.Item>\n            </Menu.Content>\n          </Menu>\n        </Navbar.Flex>\n      </Navbar.Compact>\n    </Navbar>\n  )\n}\n",
    "type": "docs"
  },
  "layouts/navbar/navbar-disabled-demo": {
    "component": "@/components/docs/layouts/navbar/navbar-disabled-demo",
    "raw": "\"use client\"\n\nimport { IconBrandApple } from \"justd-icons\"\nimport { Navbar } from \"ui\"\n\nexport default function NavbarDisabledDemo() {\n  return (\n    <Navbar>\n      <Navbar.Nav>\n        <Navbar.Logo href=\"#\">\n          <IconBrandApple className=\"size-5\" />\n        </Navbar.Logo>\n        <Navbar.Section>\n          <Navbar.Item href=\"#\">Store</Navbar.Item>\n          <Navbar.Item isDisabled href=\"#\">\n            Mac\n          </Navbar.Item>\n          <Navbar.Item href=\"#\">iPad</Navbar.Item>\n          <Navbar.Item href=\"#\">iPhone</Navbar.Item>\n        </Navbar.Section>\n      </Navbar.Nav>\n    </Navbar>\n  )\n}\n",
    "type": "docs"
  },
  "layouts/navbar/navbar-current-demo": {
    "component": "@/components/docs/layouts/navbar/navbar-current-demo",
    "raw": "\"use client\"\n\nimport { IconBrandApple, IconSearch, IconShoppingBag } from \"justd-icons\"\nimport { Button, Navbar } from \"ui\"\n\nexport default function NavbarCurrentDemo() {\n  return (\n    <Navbar>\n      <Navbar.Nav>\n        <Navbar.Logo href=\"#\">\n          <IconBrandApple className=\"size-5\" />\n        </Navbar.Logo>\n        <Navbar.Section>\n          <Navbar.Item href=\"#\">Store</Navbar.Item>\n          <Navbar.Item isCurrent href=\"#\">\n            Mac\n          </Navbar.Item>\n          <Navbar.Item href=\"#\">iPad</Navbar.Item>\n          <Navbar.Item href=\"#\">iPhone</Navbar.Item>\n        </Navbar.Section>\n      </Navbar.Nav>\n      <Navbar.Compact>\n        <Navbar.Flex>\n          <Navbar.Trigger className=\"-ml-2\" />\n        </Navbar.Flex>\n        <Navbar.Flex>\n          <Navbar.Flex>\n            <Button appearance=\"plain\" size=\"square-petite\" aria-label=\"Search for products\">\n              <IconSearch />\n            </Button>\n            <Button appearance=\"plain\" size=\"square-petite\" aria-label=\"Your Bag\">\n              <IconShoppingBag />\n            </Button>\n          </Navbar.Flex>\n        </Navbar.Flex>\n      </Navbar.Compact>\n      <Navbar.Inset>{/* your main content */}</Navbar.Inset>\n    </Navbar>\n  )\n}\n",
    "type": "docs"
  },
  "layouts/navbar/navbar-floating-demo": {
    "component": "@/components/docs/layouts/navbar/navbar-floating-demo",
    "raw": "\"use client\"\n\nimport { IconBrandApple, IconSearch, IconShoppingBag } from \"justd-icons\"\nimport { Button, Navbar } from \"ui\"\n\nexport default function NavbarFloatingDemo() {\n  return (\n    <Navbar intent=\"floating\">\n      <Navbar.Nav>\n        <Navbar.Logo href=\"#\">\n          <IconBrandApple className=\"size-5\" />\n        </Navbar.Logo>\n        <Navbar.Section>\n          <Navbar.Item href=\"#\">Store</Navbar.Item>\n          <Navbar.Item isCurrent href=\"#\">\n            Mac\n          </Navbar.Item>\n          <Navbar.Item href=\"#\">iPad</Navbar.Item>\n          <Navbar.Item href=\"#\">iPhone</Navbar.Item>\n        </Navbar.Section>\n      </Navbar.Nav>\n      <Navbar.Compact>\n        <Navbar.Flex>\n          <Navbar.Trigger className=\"-ml-2\" />\n        </Navbar.Flex>\n        <Navbar.Flex>\n          <Navbar.Flex>\n            <Button appearance=\"plain\" size=\"square-petite\" aria-label=\"Search for products\">\n              <IconSearch />\n            </Button>\n            <Button appearance=\"plain\" size=\"square-petite\" aria-label=\"Your Bag\">\n              <IconShoppingBag />\n            </Button>\n          </Navbar.Flex>\n        </Navbar.Flex>\n      </Navbar.Compact>\n      <Navbar.Inset>{/* your main content */}</Navbar.Inset>\n    </Navbar>\n  )\n}\n",
    "type": "docs"
  },
  "layouts/navbar/navbar-logo-demo": {
    "component": "@/components/docs/layouts/navbar/navbar-logo-demo",
    "raw": "\"use client\"\n\nimport { IconBrandApple, IconSearch, IconShoppingBag } from \"justd-icons\"\nimport { Button, Navbar } from \"ui\"\n\nexport default function NavbarLogoDemo() {\n  return (\n    <Navbar>\n      <Navbar.Nav>\n        <Navbar.Logo href=\"#\">\n          <IconBrandApple className=\"size-5\" />\n        </Navbar.Logo>\n        <Navbar.Section>\n          <Navbar.Item href=\"#\">Store</Navbar.Item>\n          <Navbar.Item href=\"#\">Mac</Navbar.Item>\n        </Navbar.Section>\n      </Navbar.Nav>\n      <Navbar.Compact>\n        <Navbar.Flex>\n          <Navbar.Trigger className=\"-ml-2\" />\n        </Navbar.Flex>\n        <Navbar.Flex>\n          <Navbar.Flex>\n            <Button appearance=\"plain\" size=\"square-petite\" aria-label=\"Search for products\">\n              <IconSearch />\n            </Button>\n            <Button appearance=\"plain\" size=\"square-petite\" aria-label=\"Your Bag\">\n              <IconShoppingBag />\n            </Button>\n          </Navbar.Flex>\n        </Navbar.Flex>\n      </Navbar.Compact>\n      <Navbar.Inset>{/* your main content */}</Navbar.Inset>\n    </Navbar>\n  )\n}\n",
    "type": "docs"
  },
  "layouts/navbar/navbar-creating-demo": {
    "component": "@/components/docs/layouts/navbar/navbar-creating-demo",
    "raw": "\"use client\"\n\nimport { IconBrandGoogle, IconSearch, IconShoppingBag } from \"justd-icons\"\nimport { Button, Navbar } from \"ui\"\n\nexport default function AppNavbar(props: React.ComponentProps<typeof Navbar>) {\n  return (\n    <Navbar {...props}>\n      <Navbar.Nav>\n        <Navbar.Logo href=\"#\">\n          <IconBrandGoogle className=\"size-5\" />\n        </Navbar.Logo>\n        <Navbar.Section>\n          <Navbar.Item href=\"/docs/2.x/components/layouts/navbar\">Documentation</Navbar.Item>\n          <Navbar.Item href=\"#\">Features</Navbar.Item>\n          <Navbar.Item href=\"#\">Support</Navbar.Item>\n          <Navbar.Item href=\"#\">Pricing</Navbar.Item>\n        </Navbar.Section>\n      </Navbar.Nav>\n      <Navbar.Compact>\n        <Navbar.Flex>\n          <Navbar.Trigger className=\"-ml-2\" />\n        </Navbar.Flex>\n        <Navbar.Flex>\n          <Navbar.Flex>\n            <Button appearance=\"plain\" size=\"square-petite\" aria-label=\"Search for products\">\n              <IconSearch />\n            </Button>\n            <Button appearance=\"plain\" size=\"square-petite\" aria-label=\"Your Bag\">\n              <IconShoppingBag />\n            </Button>\n          </Navbar.Flex>\n        </Navbar.Flex>\n      </Navbar.Compact>\n      {/*<Navbar.Inset>*/}\n      {/*  <Heading>Home</Heading>*/}\n      {/*</Navbar.Inset>*/}\n    </Navbar>\n  )\n}\n",
    "type": "docs"
  },
  "layouts/navbar/navbar-basic-demo": {
    "component": "@/components/docs/layouts/navbar/navbar-basic-demo",
    "raw": "\"use client\"\n\nimport {\n  IconBrandApple,\n  IconChevronLgDown,\n  IconCommandRegular,\n  IconDashboard,\n  IconHeadphones,\n  IconLogout,\n  IconSearch,\n  IconSettings,\n  IconShoppingBag\n} from \"justd-icons\"\nimport { Avatar, Button, Container, Heading, Menu, Navbar, Separator } from \"ui\"\n\nexport default function NavbarBasicDemo() {\n  return (\n    <Navbar>\n      <Navbar.Nav>\n        <Navbar.Logo href=\"#\">\n          <IconBrandApple className=\"size-5\" />\n        </Navbar.Logo>\n        <Navbar.Section>\n          <Navbar.Item href=\"#\">Store</Navbar.Item>\n          <Navbar.Item href=\"#\">Mac</Navbar.Item>\n          <Navbar.Item href=\"#\">iPad</Navbar.Item>\n          <Navbar.Item href=\"#\">iPhone</Navbar.Item>\n        </Navbar.Section>\n        <Navbar.Section className=\"ml-auto hidden lg:flex\">\n          <div className=\"flex items-center gap-x-2\">\n            <Button appearance=\"plain\" size=\"square-petite\" aria-label=\"Search for products\">\n              <IconSearch />\n            </Button>\n            <Button appearance=\"plain\" size=\"square-petite\" aria-label=\"Your Bag\">\n              <IconShoppingBag />\n            </Button>\n          </div>\n          <Separator orientation=\"vertical\" className=\"h-6 ml-1 mr-3\" />\n          <Menu>\n            <Menu.Trigger aria-label=\"Open Menu\" className=\"group gap-x-2 flex items-center\">\n              <Avatar\n                alt=\"slash\"\n                size=\"small\"\n                shape=\"square\"\n                src=\"/images/sidebar/profile-slash.jpg\"\n              />\n              <IconChevronLgDown className=\"size-4 group-pressed:rotate-180 transition-transform\" />\n            </Menu.Trigger>\n            <Menu.Content placement=\"bottom\" showArrow className=\"sm:min-w-56\">\n              <Menu.Section>\n                <Menu.Header separator>\n                  <span className=\"block\">Irsyad A. Panjaitan</span>\n                  <span className=\"font-normal text-muted-fg\">@irsyadadl</span>\n                </Menu.Header>\n              </Menu.Section>\n\n              <Menu.Item href=\"#dashboard\">\n                <IconDashboard />\n                Dashboard\n              </Menu.Item>\n              <Menu.Item href=\"#settings\">\n                <IconSettings />\n                Settings\n              </Menu.Item>\n              <Menu.Separator />\n              <Menu.Item>\n                <IconCommandRegular />\n                Command Menu\n              </Menu.Item>\n              <Menu.Separator />\n              <Menu.Item href=\"#contact-s\">\n                <IconHeadphones />\n                Contact Support\n              </Menu.Item>\n              <Menu.Separator />\n              <Menu.Item href=\"#logout\">\n                <IconLogout />\n                Log out\n              </Menu.Item>\n            </Menu.Content>\n          </Menu>\n        </Navbar.Section>\n      </Navbar.Nav>\n      <Navbar.Compact>\n        <Navbar.Flex>\n          <Navbar.Trigger className=\"-ml-2\" />\n        </Navbar.Flex>\n        <Navbar.Flex>\n          <Navbar.Flex>\n            <Button appearance=\"plain\" size=\"square-petite\" aria-label=\"Search for products\">\n              <IconSearch />\n            </Button>\n            <Button appearance=\"plain\" size=\"square-petite\" aria-label=\"Your Bag\">\n              <IconShoppingBag />\n            </Button>\n          </Navbar.Flex>\n        </Navbar.Flex>\n      </Navbar.Compact>\n\n      <Navbar.Inset>\n        <Container className=\"sm:py-12 py-6\">\n          <Heading>Home</Heading>\n        </Container>\n      </Navbar.Inset>\n    </Navbar>\n  )\n}\n",
    "type": "docs"
  },
  "layouts/navbar/navbar-intent-demo": {
    "component": "@/components/docs/layouts/navbar/navbar-intent-demo",
    "raw": "\"use client\"\n\nimport { IconBrandApple, IconSearch, IconShoppingBag } from \"justd-icons\"\nimport { Button, Navbar } from \"ui\"\n\nexport default function NavbarIntentDemo() {\n  return (\n    <Navbar intent=\"inset\">\n      <Navbar.Nav>\n        <Navbar.Logo href=\"#\">\n          <IconBrandApple className=\"size-5\" />\n        </Navbar.Logo>\n        <Navbar.Section>\n          <Navbar.Item href=\"#\">Store</Navbar.Item>\n          <Navbar.Item isCurrent href=\"#\">\n            Mac\n          </Navbar.Item>\n          <Navbar.Item href=\"#\">iPad</Navbar.Item>\n          <Navbar.Item href=\"#\">iPhone</Navbar.Item>\n        </Navbar.Section>\n      </Navbar.Nav>\n      <Navbar.Compact>\n        <Navbar.Flex>\n          <Navbar.Trigger className=\"-ml-2\" />\n        </Navbar.Flex>\n        <Navbar.Flex>\n          <Navbar.Flex>\n            <Button appearance=\"plain\" size=\"square-petite\" aria-label=\"Search for products\">\n              <IconSearch />\n            </Button>\n            <Button appearance=\"plain\" size=\"square-petite\" aria-label=\"Your Bag\">\n              <IconShoppingBag />\n            </Button>\n          </Navbar.Flex>\n        </Navbar.Flex>\n      </Navbar.Compact>\n      <Navbar.Inset>{/* your main content */}</Navbar.Inset>\n    </Navbar>\n  )\n}\n",
    "type": "docs"
  },
  "colors/controlled-values": {
    "component": "@/components/docs/colors/controlled-values",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { ColorFormat } from \"@react-types/color\"\nimport { Card, ColorSwatch } from \"ui\"\n\nconst formats: string[] = [\"hex\", \"hexa\", \"rgb\", \"rgba\", \"hsl\", \"hsla\", \"hsb\", \"hsba\"]\nexport function ControlledValues({ color }: { color: any }) {\n  return (\n    <Card className=\"p-3 min-w-[15.5rem] sm:min-w-72 text-center bg-transparent flex flex-col gap-y-2 [&>span]:flex [&>span]:gap-x-6 [&>span]:justify-between\">\n      {formats.map((format) => (\n        <span key={format}>\n          <span className=\"flex gap-x-1.5 items-center\">\n            <ColorSwatch\n              aria-label=\"color picked\"\n              className=\"size-4 rounded\"\n              color={color.toString(format as ColorFormat | \"css\" | undefined)}\n            />\n            <span className=\"uppercase text-xs\">{format}</span>\n          </span>\n          <span className=\"text-xs sm:text-sm\">\n            {color.toString(format as ColorFormat | \"css\" | undefined)}\n          </span>\n        </span>\n      ))}\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-slider/color-slider-disabled-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-disabled-demo",
    "raw": "\"use client\"\n\nimport { ColorSlider } from \"ui\"\n\nexport default function ColorSliderDisabledDemo() {\n  return <ColorSlider isDisabled channel=\"hue\" defaultValue=\"hsl(0, 100%, 50%)\" />\n}\n",
    "type": "docs"
  },
  "colors/color-slider/color-slider-vertical-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-vertical-demo",
    "raw": "\"use client\"\n\nimport { ColorSlider } from \"ui\"\n\nexport default function ColorSliderVerticalDemo() {\n  return (\n    <div className=\"flex items-center justify-center\">\n      <ColorSlider\n        orientation=\"vertical\"\n        label=\"Fill Color\"\n        channel=\"hue\"\n        defaultValue=\"hsl(0, 100%, 50%)\"\n      />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-slider/color-slider-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-demo",
    "raw": "\"use client\"\n\nimport { ColorSlider } from \"ui\"\n\nexport default function ColorSliderDemo() {\n  return <ColorSlider channel=\"hue\" defaultValue=\"hsl(0, 100%, 50%)\" />\n}\n",
    "type": "docs"
  },
  "colors/color-slider/color-slider-with-label-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-with-label-demo",
    "raw": "\"use client\"\n\nimport { ColorSlider } from \"ui\"\n\nexport default function ColorSliderWithLabelDemo() {\n  return <ColorSlider label=\"Color Customizer\" channel=\"hue\" defaultValue=\"hsl(0, 100%, 50%)\" />\n}\n",
    "type": "docs"
  },
  "colors/color-slider/color-slider-controlled-demo": {
    "component": "@/components/docs/colors/color-slider/color-slider-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ControlledValues } from \"@/components/docs/colors/controlled-values\"\nimport { ColorSlider, defaultColor } from \"ui\"\n\nexport default function ColorSliderControlledDemo() {\n  const [value, setValue] = React.useState(defaultColor)\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <ColorSlider channel=\"hue\" value={value} onChange={setValue} />\n      <ControlledValues color={value} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-area/color-area-channel-demo": {
    "component": "@/components/docs/colors/color-area/color-area-channel-demo",
    "raw": "\"use client\"\n\nimport { ColorArea } from \"ui\"\n\nexport default function ColorAreaChannelDemo() {\n  return <ColorArea xChannel=\"alpha\" yChannel=\"blue\" />\n}\n",
    "type": "docs"
  },
  "colors/color-area/color-area-demo": {
    "component": "@/components/docs/colors/color-area/color-area-demo",
    "raw": "\"use client\"\n\nimport { ColorArea } from \"ui\"\n\nexport default function ColorAreaDemo() {\n  return <ColorArea />\n}\n",
    "type": "docs"
  },
  "colors/color-area/color-area-space-demo": {
    "component": "@/components/docs/colors/color-area/color-area-space-demo",
    "raw": "\"use client\"\n\nimport { ColorArea, ColorThumb } from \"ui\"\n\nexport default function ColorAreaSpaceDemo() {\n  return (\n    <ColorArea colorSpace=\"rgb\">\n      <ColorThumb />\n    </ColorArea>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-area/color-area-controlled-demo": {
    "component": "@/components/docs/colors/color-area/color-area-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ControlledValues } from \"@/components/docs/colors/controlled-values\"\nimport { parseColor } from \"@react-stately/color\"\nimport { ColorArea, ColorThumb } from \"ui\"\n\nexport default function ColorAreaControlledDemo() {\n  const [value, setValue] = React.useState(parseColor(\"hsl(0, 100%, 50%)\"))\n\n  return (\n    <div className=\"flex flex-col lg:flex-row gap-2 lg:gap-4\">\n      <ColorArea value={value} onChange={setValue}>\n        <ColorThumb />\n      </ColorArea>\n      <ControlledValues color={value} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-area/color-area-with-slider-demo": {
    "component": "@/components/docs/colors/color-area/color-area-with-slider-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { parseColor } from \"@react-stately/color\"\nimport { ColorArea, ColorField, ColorSlider } from \"ui\"\n\nexport default function ColorAreaWithSliderDemo() {\n  const [color, setColor] = React.useState(parseColor(\"hsl(50, 100%, 50%)\"))\n  return (\n    <div className=\"flex max-w-60 flex-col gap-y-2\">\n      <ColorArea\n        className=\"w-full shrink-0\"\n        value={color}\n        onChange={setColor}\n        xChannel=\"saturation\"\n        yChannel=\"lightness\"\n      />\n      <ColorSlider\n        label=\"Fill Color\"\n        className=\"orientation-horizontal:w-full\"\n        channel=\"hue\"\n        value={color}\n        onChange={setColor}\n      />\n\n      <ColorField label=\"Current Color\" enableColorPicker={false} value={color.toString(\"hex\")} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-area/color-area-disabled-demo": {
    "component": "@/components/docs/colors/color-area/color-area-disabled-demo",
    "raw": "\"use client\"\n\nimport { ColorArea, ColorThumb as Thumb } from \"ui\"\n\nexport default function ColorAreaDisabledDemo() {\n  return (\n    <ColorArea isDisabled>\n      <Thumb />\n    </ColorArea>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-field/color-field-disabled-demo": {
    "component": "@/components/docs/colors/color-field/color-field-disabled-demo",
    "raw": "\"use client\"\n\nimport { ColorField } from \"ui\"\n\nexport default function ColorFieldDisabledDemo() {\n  return <ColorField isDisabled label=\"Color\" placeholder=\"#FAFAFA\" />\n}\n",
    "type": "docs"
  },
  "colors/color-field/color-field-with-prefix-demo": {
    "component": "@/components/docs/colors/color-field/color-field-with-prefix-demo",
    "raw": "\"use client\"\n\nimport { IconColors } from \"justd-icons\"\nimport { ColorField } from \"ui\"\n\nexport default function ColorFieldWithPrefixDemo() {\n  return <ColorField label=\"Color\" prefix={<IconColors />} placeholder=\"#FAFAFA\" />\n}\n",
    "type": "docs"
  },
  "colors/color-field/color-field-validation-demo": {
    "component": "@/components/docs/colors/color-field/color-field-validation-demo",
    "raw": "\"use client\"\n\nimport { Button, ColorField, Form } from \"ui\"\n\nexport default function ColorFieldValidationDemo() {\n  function submit(e: React.FormEvent) {\n    e.preventDefault()\n  }\n\n  return (\n    <Form onSubmit={submit} className=\"space-y-4\">\n      <ColorField label=\"Color\" isRequired placeholder=\"#FAFAFA\" />\n      <Button type=\"submit\">Save</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-field/color-field-with-suffix-demo": {
    "component": "@/components/docs/colors/color-field/color-field-with-suffix-demo",
    "raw": "\"use client\"\n\nimport { IconColors } from \"justd-icons\"\nimport { ColorField } from \"ui\"\n\nexport default function ColorFieldWithSuffixDemo() {\n  return <ColorField label=\"Color\" suffix={<IconColors />} placeholder=\"#FAFAFA\" />\n}\n",
    "type": "docs"
  },
  "colors/color-field/color-field-demo": {
    "component": "@/components/docs/colors/color-field/color-field-demo",
    "raw": "\"use client\"\n\nimport { ColorField } from \"ui\"\n\nexport default function ColorFieldDemo() {\n  return <ColorField label=\"Color\" placeholder=\"#FAFAFA\" />\n}\n",
    "type": "docs"
  },
  "colors/color-field/color-field-controlled-demo": {
    "component": "@/components/docs/colors/color-field/color-field-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ControlledValues } from \"@/components/docs/colors/controlled-values\"\nimport { type Color, parseColor } from \"@react-stately/color\"\nimport { ColorField } from \"ui\"\n\nexport default function ColorFieldControlledDemo() {\n  const [color, setColor] = React.useState(parseColor(\"#FAFAFA\"))\n  return (\n    <div className=\"flex flex-col lg:flex-row gap-2 lg:gap-4\">\n      <ColorField\n        className=\"min-w-56\"\n        value={color}\n        aria-label=\"Pick a color\"\n        onChange={(newColor: Color | null) => newColor && setColor(newColor)}\n        placeholder=\"#FAFAFA\"\n      />\n      <ControlledValues color={color} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-swatch/color-swatch-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-demo",
    "raw": "\"use client\"\n\nimport { ColorSwatch } from \"ui\"\n\nexport default function ColorSwatchDemo() {\n  return <ColorSwatch aria-label=\"Current color\" color=\"#0d6efd\" />\n}\n",
    "type": "docs"
  },
  "colors/color-swatch/color-swatch-picker-item-disabled-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-picker-item-disabled-demo",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { ControlledValues } from \"@/components/docs/colors/controlled-values\"\nimport { parseColor } from \"@react-stately/color\"\nimport { ColorSwatchPicker } from \"ui\"\n\nexport default function ColorSwatchPickerDemo() {\n  const [value, setValue] = React.useState(parseColor(\"#0d6efd\"))\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <ColorSwatchPicker\n        aria-label=\"Pick color\"\n        value={value}\n        onChange={setValue}\n        className=\"flex justify-center gap-2\"\n      >\n        <ColorSwatchPicker.Item isDisabled color=\"#f59e0b\" />\n        <ColorSwatchPicker.Item color=\"#84cc16\" />\n        <ColorSwatchPicker.Item color=\"#0d6efd\" />\n        <ColorSwatchPicker.Item isDisabled color=\"#ec4899\" />\n        <ColorSwatchPicker.Item isDisabled color=\"#f43f5e\" />\n      </ColorSwatchPicker>\n\n      <ControlledValues color={value} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-swatch/color-swatch-controlled-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-controlled-demo",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { ControlledValues } from \"@/components/docs/colors/controlled-values\"\nimport { parseColor } from \"@react-stately/color\"\nimport { ColorSwatchPicker } from \"ui\"\n\nexport default function ColorSwatchPickerDemo() {\n  const [value, setValue] = React.useState(parseColor(\"#0d6efd\"))\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <ColorSwatchPicker\n        aria-label=\"Pick color\"\n        value={value}\n        onChange={setValue}\n        className=\"flex justify-center gap-2\"\n      >\n        <ColorSwatchPicker.Item color=\"#f59e0b\" />\n        <ColorSwatchPicker.Item color=\"#84cc16\" />\n        <ColorSwatchPicker.Item color=\"#0d6efd\" />\n        <ColorSwatchPicker.Item color=\"#ec4899\" />\n        <ColorSwatchPicker.Item color=\"#f43f5e\" />\n      </ColorSwatchPicker>\n      <ControlledValues color={value} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-swatch/color-swatch-picker-demo": {
    "component": "@/components/docs/colors/color-swatch/color-swatch-picker-demo",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { parseColor } from \"@react-stately/color\"\nimport { ColorSwatchPicker } from \"ui\"\n\nexport default function ColorSwatchPickerDemo() {\n  const [value, setValue] = React.useState(parseColor(\"#0d6efd\"))\n  return (\n    <ColorSwatchPicker\n      aria-label=\"Pick color\"\n      value={value}\n      onChange={setValue}\n      className=\"grid grid-cols-3 lg:grid-cols-6 gap-2\"\n    >\n      <ColorSwatchPicker.Item color=\"#f59e0b\" />\n      <ColorSwatchPicker.Item color=\"#84cc16\" />\n      <ColorSwatchPicker.Item color=\"#0d6efd\" />\n      <ColorSwatchPicker.Item color=\"#ec4899\" />\n      <ColorSwatchPicker.Item color=\"#f43f5e\" />\n    </ColorSwatchPicker>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-picker/color-picker-controlled-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ControlledValues } from \"@/components/docs/colors/controlled-values\"\nimport { ColorPicker, defaultColor } from \"ui\"\n\nexport default function ColorPickerControlledDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n\n  return (\n    <div className=\"flex flex-col lg:flex-row gap-2 lg:gap-4\">\n      <ColorPicker value={color} onChange={setColor} />\n      <ControlledValues color={color} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-picker/color-picker-with-description-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-with-description-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ColorPicker, defaultColor } from \"ui\"\n\nexport default function ColorPickerWithDescriptionDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  return (\n    <ColorPicker\n      label=\"Theme Color\"\n      description=\"Snag a color for the app theme\"\n      value={color}\n      onChange={setColor}\n    />\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-picker/color-picker-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { parseColor } from \"@react-stately/color\"\nimport { ColorPicker } from \"ui\"\n\nexport default function ColorPickerDemo() {\n  const [color, setColor] = React.useState(parseColor(\"#0d6efd\"))\n  return <ColorPicker label=\"Color Picker\" value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-picker/color-picker-enable-swatch-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-enable-swatch-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { type Color } from \"react-aria-components\"\nimport {\n  ColorArea,\n  ColorField,\n  ColorPicker,\n  ColorSlider,\n  ColorSwatchPicker,\n  defaultColor\n} from \"ui\"\n\nexport default function ColorPickerEnableSwatchDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  const colorChangeHandler = (v: Color) => {\n    setColor(v)\n  }\n  return (\n    <ColorPicker value={color} onChange={(v) => colorChangeHandler(v)}>\n      <ColorArea colorSpace=\"hsb\" xChannel=\"saturation\" yChannel=\"brightness\" />\n      <ColorSlider colorSpace=\"hsb\" channel=\"hue\" />\n      <ColorField aria-label=\"Hex color\" />\n      <ColorSwatchPicker\n        aria-label=\"Color swatch picker\"\n        layout=\"grid\"\n        className=\"flex flex-wrap gap-2\"\n      >\n        {colors.map((color) => (\n          <ColorSwatchPicker.Item key={color} color={color} />\n        ))}\n      </ColorSwatchPicker>\n    </ColorPicker>\n  )\n}\n\nconst colors = [\n  \"#f59e0b\",\n  \"#84cc16\",\n  \"#0d6efd\",\n  \"#ec4899\",\n  \"#f43f5e\",\n  \"#d4b990\",\n  \"#b19f73\",\n  \"#9370db\",\n  \"#7d60df\"\n]\n",
    "type": "docs"
  },
  "colors/color-picker/color-picker-disabled-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-disabled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { parseColor } from \"@react-stately/color\"\nimport { ColorPicker } from \"ui\"\n\nexport default function ColorPickerDisabledDemo() {\n  const [color, setColor] = React.useState(parseColor(\"hsl(216, 98%, 52%)\"))\n  return <ColorPicker isDisabled label=\"Color Picker\" value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-picker/color-picker-with-label-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-with-label-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ColorPicker, defaultColor } from \"ui\"\n\nexport default function ColorPickerWithLabelDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  return <ColorPicker label=\"Theme Color\" value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-picker/color-picker-enable-selection-format-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-enable-selection-format-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { type ColorSpace, getColorChannels } from \"react-aria-components\"\nimport { ColorArea, ColorField, ColorPicker, defaultColor, Select } from \"ui\"\n\nexport default function ColorPickerEnableSelectionFormatDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  const [isHexFormat, setIsHexFormat] = React.useState(false)\n  const [space, setSpace] = React.useState<ColorSpace>(\"rgb\")\n  return (\n    <ColorPicker label={color.toString(space)} value={color} onChange={setColor}>\n      <>\n        <ColorArea />\n        <Select\n          aria-label=\"Color Space\"\n          selectedKey={space}\n          defaultSelectedKey={space}\n          onSelectionChange={(s) => {\n            setSpace(s as ColorSpace)\n            setIsHexFormat(s === \"hex\")\n          }}\n        >\n          <Select.Trigger />\n          <Select.List>\n            {[\"rgb\", \"hex\", \"hsl\", \"hsb\"].map((s) => (\n              <Select.Option key={s} id={s} textValue={s}>\n                {s}\n              </Select.Option>\n            ))}\n          </Select.List>\n        </Select>\n        {isHexFormat ? (\n          <ColorField aria-label=\"Hex color\" colorSpace={space} />\n        ) : getColorChannels(space).length > 0 ? (\n          <div className=\"flex sm:max-w-56 gap-2\">\n            {getColorChannels(space).map((channel) => (\n              <ColorField colorSpace={space} channel={channel} key={channel} />\n            ))}\n          </div>\n        ) : null}\n      </>\n    </ColorPicker>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-picker/color-picker-combination-demo": {
    "component": "@/components/docs/colors/color-picker/color-picker-combination-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { type ColorSpace, getColorChannels } from \"react-aria-components\"\nimport { ColorArea, ColorField, ColorPicker, ColorSlider, Select } from \"ui\"\n\nexport default function ColorPickerCombinationDemo() {\n  const [space, setSpace] = React.useState<ColorSpace>(\"rgb\")\n  return (\n    <ColorPicker label=\"Color picker\" defaultValue=\"#0d6efd\">\n      <ColorArea colorSpace={space} />\n      {getColorChannels(space).map((channel) => (\n        <ColorSlider showOutput={false} key={channel} colorSpace={space} channel={channel} />\n      ))}\n      <Select\n        aria-label=\"Color space\"\n        selectedKey={space}\n        onSelectionChange={(s) => setSpace(s as ColorSpace)}\n      >\n        <Select.Trigger />\n        <Select.List>\n          {[\"rgb\", \"hsb\", \"hsl\"].map((s) => (\n            <Select.Option key={s} id={s} textValue={s}>\n              {s}\n            </Select.Option>\n          ))}\n        </Select.List>\n      </Select>\n      <div className=\"flex gap-2 sm:max-w-56\">\n        {getColorChannels(space).map((channel) => (\n          <ColorField key={channel} colorSpace={space} channel={channel} className=\"w-full\" />\n        ))}\n      </div>\n    </ColorPicker>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-wheel/color-wheel-controlled-demo": {
    "component": "@/components/docs/colors/color-wheel/color-wheel-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ControlledValues } from \"@/components/docs/colors/controlled-values\"\nimport { parseColor } from \"@react-stately/color\"\nimport { ColorWheel } from \"ui\"\n\nexport default function ColorWheelControlledDemo() {\n  const [color, setColor] = React.useState(parseColor(\"hsl(0, 100%, 50%)\"))\n  return (\n    <div className=\"grid gap-4 justify-center items-center sm:grid-cols-2\">\n      <div className=\"shrink-0 grid place-content-center\">\n        <ColorWheel aria-label=\"Background color\" value={color} onChange={setColor} />\n      </div>\n      <ControlledValues color={color} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-wheel/color-wheel-disabled-demo": {
    "component": "@/components/docs/colors/color-wheel/color-wheel-disabled-demo",
    "raw": "\"use client\"\n\nimport { ColorWheel } from \"ui\"\n\nexport default function ColorWheelDisabledDemo() {\n  return <ColorWheel aria-label=\"Background color is disabled\" isDisabled />\n}\n",
    "type": "docs"
  },
  "colors/color-wheel/color-wheel-demo": {
    "component": "@/components/docs/colors/color-wheel/color-wheel-demo",
    "raw": "\"use client\"\n\nimport { ColorWheel } from \"ui\"\n\nexport default function ColorWheelDemo() {\n  return <ColorWheel aria-label=\"Background color\" />\n}\n",
    "type": "docs"
  },
  "pickers/multiple-select/multiple-select-disabled-demo": {
    "component": "@/components/docs/pickers/multiple-select/multiple-select-disabled-demo",
    "raw": "\"use client\"\n\nimport { useListData } from \"react-stately\"\nimport type { SelectedKey } from \"ui\"\nimport { MultipleSelect } from \"ui\"\n\nexport default function MultipleSelectDisabledDemo() {\n  const selectedItems = useListData<SelectedKey>({\n    initialItems: []\n  })\n  return (\n    <MultipleSelect\n      isDisabled\n      className=\"max-w-xs\"\n      label=\"Fruits\"\n      selectedItems={selectedItems}\n      items={fruits}\n      tag={(item) => <MultipleSelect.Tag textValue={item.name}>{item.name}</MultipleSelect.Tag>}\n    >\n      {(item) => {\n        return <MultipleSelect.Option textValue={item.name}>{item.name}</MultipleSelect.Option>\n      }}\n    </MultipleSelect>\n  )\n}\n\nconst fruits: SelectedKey[] = [{ id: 1, name: \"Apple\" }]\n",
    "type": "docs"
  },
  "pickers/multiple-select/multiple-select-demo": {
    "component": "@/components/docs/pickers/multiple-select/multiple-select-demo",
    "raw": "\"use client\"\n\nimport { useListData } from \"react-stately\"\nimport type { SelectedKey } from \"ui\"\nimport { MultipleSelect } from \"ui\"\n\nexport default function MultipleSelectDemo() {\n  const selectedItems = useListData<SelectedKey>({\n    initialItems: [fruits[0]]\n  })\n  return (\n    <MultipleSelect\n      className=\"max-w-xs\"\n      label=\"Fruits\"\n      selectedItems={selectedItems}\n      items={fruits}\n      tag={(item) => <MultipleSelect.Tag textValue={item.name}>{item.name}</MultipleSelect.Tag>}\n    >\n      {(item) => {\n        return <MultipleSelect.Option textValue={item.name}>{item.name}</MultipleSelect.Option>\n      }}\n    </MultipleSelect>\n  )\n}\n\nconst fruits: SelectedKey[] = [\n  { id: 1, name: \"Apple\" },\n  { id: 2, name: \"Banana\" },\n  { id: 3, name: \"Cherry\" },\n  { id: 4, name: \"Date\" },\n  { id: 5, name: \"Elderberry\" },\n  { id: 6, name: \"Fig\" },\n  { id: 7, name: \"Grape\" },\n  { id: 8, name: \"Honeydew\" },\n  { id: 9, name: \"Kiwi\" },\n  { id: 10, name: \"Lemon\" },\n  { id: 11, name: \"Mango\" },\n  { id: 12, name: \"Nectarine\" },\n  { id: 13, name: \"Orange\" },\n  { id: 14, name: \"Papaya\" },\n  { id: 15, name: \"Quince\" },\n  { id: 16, name: \"Raspberry\" },\n  { id: 17, name: \"Strawberry\" },\n  { id: 18, name: \"Tangerine\" },\n  { id: 19, name: \"Ugli Fruit\" },\n  { id: 20, name: \"Watermelon\" }\n]\n",
    "type": "docs"
  },
  "pickers/multiple-select/multiple-select-controlled-demo": {
    "component": "@/components/docs/pickers/multiple-select/multiple-select-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { useListData } from \"react-stately\"\nimport type { SelectedKey } from \"ui\"\nimport { Description, MultipleSelect } from \"ui\"\n\nconst tags = [\n  { id: 1, name: \"Travel\" },\n  { id: 2, name: \"Food\" },\n  { id: 3, name: \"Fashion\" },\n  { id: 4, name: \"Music\" },\n  { id: 5, name: \"Photography\" }\n]\n\nexport default function MultipleSelectControlledDemo() {\n  const selectedItems = useListData<SelectedKey>({\n    initialItems: []\n  })\n\n  return (\n    <>\n      <MultipleSelect\n        className=\"max-w-xs\"\n        onItemInserted={(key) => console.log(\"on item inserted\", key)}\n        onItemCleared={(key) => console.log(\"on item cleared\", key)}\n        label=\"Select tags\"\n        selectedItems={selectedItems}\n        items={tags}\n        tag={(item) => <MultipleSelect.Tag textValue={item.name}>{item.name}</MultipleSelect.Tag>}\n      >\n        {(item) => {\n          return (\n            <MultipleSelect.Option id={item.id} textValue={item.name}>\n              {item.name}\n            </MultipleSelect.Option>\n          )\n        }}\n      </MultipleSelect>\n      {selectedItems.items.length > 0 && (\n        <Description className=\"mt-2 max-w-xs block [&>strong]:text-fg text-muted-fg\">\n          You have selected:{\" \"}\n          <strong>{selectedItems.items.map((item) => item.name).join(\", \")}</strong>\n        </Description>\n      )}\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/multiple-select/multiple-select-intent-demo": {
    "component": "@/components/docs/pickers/multiple-select/multiple-select-intent-demo",
    "raw": "\"use client\"\n\nimport { useListData } from \"react-stately\"\nimport type { SelectedKey } from \"ui\"\nimport { MultipleSelect } from \"ui\"\n\nexport default function MultipleSelectIntentDemo() {\n  const selectedItems = useListData<SelectedKey>({\n    initialItems: [fruits[0]]\n  })\n  return (\n    <MultipleSelect\n      className=\"max-w-xs\"\n      intent=\"secondary\"\n      label=\"Fruits\"\n      selectedItems={selectedItems}\n      items={fruits}\n      tag={(item) => <MultipleSelect.Tag textValue={item.name}>{item.name}</MultipleSelect.Tag>}\n    >\n      {(item) => {\n        return <MultipleSelect.Option textValue={item.name}>{item.name}</MultipleSelect.Option>\n      }}\n    </MultipleSelect>\n  )\n}\n\nconst fruits: SelectedKey[] = [\n  { id: 1, name: \"Apple\" },\n  { id: 2, name: \"Banana\" },\n  { id: 3, name: \"Cherry\" },\n  { id: 7, name: \"Grape\" },\n  { id: 8, name: \"Honeydew\" },\n  { id: 9, name: \"Kiwi\" },\n  { id: 10, name: \"Lemon\" },\n  { id: 11, name: \"Mango\" },\n  { id: 12, name: \"Nectarine\" },\n  { id: 13, name: \"Orange\" },\n  { id: 14, name: \"Papaya\" },\n  { id: 15, name: \"Quince\" },\n  { id: 16, name: \"Raspberry\" },\n  { id: 17, name: \"Strawberry\" },\n  { id: 18, name: \"Tangerine\" },\n  { id: 19, name: \"Ugli Fruit\" },\n  { id: 20, name: \"Watermelon\" }\n]\n",
    "type": "docs"
  },
  "pickers/multiple-select/multiple-select-invalid-demo": {
    "component": "@/components/docs/pickers/multiple-select/multiple-select-invalid-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { Key } from \"react-aria-components\"\nimport { useListData } from \"react-stately\"\nimport type { SelectedKey } from \"ui\"\nimport { Button, Form, MultipleSelect } from \"ui\"\n\nexport default function MultipleSelectInvalidDemo() {\n  const [invalid, setInvalid] = React.useState(false)\n  const selectedItems = useListData<SelectedKey>({\n    initialItems: []\n  })\n\n  function submit(e: React.FormEvent<HTMLFormElement>) {\n    if (selectedItems.items.length === 0) {\n      setInvalid(true)\n      e.preventDefault()\n      return\n    }\n    setInvalid(false)\n  }\n\n  function onItemInserted(key: Key) {\n    console.log(\"item inserted\", key)\n    setInvalid(false)\n  }\n\n  return (\n    <Form className=\"space-y-2\" onSubmit={submit}>\n      <MultipleSelect\n        className=\"max-w-xs\"\n        label=\"Fruits\"\n        selectedItems={selectedItems}\n        items={fruits}\n        isInvalid={invalid}\n        onItemInserted={onItemInserted}\n        tag={(item) => <MultipleSelect.Tag textValue={item.name}>{item.name}</MultipleSelect.Tag>}\n      >\n        {(item) => {\n          return <MultipleSelect.Option textValue={item.name}>{item.name}</MultipleSelect.Option>\n        }}\n      </MultipleSelect>\n      {invalid && (\n        <div className=\"text-sm text-danger forced-colors:text-[Mark]\">\n          Please fill out this field.\n        </div>\n      )}\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n\nconst fruits: SelectedKey[] = [\n  { id: 1, name: \"Apple\" },\n  { id: 2, name: \"Banana\" },\n  { id: 3, name: \"Cherry\" },\n  { id: 4, name: \"Date\" },\n  { id: 9, name: \"Kiwi\" },\n  { id: 10, name: \"Lemon\" },\n  { id: 11, name: \"Mango\" },\n  { id: 12, name: \"Nectarine\" },\n  { id: 13, name: \"Orange\" },\n  { id: 14, name: \"Papaya\" },\n  { id: 15, name: \"Quince\" },\n  { id: 16, name: \"Raspberry\" },\n  { id: 17, name: \"Strawberry\" },\n  { id: 18, name: \"Tangerine\" },\n  { id: 19, name: \"Ugli Fruit\" },\n  { id: 20, name: \"Watermelon\" }\n]\n",
    "type": "docs"
  },
  "pickers/multiple-select/multiple-select-shape-demo": {
    "component": "@/components/docs/pickers/multiple-select/multiple-select-shape-demo",
    "raw": "\"use client\"\n\nimport { useListData } from \"react-stately\"\nimport type { SelectedKey } from \"ui\"\nimport { MultipleSelect } from \"ui\"\n\nexport default function MultipleSelectShapeDemo() {\n  const selectedItems = useListData<SelectedKey>({\n    initialItems: [fruits[0]]\n  })\n  return (\n    <MultipleSelect\n      className=\"max-w-xs\"\n      label=\"Fruits\"\n      shape=\"circle\"\n      selectedItems={selectedItems}\n      items={fruits}\n      tag={(item) => <MultipleSelect.Tag textValue={item.name}>{item.name}</MultipleSelect.Tag>}\n    >\n      {(item) => {\n        return <MultipleSelect.Option textValue={item.name}>{item.name}</MultipleSelect.Option>\n      }}\n    </MultipleSelect>\n  )\n}\n\nconst fruits: SelectedKey[] = [\n  { id: 1, name: \"Apple\" },\n  { id: 2, name: \"Banana\" },\n  { id: 3, name: \"Cherry\" },\n  { id: 4, name: \"Date\" },\n  { id: 5, name: \"Elderberry\" },\n  { id: 6, name: \"Fig\" },\n  { id: 9, name: \"Kiwi\" },\n  { id: 10, name: \"Lemon\" },\n  { id: 11, name: \"Mango\" },\n  { id: 12, name: \"Nectarine\" },\n  { id: 13, name: \"Orange\" },\n  { id: 14, name: \"Papaya\" },\n  { id: 15, name: \"Quince\" },\n  { id: 16, name: \"Raspberry\" },\n  { id: 17, name: \"Strawberry\" },\n  { id: 18, name: \"Tangerine\" },\n  { id: 19, name: \"Ugli Fruit\" },\n  { id: 20, name: \"Watermelon\" }\n]\n",
    "type": "docs"
  },
  "pickers/combo-box/combo-box-controlled-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ComboBox, Description } from \"ui\"\n\nconst sports = [\n  { id: 1, name: \"Football\" },\n  { id: 2, name: \"Basketball\" },\n  { id: 3, name: \"Baseball\" },\n  { id: 4, name: \"Soccer\" },\n  { id: 5, name: \"Tennis\" },\n  { id: 6, name: \"Cricket\" },\n  { id: 7, name: \"Hockey\" },\n  { id: 8, name: \"Rugby\" },\n  { id: 9, name: \"Golf\" }\n]\n\nexport default function ComboBoxControlledDemo() {\n  const [sport, setSport] = React.useState(\"\")\n  return (\n    <>\n      <ComboBox\n        onInputChange={setSport}\n        inputValue={sport}\n        placeholder=\"Select a sports\"\n        label=\"Sports\"\n      >\n        <ComboBox.Input />\n        <ComboBox.List items={sports}>\n          {(item) => (\n            <ComboBox.Option id={item.id} textValue={item.name}>\n              {item.name}\n            </ComboBox.Option>\n          )}\n        </ComboBox.List>\n      </ComboBox>\n      <Description className=\"mt-2 block [&>strong]:text-fg text-muted-fg\">\n        You have selected: <strong>{sport}</strong>\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box/combo-box-readonly-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-readonly-demo",
    "raw": "\"use client\"\n\nimport { Avatar, ComboBox } from \"ui\"\n\nconst users = [\n  { id: 1, name: \"Barbara Kirlin Sr.\", image_url: \"https://i.pravatar.cc/150?img=1\" }\n  //...\n]\nexport default function ComboBoxReadonlyDemo() {\n  return (\n    <ComboBox defaultSelectedKey={1} placeholder=\"Select a user\" label=\"Users\" isReadOnly>\n      <ComboBox.Input />\n      <ComboBox.List items={users}>\n        {(item) => (\n          <ComboBox.Option key={item.id} id={item.id} textValue={item.name}>\n            <Avatar src={item.image_url} />\n            {item.name}\n          </ComboBox.Option>\n        )}\n      </ComboBox.List>\n    </ComboBox>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box/combo-box-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-demo",
    "raw": "\"use client\"\n\nimport { ComboBox } from \"ui\"\n\nexport default function ComboBoxDemo() {\n  return (\n    <ComboBox placeholder=\"Select a user\" label=\"Users\">\n      <ComboBox.Input />\n      <ComboBox.List items={users}>\n        {(item) => (\n          <ComboBox.Option id={item.id} textValue={item.name}>\n            {item.name}\n          </ComboBox.Option>\n        )}\n      </ComboBox.List>\n    </ComboBox>\n  )\n}\n\nconst users = [\n  { id: 1, name: \"Barbara Kirlin Sr.\", image_url: \"https://i.pravatar.cc/150?img=1\" },\n  { id: 2, name: \"Rosemarie Koch\", image_url: \"https://i.pravatar.cc/150?img=2\" },\n  { id: 3, name: \"Mrs. Reva Heaney Jr.\", image_url: \"https://i.pravatar.cc/150?img=3\" },\n  { id: 4, name: \"Ms. Ettie Abshire DVM\", image_url: \"https://i.pravatar.cc/150?img=4\" },\n  { id: 5, name: \"Bria Ziemann\", image_url: \"https://i.pravatar.cc/150?img=5\" },\n  { id: 6, name: \"Heloise Borer Sr.\", image_url: \"https://i.pravatar.cc/150?img=6\" },\n  {\n    id: 7,\n    name: \"Miss Jacinthe Gerlach DVM\",\n    image_url: \"https://i.pravatar.cc/150?img=7\"\n  },\n  {\n    id: 8,\n    name: \"Miss Stephania Schaefer Sr.\",\n    image_url: \"https://i.pravatar.cc/150?img=8\"\n  },\n  { id: 9, name: \"Kevon Hackett MD\", image_url: \"https://i.pravatar.cc/150?img=9\" },\n  { id: 10, name: \"Tom Ledner\", image_url: \"https://i.pravatar.cc/150?img=10\" }\n]\n",
    "type": "docs"
  },
  "pickers/combo-box/combo-box-controlled-selection-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-controlled-selection-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { Key } from \"react-aria-components\"\nimport { ComboBox, Description } from \"ui\"\n\nexport default function ComboBoxControlledSelectionDemo() {\n  const [country, setCountry] = React.useState<Key | null>(null)\n  return (\n    <>\n      <ComboBox\n        label=\"Country\"\n        placeholder=\"Country\"\n        onSelectionChange={setCountry}\n        selectedKey={country}\n      >\n        <ComboBox.Input />\n        <ComboBox.List items={countries}>\n          {(item) => <ComboBox.Option id={item.id}>{item.name}</ComboBox.Option>}\n        </ComboBox.List>\n      </ComboBox>\n\n      <Description className=\"mt-2 block [&>strong]:text-fg text-muted-fg\">\n        You have selected: <strong>{country}</strong>\n      </Description>\n    </>\n  )\n}\n\nconst countries = [\n  { id: 1, name: \"Argentina\" },\n  { id: 2, name: \"Australia\" },\n  { id: 3, name: \"Austria\" },\n  { id: 4, name: \"Belgium\" },\n  { id: 5, name: \"Brazil\" },\n  { id: 6, name: \"Canada\" },\n  { id: 7, name: \"China\" },\n  { id: 8, name: \"Denmark\" },\n  { id: 9, name: \"France\" },\n  { id: 10, name: \"Germany\" },\n  { id: 11, name: \"India\" },\n  { id: 12, name: \"Italy\" },\n  { id: 13, name: \"Japan\" },\n  { id: 14, name: \"Mexico\" },\n  { id: 15, name: \"Netherlands\" },\n  { id: 16, name: \"New Zealand\" },\n  { id: 17, name: \"Norway\" },\n  { id: 18, name: \"South Korea\" },\n  { id: 19, name: \"Sweden\" },\n  { id: 20, name: \"United Kingdom\" },\n  { id: 21, name: \"United States\" }\n]\n",
    "type": "docs"
  },
  "pickers/combo-box/combo-box-avatar-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-avatar-demo",
    "raw": "\"use client\"\n\nimport { Avatar, ComboBox } from \"ui\"\n\nexport default function ComboBoxAvatarDemo() {\n  return (\n    <ComboBox placeholder=\"Select a user\" label=\"Users\" isRequired>\n      <ComboBox.Input />\n      <ComboBox.List items={users}>\n        {(item) => (\n          <ComboBox.Option id={item.id} textValue={item.name}>\n            <Avatar src={item.image_url} />\n            {item.name}\n          </ComboBox.Option>\n        )}\n      </ComboBox.List>\n    </ComboBox>\n  )\n}\n\nconst users = [\n  { id: 1, name: \"Barbara Kirlin Sr.\", image_url: \"https://i.pravatar.cc/150?img=1\" },\n  { id: 2, name: \"Rosemarie Koch\", image_url: \"https://i.pravatar.cc/150?img=2\" },\n  { id: 3, name: \"Mrs. Reva Heaney Jr.\", image_url: \"https://i.pravatar.cc/150?img=3\" },\n  { id: 4, name: \"Ms. Ettie Abshire DVM\", image_url: \"https://i.pravatar.cc/150?img=4\" },\n  { id: 5, name: \"Bria Ziemann\", image_url: \"https://i.pravatar.cc/150?img=5\" },\n  { id: 6, name: \"Heloise Borer Sr.\", image_url: \"https://i.pravatar.cc/150?img=6\" },\n  {\n    id: 7,\n    name: \"Miss Jacinthe Gerlach DVM\",\n    image_url: \"https://i.pravatar.cc/150?img=7\"\n  },\n  {\n    id: 8,\n    name: \"Miss Stephania Schaefer Sr.\",\n    image_url: \"https://i.pravatar.cc/150?img=8\"\n  },\n  { id: 9, name: \"Kevon Hackett MD\", image_url: \"https://i.pravatar.cc/150?img=9\" },\n  { id: 10, name: \"Tom Ledner\", image_url: \"https://i.pravatar.cc/150?img=10\" }\n]\n",
    "type": "docs"
  },
  "pickers/combo-box/combo-box-section-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-section-demo",
    "raw": "\"use client\"\n\nimport { ComboBox } from \"ui\"\n\nexport default function ComboBoxSectionDemo() {\n  return (\n    <ComboBox placeholder=\"Select a author\" label=\"Authors\">\n      <ComboBox.Input />\n      <ComboBox.List defaultSelectedKeys={[1]} items={movies}>\n        {(movie) => (\n          <ComboBox.Section title={movie.title} items={movie.genres}>\n            {(genre) => <ComboBox.Option textValue={genre.name}>{genre.name}</ComboBox.Option>}\n          </ComboBox.Section>\n        )}\n      </ComboBox.List>\n    </ComboBox>\n  )\n}\n\nconst movies = [\n  {\n    id: 1,\n    title: \"Inception\",\n    genres: [\n      {\n        id: 101,\n        name: \"Sci-Fi\"\n      },\n      {\n        id: 102,\n        name: \"Thriller\"\n      }\n    ]\n  },\n  {\n    id: 2,\n    title: \"Titanic\",\n    genres: [\n      {\n        id: 201,\n        name: \"Romance\"\n      },\n      {\n        id: 202,\n        name: \"Drama\"\n      }\n    ]\n  },\n  {\n    id: 3,\n    title: \"The Matrix\",\n    genres: [\n      {\n        id: 301,\n        name: \"Action\"\n      },\n      {\n        id: 302,\n        name: \"Sci-Fi\"\n      }\n    ]\n  },\n  {\n    id: 4,\n    title: \"Gladiator\",\n    genres: [\n      {\n        id: 401,\n        name: \"Action\"\n      },\n      {\n        id: 402,\n        name: \"Drama\"\n      }\n    ]\n  },\n  {\n    id: 5,\n    title: \"Casablanca\",\n    genres: [\n      {\n        id: 501,\n        name: \"Romance\"\n      },\n      {\n        id: 502,\n        name: \"Drama\"\n      }\n    ]\n  }\n]\n",
    "type": "docs"
  },
  "pickers/combo-box/combo-box-invalid-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-invalid-demo",
    "raw": "\"use client\"\n\nimport { Avatar, ComboBox } from \"ui\"\n\nconst users = [\n  { id: 1, name: \"Barbara Kirlin Sr.\", image_url: \"https://i.pravatar.cc/150?img=1\" }\n  //...\n]\nexport default function ComboBoxInvalidDemo() {\n  return (\n    <ComboBox placeholder=\"Select a user\" label=\"Users\" isInvalid>\n      <ComboBox.List items={users}>\n        {(item) => (\n          <ComboBox.Option key={item.id} id={item.id} textValue={item.name}>\n            <Avatar src={item.image_url} />\n            {item.name}\n          </ComboBox.Option>\n        )}\n      </ComboBox.List>\n    </ComboBox>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box/combo-box-disabled-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-disabled-demo",
    "raw": "\"use client\"\n\nimport { Avatar, ComboBox } from \"ui\"\n\nexport default function ComboBoxDisabledDemo() {\n  return (\n    <ComboBox placeholder=\"Select a user\" label=\"Users\" isDisabled>\n      <ComboBox.Input />\n      <ComboBox.List items={users}>\n        {(item) => (\n          <ComboBox.Option key={item.id} id={item.id} textValue={item.name}>\n            <Avatar src={item.image_url} />\n            {item.name}\n          </ComboBox.Option>\n        )}\n      </ComboBox.List>\n    </ComboBox>\n  )\n}\n\nconst users = [\n  { id: 1, name: \"Barbara Kirlin Sr.\", image_url: \"https://i.pravatar.cc/150?img=1\" }\n  //...\n]\n",
    "type": "docs"
  },
  "pickers/combo-box/combo-box-validation-demo": {
    "component": "@/components/docs/pickers/combo-box/combo-box-validation-demo",
    "raw": "\"use client\"\n\nimport { Avatar, Button, ComboBox, Form } from \"ui\"\n\nconst users = [\n  { id: 1, name: \"Barbara Kirlin Sr.\", image_url: \"https://i.pravatar.cc/150?img=1\" }\n  //...\n]\nexport default function ComboBoxValidationDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()} className=\"space-y-2\">\n      <ComboBox placeholder=\"Select a user\" label=\"Users\" isRequired>\n        <ComboBox.Input />\n        <ComboBox.List items={users}>\n          {(item) => (\n            <ComboBox.Option key={item.id} id={item.id} textValue={item.name}>\n              <Avatar src={item.image_url} />\n              {item.name}\n            </ComboBox.Option>\n          )}\n        </ComboBox.List>\n      </ComboBox>\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/select/select-disabled-demo": {
    "component": "@/components/docs/pickers/select/select-disabled-demo",
    "raw": "\"use client\"\n\nimport { Select } from \"ui\"\n\nconst software = [\n  { id: 1, name: \"Adobe Photoshop\" }\n  //...\n]\n\nexport default function SelectDisabledDemo() {\n  return (\n    <Select label=\"Design software\" isDisabled placeholder=\"Select a software\">\n      <Select.Trigger />\n      <Select.List items={software}>\n        {(item) => (\n          <Select.Option id={item.id} textValue={item.name}>\n            {item.name}\n          </Select.Option>\n        )}\n      </Select.List>\n    </Select>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/select/select-demo": {
    "component": "@/components/docs/pickers/select/select-demo",
    "raw": "\"use client\"\n\nimport { Select } from \"ui\"\n\nexport const software = [\n  { id: 1, name: \"Adobe Photoshop\" },\n  { id: 2, name: \"Sketch\" },\n  { id: 3, name: \"Figma\" },\n  { id: 4, name: \"Adobe XD\" },\n  { id: 5, name: \"InVision\" }\n]\nexport default function SelectDemo() {\n  return (\n    <Select label=\"Design software\" placeholder=\"Select a software\">\n      <Select.Trigger />\n      <Select.List items={software}>\n        {(item) => (\n          <Select.Option id={item.id} textValue={item.name}>\n            {item.name}\n          </Select.Option>\n        )}\n      </Select.List>\n    </Select>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/select/select-validation-demo": {
    "component": "@/components/docs/pickers/select/select-validation-demo",
    "raw": "\"use client\"\n\nimport { Button, Form, Select } from \"ui\"\n\nconst software = [\n  { id: 1, name: \"Adobe Photoshop\" }\n  //...\n]\n\nexport default function SelectValidationDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()} className=\"space-y-2\">\n      <Select label=\"Design software\" placeholder=\"Select a software\" isRequired>\n        <Select.Trigger />\n        <Select.List items={software}>\n          {(item) => (\n            <Select.Option id={item.id} textValue={item.name}>\n              {item.name}\n            </Select.Option>\n          )}\n        </Select.List>\n      </Select>\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/select/select-with-icon-demo": {
    "component": "@/components/docs/pickers/select/select-with-icon-demo",
    "raw": "\"use client\"\n\nimport { IconDeviceDesktop, IconDevicePhone, IconMacbook } from \"justd-icons\"\nimport { Select } from \"ui\"\n\nexport default function SelectWithIconDemo() {\n  return (\n    <Select aria-label=\"Devices\" defaultSelectedKey=\"desktop\" placeholder=\"Select a device\">\n      <Select.Trigger />\n      <Select.List>\n        <Select.Option id=\"desktop\" textValue=\"Desktop\">\n          <IconDeviceDesktop />\n          Desktop\n        </Select.Option>\n        <Select.Option id=\"laptop\" textValue=\"Laptop\">\n          <IconMacbook />\n          Laptop\n        </Select.Option>\n        <Select.Option id=\"smartphone\" textValue=\"Smartphone\">\n          <IconDevicePhone />\n          Smartphone\n        </Select.Option>\n      </Select.List>\n    </Select>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/select/select-item-details-demo": {
    "component": "@/components/docs/pickers/select/select-item-details-demo",
    "raw": "\"use client\"\n\nimport { Select } from \"ui\"\n\nexport default function SelectItemDetailsDemo() {\n  return (\n    <Select label=\"Roles\" placeholder=\"Select a role\">\n      <Select.Trigger />\n      <Select.List items={roles}>\n        {(item) => (\n          <Select.Option id={item.id} textValue={item.name}>\n            <Select.OptionDetails label={item.name} description={item.description} />\n          </Select.Option>\n        )}\n      </Select.List>\n    </Select>\n  )\n}\n\nconst roles = [\n  { id: 1, name: \"Admin\", description: \"Has full access to all resources\" },\n  { id: 2, name: \"Editor\", description: \"Can edit content but has limited access to settings\" },\n  { id: 3, name: \"Viewer\", description: \"Can view content but cannot make changes\" },\n  { id: 4, name: \"Contributor\", description: \"Can contribute content for review\" },\n  { id: 5, name: \"Guest\", description: \"Limited access, mostly for viewing purposes\" }\n]\n",
    "type": "docs"
  },
  "pickers/select/select-controlled-demo": {
    "component": "@/components/docs/pickers/select/select-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { Key } from \"react-aria-components\"\nimport { Description, Select } from \"ui\"\n\nexport const movies = [\n  { id: 1, title: \"Inception\" },\n  { id: 2, title: \"The Dark Knight\" },\n  { id: 3, title: \"Interstellar\" },\n  { id: 4, title: \"The Matrix\" },\n  { id: 5, title: \"Pulp Fiction\" }\n]\n\nexport default function SelectControlledDemo() {\n  const [movie, setMovie] = React.useState<Key>(\"\")\n  return (\n    <>\n      <Select\n        selectedKey={movie}\n        onSelectionChange={setMovie}\n        label=\"Movies\"\n        placeholder=\"Select a movie\"\n      >\n        <Select.Trigger />\n        <Select.List items={movies}>\n          {(item) => (\n            <Select.Option id={item.id} textValue={item.title}>\n              {item.title}\n            </Select.Option>\n          )}\n        </Select.List>\n      </Select>\n      <Description className=\"mt-2 block [&>strong]:text-fg text-muted-fg\">\n        You have selected: <strong>{movie}</strong>\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/select/select-uncontrolled-demo": {
    "component": "@/components/docs/pickers/select/select-uncontrolled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Select } from \"ui\"\n\nexport const movies = [\n  { id: 1, title: \"Inception\" },\n  { id: 2, title: \"The Dark Knight\" },\n  { id: 3, title: \"Interstellar\" },\n  { id: 4, title: \"The Matrix\" },\n  { id: 5, title: \"Pulp Fiction\" }\n]\n\nexport default function SelectUncontrolledDemo() {\n  return (\n    <Select defaultSelectedKey={2} label=\"Movies\" placeholder=\"Select a movie\">\n      <Select.Trigger />\n      <Select.List items={movies}>\n        {(item) => (\n          <Select.Option id={item.id} textValue={item.title}>\n            {item.title}\n          </Select.Option>\n        )}\n      </Select.List>\n    </Select>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/select/select-section-demo": {
    "component": "@/components/docs/pickers/select/select-section-demo",
    "raw": "\"use client\"\n\nimport { Select } from \"ui\"\n\nexport default function SelectSectionDemo() {\n  return (\n    <Select defaultSelectedKey={1} aria-label=\"Countries\" placeholder=\"Select a country\">\n      <Select.Trigger />\n      <Select.List items={countries}>\n        {(country) => (\n          <Select.Section title={country.name} items={country.cities}>\n            {(city) => <Select.Option textValue={city.name}>{city.name}</Select.Option>}\n          </Select.Section>\n        )}\n      </Select.List>\n    </Select>\n  )\n}\n\nconst countries = [\n  {\n    id: 1,\n    name: \"Egypt\",\n    cities: [\n      {\n        id: 101,\n        name: \"Cairo\"\n      },\n      {\n        id: 102,\n        name: \"Alexandria\"\n      },\n      {\n        id: 103,\n        name: \"Giza\"\n      },\n      {\n        id: 104,\n        name: \"Luxor\"\n      }\n    ]\n  },\n  {\n    id: 2,\n    name: \"Indonesia\",\n    cities: [\n      {\n        id: 201,\n        name: \"Jakarta\"\n      },\n      {\n        id: 202,\n        name: \"Bali\"\n      },\n      {\n        id: 203,\n        name: \"Surabaya\"\n      },\n      {\n        id: 204,\n        name: \"Bandung\"\n      },\n      {\n        id: 205,\n        name: \"Medan\"\n      }\n    ]\n  },\n  {\n    id: 3,\n    name: \"United States\",\n    cities: [\n      {\n        id: 301,\n        name: \"New York City\"\n      },\n      {\n        id: 302,\n        name: \"Los Angeles\"\n      },\n      {\n        id: 303,\n        name: \"Chicago\"\n      },\n      {\n        id: 304,\n        name: \"Houston\"\n      }\n    ]\n  },\n  {\n    id: 4,\n    name: \"Canada\",\n    cities: [\n      {\n        id: 401,\n        name: \"Toronto\"\n      },\n      {\n        id: 402,\n        name: \"Vancouver\"\n      },\n      {\n        id: 403,\n        name: \"Montreal\"\n      }\n    ]\n  },\n  {\n    id: 5,\n    name: \"Australia\",\n    cities: [\n      {\n        id: 501,\n        name: \"Sydney\"\n      },\n      {\n        id: 502,\n        name: \"Melbourne\"\n      },\n      {\n        id: 503,\n        name: \"Brisbane\"\n      }\n    ]\n  },\n  {\n    id: 6,\n    name: \"Germany\",\n    cities: [\n      {\n        id: 601,\n        name: \"Berlin\"\n      },\n      {\n        id: 602,\n        name: \"Munich\"\n      },\n      {\n        id: 603,\n        name: \"Frankfurt\"\n      },\n      {\n        id: 604,\n        name: \"Hamburg\"\n      }\n    ]\n  },\n  {\n    id: 7,\n    name: \"Japan\",\n    cities: [\n      {\n        id: 701,\n        name: \"Tokyo\"\n      },\n      {\n        id: 702,\n        name: \"Osaka\"\n      },\n      {\n        id: 703,\n        name: \"Kyoto\"\n      }\n    ]\n  }\n]\n",
    "type": "docs"
  },
  "surfaces/show-more/show-more-controlled-demo": {
    "component": "@/components/docs/surfaces/show-more/show-more-controlled-demo",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconChevronLgDown } from \"justd-icons\"\nimport { ShowMore } from \"ui\"\n\nexport default function ShowMoreControlledDemo() {\n  const [isExpanded, setIsExpanded] = React.useState(false)\n  return (\n    <div className=\"py-6\">\n      <ShowMore onChange={setIsExpanded} isSelected={isExpanded}>\n        {isExpanded ? \"Expand\" : \"Collapse\"}\n        <IconChevronLgDown\n          className={`${isExpanded ? \"rotate-180\" : \"\"} size-4 transition-transform duration-200`}\n        />\n      </ShowMore>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/show-more/show-more-as-text-demo": {
    "component": "@/components/docs/surfaces/show-more/show-more-as-text-demo",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { ShowMore } from \"ui\"\n\nexport default function ShowMoreAsTextDemo() {\n  return (\n    <div className=\"py-6\">\n      <ShowMore as=\"text\" text=\"Or continue with\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/show-more/show-more-orientation-demo": {
    "component": "@/components/docs/surfaces/show-more/show-more-orientation-demo",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { ShowMore } from \"ui\"\n\nexport default function ShowMoreOrientationDemo() {\n  return <ShowMore orientation=\"vertical\" as=\"text\" text=\"Or\" className=\"h-56\" />\n}\n",
    "type": "docs"
  },
  "surfaces/show-more/show-more-demo": {
    "component": "@/components/docs/surfaces/show-more/show-more-demo",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconChevronLgDown } from \"justd-icons\"\nimport { cn, ShowMore } from \"ui\"\n\nexport default function ShowMoreDemo() {\n  return (\n    <div className=\"py-6\">\n      <ShowMore>\n        {({ isSelected }) => (\n          <>\n            Show {isSelected ? \"less\" : \"more\"}\n            <IconChevronLgDown\n              className={cn(\n                isSelected ? \"rotate-180\" : \"\",\n                \"size-4 transition-transform duration-200\"\n              )}\n            />\n          </>\n        )}\n      </ShowMore>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/card/card-login-form-demo": {
    "component": "@/components/docs/surfaces/card/card-login-form-demo",
    "raw": "\"use client\"\n\nimport { Button, Card, Checkbox, Link, TextField } from \"ui\"\n\nexport default function CardLoginFormDemo() {\n  return (\n    <Card className=\"max-w-md mx-auto\">\n      <Card.Header>\n        <Card.Title>Login</Card.Title>\n        <Card.Description>Don't loose the level, just keep on going.</Card.Description>\n      </Card.Header>\n      <Card.Content className=\"space-y-6\">\n        <TextField isRequired label=\"Email\" placeholder=\"Enter your email\" />\n        <TextField\n          isRequired\n          label=\"Password\"\n          isRevealable\n          type=\"password\"\n          placeholder=\"Enter your password\"\n        />\n        <div className=\"flex justify-between items-center\">\n          <Checkbox>Remember me</Checkbox>\n          <Link intent=\"primary\" href=\"#\">\n            Forgot password?\n          </Link>\n        </div>\n      </Card.Content>\n      <Card.Footer>\n        <Button className=\"w-full\">Login</Button>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/card/card-table-demo": {
    "component": "@/components/docs/surfaces/card/card-table-demo",
    "raw": "\"use client\"\n\nimport { IconDotsVertical, IconEye, IconHighlight, IconTrash } from \"justd-icons\"\nimport { Card, Menu, Pagination, Table } from \"ui\"\n\nexport default function CardTableDemo() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Users</Card.Title>\n        <Card.Description>Manage users, groups, and roles.</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Table aria-label=\"Users\">\n          <Table.Header>\n            <Table.Column>#</Table.Column>\n            <Table.Column isRowHeader>Name</Table.Column>\n            <Table.Column>Gender</Table.Column>\n            <Table.Column>Age</Table.Column>\n            <Table.Column>Occupation</Table.Column>\n            <Table.Column />\n          </Table.Header>\n          <Table.Body items={users}>\n            {(item) => (\n              <Table.Row id={item.id}>\n                <Table.Cell>{item.id}</Table.Cell>\n                <Table.Cell>{item.name}</Table.Cell>\n                <Table.Cell>{item.gender}</Table.Cell>\n                <Table.Cell>{item.age}</Table.Cell>\n                <Table.Cell>{item.occupation}</Table.Cell>\n                <Table.Cell className=\"flex justify-end\">\n                  <Menu>\n                    <Menu.Trigger>\n                      <IconDotsVertical />\n                    </Menu.Trigger>\n                    <Menu.Content showArrow placement=\"left top\">\n                      <Menu.Item>\n                        <IconEye /> View\n                      </Menu.Item>\n                      <Menu.Item>\n                        <IconHighlight /> Edit\n                      </Menu.Item>\n                      <Menu.Separator />\n                      <Menu.Item isDanger>\n                        <IconTrash /> Delete\n                      </Menu.Item>\n                    </Menu.Content>\n                  </Menu>\n                </Table.Cell>\n              </Table.Row>\n            )}\n          </Table.Body>\n        </Table>\n      </Card.Content>\n      <Card.Footer>\n        <Pagination>\n          <Pagination.List>\n            <Pagination.Item variant=\"first\" />\n            <Pagination.Item variant=\"previous\" />\n            <Pagination.Section className=\"lg:hidden rounded-lg border\">\n              <Pagination.Item variant=\"label\">1</Pagination.Item>\n              <Pagination.Item variant=\"separator\" />\n              <Pagination.Item className=\"text-muted-fg\" variant=\"label\">\n                {users.length}\n              </Pagination.Item>\n            </Pagination.Section>\n            <Pagination.Section className=\"lg:flex hidden\" items={pages}>\n              {(item) => (\n                <Pagination.Item id={item.value.toString()} isCurrent={item.value === 4} href=\"#\">\n                  {item.value}\n                </Pagination.Item>\n              )}\n            </Pagination.Section>\n            <Pagination.Item variant=\"next\" />\n            <Pagination.Item variant=\"last\" />\n          </Pagination.List>\n        </Pagination>\n      </Card.Footer>\n    </Card>\n  )\n}\n\nconst users = [\n  {\n    id: 1,\n    name: \"John Doe\",\n    gender: \"Male\",\n    age: 30,\n    occupation: \"Software Engineer\"\n  },\n  {\n    id: 2,\n    name: \"Jane Smith\",\n    gender: \"Female\",\n    age: 25,\n    occupation: \"Marketing Manager\"\n  },\n  {\n    id: 3,\n    name: \"Bob Johnson\",\n    gender: \"Male\",\n    age: 40,\n    occupation: \"Doctor\"\n  },\n  {\n    id: 4,\n    name: \"Emily Chen\",\n    gender: \"Female\",\n    age: 28,\n    occupation: \"Teacher\"\n  },\n  {\n    id: 5,\n    name: \"Michael Brown\",\n    gender: \"Male\",\n    age: 35,\n    occupation: \"Lawyer\"\n  },\n  {\n    id: 6,\n    name: \"Sarah Lee\",\n    gender: \"Female\",\n    age: 32,\n    occupation: \"Designer\"\n  },\n  {\n    id: 7,\n    name: \"Kevin White\",\n    gender: \"Male\",\n    age: 45,\n    occupation: \"CEO\"\n  },\n  {\n    id: 8,\n    name: \"Lisa Nguyen\",\n    gender: \"Female\",\n    age: 29,\n    occupation: \"Engineer\"\n  },\n  {\n    id: 9,\n    name: \"David Kim\",\n    gender: \"Male\",\n    age: 38,\n    occupation: \"Consultant\"\n  },\n  {\n    id: 10,\n    name: \"Hannah Patel\",\n    gender: \"Female\",\n    age: 26,\n    occupation: \"Writer\"\n  }\n]\nconst pages = Array.from({ length: users.length / 2 }, (_, i) => ({ value: i + 1 }))\n",
    "type": "docs"
  },
  "surfaces/card/card-demo": {
    "component": "@/components/docs/surfaces/card/card-demo",
    "raw": "\"use client\"\n\nimport { Button, Card } from \"ui\"\n\nexport default function CardDemo() {\n  return (\n    <Card className=\"max-w-lg\">\n      <Card.Header>\n        <Card.Title>Monthly Report</Card.Title>\n        <Card.Description>Financial summary for June</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        The monthly financial report shows a 15% increase in revenue compared to last month.\n      </Card.Content>\n      <Card.Footer>\n        <Button>View Details</Button>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/separator/separator-demo": {
    "component": "@/components/docs/surfaces/separator/separator-demo",
    "raw": "\"use client\"\n\nimport { Separator } from \"ui\"\n\nexport default function SeparatorDemo() {\n  return <Separator />\n}\n",
    "type": "docs"
  },
  "surfaces/separator/separator-orientation-demo": {
    "component": "@/components/docs/surfaces/separator/separator-orientation-demo",
    "raw": "\"use client\"\n\nimport { Separator } from \"ui\"\n\nexport default function SeparatorDemo() {\n  return <Separator orientation=\"vertical\" className=\"h-32\" />\n}\n",
    "type": "docs"
  },
  "surfaces/heading/heading-tracking-demo": {
    "component": "@/components/docs/surfaces/heading/heading-tracking-demo",
    "raw": "\"use client\"\n\nimport { Heading } from \"ui\"\n\nexport default function HeadingTrackingDemo() {\n  return (\n    <Heading level={2} tracking=\"tighter\">\n      The quick brown fox jumps over the lazy dog\n    </Heading>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/heading/heading-level-demo": {
    "component": "@/components/docs/surfaces/heading/heading-level-demo",
    "raw": "\"use client\"\n\nimport { Heading } from \"ui\"\n\nexport default function HeadingLevelDemo() {\n  return (\n    <div className=\"space-y-2\">\n      <Heading>The quick brown fox jumps over the lazy dog</Heading>\n      <Heading level={2}>The quick brown fox jumps over the lazy dog</Heading>\n      <Heading level={3}>The quick brown fox jumps over the lazy dog</Heading>\n      <Heading level={4}>The quick brown fox jumps over the lazy dog</Heading>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/heading/heading-demo": {
    "component": "@/components/docs/surfaces/heading/heading-demo",
    "raw": "\"use client\"\n\nimport { Heading } from \"ui\"\n\nexport default function HeadingDemo() {\n  return <Heading level={2}>The quick brown fox jumps over the lazy dog</Heading>\n}\n",
    "type": "docs"
  },
  "surfaces/chart/area/area-chart-linear-demo": {
    "component": "@/components/docs/surfaces/chart/area/area-chart-linear-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { Area, AreaChart, CartesianGrid, XAxis } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"January\", revenue: 5000 },\n  { month: \"February\", revenue: 2000 },\n  { month: \"March\", revenue: 3500 },\n  { month: \"April\", revenue: 4000 },\n  { month: \"May\", revenue: 3300 },\n  { month: \"June\", revenue: 5000 },\n  { month: \"July\", revenue: 1900 },\n  { month: \"August\", revenue: 4000 },\n  { month: \"September\", revenue: 2000 },\n  { month: \"October\", revenue: 7000 },\n  { month: \"November\", revenue: 3000 },\n  { month: \"December\", revenue: 9500 }\n]\n\nconst config = {\n  revenue: {\n    label: \"Revenue\",\n    color: \"hsl(var(--primary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function AreaChartLinearDemo() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Area Chart - Linear</Card.Title>\n        <Card.Description>Showing total revenue for this year</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <AreaChart\n            accessibilityLayer\n            data={data}\n            margin={{\n              left: 12,\n              right: 12\n            }}\n          >\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n            <Chart.Tooltip\n              cursor={false}\n              content={<Chart.TooltipContent indicator=\"dot\" hideLabel />}\n            />\n            <Area\n              dataKey=\"revenue\"\n              type=\"linear\"\n              fill=\"var(--color-revenue)\"\n              fillOpacity={0.4}\n              stroke=\"var(--color-revenue)\"\n            />\n          </AreaChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer>\n        <div className=\"flex w-full items-start gap-2 text-sm\">\n          <div className=\"grid gap-2\">\n            <div className=\"flex items-center gap-2 font-medium leading-none\">\n              Revenue increased by 12.5% this year <IconChartTrending />\n            </div>\n            <div className=\"flex items-center gap-2 leading-none text-muted-fg\">\n              January - December 2024\n            </div>\n          </div>\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/area/area-chart-demo": {
    "component": "@/components/docs/surfaces/chart/area/area-chart-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { Area, AreaChart, CartesianGrid, XAxis } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"January\", sales: 900 },\n  { month: \"February\", sales: 1200 },\n  { month: \"March\", sales: 700 },\n  { month: \"April\", sales: 900 },\n  { month: \"May\", sales: 2100 },\n  { month: \"June\", sales: 800 },\n  { month: \"July\", sales: 1000 },\n  { month: \"August\", sales: 2400 },\n  { month: \"September\", sales: 1237 },\n  { month: \"October\", sales: 2173 },\n  { month: \"November\", sales: 1209 },\n  { month: \"December\", sales: 2214 }\n]\n\nconst config = {\n  sales: {\n    label: \"Sales\",\n    color: \"hsl(var(--primary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function AreaChartDemo() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Area Chart</Card.Title>\n        <Card.Description>Showing total sales for last year</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <AreaChart\n            accessibilityLayer\n            data={data}\n            margin={{\n              left: 12,\n              right: 12\n            }}\n          >\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator=\"line\" />} />\n            <Area\n              dataKey=\"sales\"\n              type=\"natural\"\n              fill=\"var(--color-sales)\"\n              fillOpacity={0.4}\n              stroke=\"var(--color-sales)\"\n            />\n          </AreaChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer>\n        <div className=\"flex w-full items-start gap-2 text-sm\">\n          <div className=\"grid gap-2\">\n            <div className=\"flex items-center gap-2 font-medium leading-none\">\n              Sales increased by 8.4% this year <IconChartTrending />\n            </div>\n            <div className=\"flex items-center gap-2 leading-none text-muted-fg\">\n              January - December 2023\n            </div>\n          </div>\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/area/area-chart-gradient-demo": {
    "component": "@/components/docs/surfaces/chart/area/area-chart-gradient-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { Area, AreaChart, CartesianGrid, XAxis } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"January\", sales: 186, profit: 80 },\n  { month: \"February\", sales: 305, profit: 200 },\n  { month: \"March\", sales: 237, profit: 120 },\n  { month: \"April\", sales: 73, profit: 190 },\n  { month: \"May\", sales: 209, profit: 130 },\n  { month: \"June\", sales: 214, profit: 140 },\n  { month: \"July\", sales: 186, profit: 80 },\n  { month: \"August\", sales: 305, profit: 200 },\n  { month: \"September\", sales: 237, profit: 120 },\n  { month: \"October\", sales: 73, profit: 190 },\n  { month: \"November\", sales: 209, profit: 130 },\n  { month: \"December\", sales: 314, profit: 240 }\n]\n\nconst config = {\n  sales: {\n    label: \"Sales\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  profit: {\n    label: \"Profit\",\n    color: \"hsl(var(--secondary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function AreaChartGradientDemo() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Area Chart - Gradient</Card.Title>\n        <Card.Description>Showing total visitors for the this year</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <AreaChart\n            accessibilityLayer\n            data={data}\n            margin={{\n              left: 12,\n              right: 12\n            }}\n          >\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n            <defs>\n              <linearGradient id=\"fillSales\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"var(--color-sales)\" stopOpacity={0.8} />\n                <stop offset=\"95%\" stopColor=\"var(--color-sales)\" stopOpacity={0.1} />\n              </linearGradient>\n              <linearGradient id=\"fillProfit\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"var(--color-profit)\" stopOpacity={0.8} />\n                <stop offset=\"95%\" stopColor=\"var(--color-profit)\" stopOpacity={0.1} />\n              </linearGradient>\n            </defs>\n            <Area\n              dataKey=\"profit\"\n              type=\"natural\"\n              fill=\"url(#fillProfit)\"\n              fillOpacity={0.4}\n              stroke=\"var(--color-profit)\"\n              stackId=\"a\"\n            />\n            <Area\n              dataKey=\"sales\"\n              type=\"natural\"\n              fill=\"url(#fillSales)\"\n              fillOpacity={0.4}\n              stroke=\"var(--color-sales)\"\n              stackId=\"a\"\n            />\n          </AreaChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer>\n        <div className=\"flex w-full items-start gap-2 text-sm\">\n          <div className=\"grid gap-2\">\n            <div className=\"flex items-center gap-2 font-medium leading-none\">\n              Profit increased by 10.2% this year <IconChartTrending />\n            </div>\n            <div className=\"flex items-center gap-2 leading-none text-muted-fg\">\n              January - December 2024\n            </div>\n          </div>\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/area/area-chart-stacked-demo": {
    "component": "@/components/docs/surfaces/chart/area/area-chart-stacked-demo",
    "raw": "\"use client\"\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"January\", organic: 50, paid: 20, referral: 10 },\n  { month: \"February\", organic: 100, paid: 50, referral: 100 },\n  { month: \"March\", organic: 60, paid: 20, referral: 30 },\n  { month: \"April\", organic: 200, paid: 30, referral: 140 },\n  { month: \"May\", organic: 160, paid: 90, referral: 100 },\n  { month: \"June\", organic: 100, paid: 100, referral: 170 },\n  { month: \"July\", organic: 80, paid: 20, referral: 160 },\n  { month: \"August\", organic: 120, paid: 140, referral: 180 },\n  { month: \"September\", organic: 60, paid: 60, referral: 100 },\n  { month: \"October\", organic: 100, paid: 120, referral: 220 },\n  { month: \"November\", organic: 120, paid: 60, referral: 40 },\n  { month: \"December\", organic: 240, paid: 120, referral: 160 }\n]\n\nconst config = {\n  organic: {\n    label: \"Organic Traffic\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  paid: {\n    label: \"Paid Traffic\",\n    color: \"hsl(var(--secondary-chart))\"\n  },\n  referral: {\n    label: \"Referral Traffic\",\n    color: \"hsl(var(--tertiary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function AreaChartStackedTrafficSources() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Area Chart - Stacked</Card.Title>\n        <Card.Description>\n          Traffic data from various sources over the last 10 months\n        </Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <AreaChart\n            accessibilityLayer\n            data={data}\n            margin={{\n              left: 10,\n              right: 10\n            }}\n          >\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator=\"dot\" />} />\n            <Area\n              dataKey=\"referral\"\n              type=\"natural\"\n              fill=\"var(--color-referral)\"\n              fillOpacity={0.4}\n              stroke=\"var(--color-referral)\"\n              stackId=\"a\"\n            />\n            <Area\n              dataKey=\"paid\"\n              type=\"natural\"\n              fill=\"var(--color-paid)\"\n              fillOpacity={0.4}\n              stroke=\"var(--color-paid)\"\n              stackId=\"a\"\n            />\n            <Area\n              dataKey=\"organic\"\n              type=\"natural\"\n              fill=\"var(--color-organic)\"\n              fillOpacity={0.4}\n              stroke=\"var(--color-organic)\"\n              stackId=\"a\"\n            />\n          </AreaChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer>\n        <div className=\"flex w-full items-start gap-2 text-sm\">\n          <div className=\"grid gap-2\">\n            <div className=\"flex items-center gap-2 font-medium leading-none\">\n              Overall traffic increased by 15.5% this month\n            </div>\n            <div className=\"flex items-center gap-2 leading-none text-muted-fg\">\n              January - October 2024\n            </div>\n          </div>\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/pie/pie-chart-interactive-demo": {
    "component": "@/components/docs/surfaces/chart/pie/pie-chart-interactive-demo",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type { Key } from \"react-aria-components\"\nimport { Label, Pie, PieChart, Sector } from \"recharts\"\nimport type { PieSectorDataItem } from \"recharts/types/polar/Pie\"\nimport { Card, Chart, type ChartConfig, Select } from \"ui\"\n\nconst data = [\n  { month: \"january\", sales: 186, fill: \"var(--color-january)\" },\n  { month: \"february\", sales: 305, fill: \"var(--color-february)\" },\n  { month: \"march\", sales: 237, fill: \"var(--color-march)\" },\n  { month: \"april\", sales: 173, fill: \"var(--color-april)\" },\n  { month: \"may\", sales: 209, fill: \"var(--color-may)\" }\n]\n\nconst config = {\n  visitors: {\n    label: \"Visitors\"\n  },\n  sales: {\n    label: \"Sales\"\n  },\n  profit: {\n    label: \"Profit\"\n  },\n  january: {\n    label: \"January\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  february: {\n    label: \"February\",\n    color: \"hsl(var(--secondary-chart))\"\n  },\n  march: {\n    label: \"March\",\n    color: \"hsl(var(--tertiary-chart))\"\n  },\n  april: {\n    label: \"April\",\n    color: \"hsl(var(--highlight-chart))\"\n  },\n  may: {\n    label: \"May\",\n    color: \"hsl(var(--accent-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function PieChartInteractiveDemo() {\n  const id = \"pie-interactive\"\n  const [activeMonth, setActiveMonth] = React.useState<Key>(data[0].month)\n\n  const activeIndex = React.useMemo(\n    () => data.findIndex((item) => item.month === activeMonth),\n    [activeMonth]\n  )\n  const months = React.useMemo(() => data.map((item) => item.month), [])\n\n  return (\n    <Card data-chart={id} className=\"flex flex-col\">\n      <Chart.Style id={id} config={config} />\n      <Card.Header className=\"flex-row items-start space-y-0 pb-0\">\n        <div className=\"grid w-full gap-1\">\n          <Card.Title>Pie Chart - Interactive</Card.Title>\n          <Card.Description>January - June 2024</Card.Description>\n        </div>\n        <Select selectedKey={activeMonth} onSelectionChange={setActiveMonth}>\n          <Select.Trigger\n            className=\"ml-auto h-8 px-2 w-[130px] rounded-lg\"\n            aria-label=\"Select a value\"\n          />\n          <Select.List className=\"rounded-xl\">\n            {months.map((key) => {\n              const _config = config[key as keyof typeof config]\n\n              if (!_config) {\n                return null\n              }\n\n              return (\n                <Select.Option key={key} id={key}>\n                  <div className=\"flex items-center gap-2 text-xs\">{_config?.label}</div>\n                </Select.Option>\n              )\n            })}\n          </Select.List>\n        </Select>\n      </Card.Header>\n      <Card.Content className=\"flex flex-1 justify-center pb-0\">\n        <Chart id={id} config={config} className=\"mx-auto aspect-square w-full max-w-[315px]\">\n          <PieChart>\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n            <Pie\n              data={data}\n              dataKey=\"sales\"\n              nameKey=\"month\"\n              innerRadius={60}\n              strokeWidth={5}\n              activeIndex={activeIndex}\n              activeShape={({ outerRadius = 0, ...props }: PieSectorDataItem) => (\n                <g>\n                  <Sector {...props} outerRadius={outerRadius + 10} />\n                  <Sector\n                    {...props}\n                    outerRadius={outerRadius + 25}\n                    innerRadius={outerRadius + 12}\n                  />\n                </g>\n              )}\n            >\n              <Label\n                content={({ viewBox }) => {\n                  if (viewBox && \"cx\" in viewBox && \"cy\" in viewBox) {\n                    return (\n                      <text\n                        x={viewBox.cx}\n                        y={viewBox.cy}\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                      >\n                        <tspan x={viewBox.cx} y={viewBox.cy} className=\"fill-fg text-3xl font-bold\">\n                          {data[activeIndex].sales.toLocaleString()}\n                        </tspan>\n                        <tspan x={viewBox.cx} y={(viewBox.cy || 0) + 24} className=\"fill-muted-fg\">\n                          Visitors\n                        </tspan>\n                      </text>\n                    )\n                  }\n                }}\n              />\n            </Pie>\n          </PieChart>\n        </Chart>\n      </Card.Content>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/pie/pie-chart-legend-demo": {
    "component": "@/components/docs/surfaces/chart/pie/pie-chart-legend-demo",
    "raw": "\"use client\"\n\nimport { Pie, PieChart } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n  { browser: \"firefox\", visitors: 187, fill: \"var(--color-firefox)\" },\n  { browser: \"edge\", visitors: 173, fill: \"var(--color-edge)\" },\n  { browser: \"other\", visitors: 90, fill: \"var(--color-other)\" }\n]\n\nconst config = {\n  visitors: {\n    label: \"Visitors\"\n  },\n  chrome: {\n    label: \"Chrome\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  safari: {\n    label: \"Safari\",\n    color: \"hsl(var(--secondary-chart))\"\n  },\n  firefox: {\n    label: \"Firefox\",\n    color: \"hsl(var(--tertiary-chart))\"\n  },\n  edge: {\n    label: \"Edge\",\n    color: \"hsl(var(--highlight-chart))\"\n  },\n  other: {\n    label: \"Other\",\n    color: \"hsl(var(--accent-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function PieChartLegendDemo() {\n  return (\n    <Card className=\"flex flex-col\">\n      <Card.Header className=\"items-center pb-0\">\n        <Card.Title>Pie Chart - Legend</Card.Title>\n        <Card.Description>January - June 2024</Card.Description>\n      </Card.Header>\n      <Card.Content className=\"flex-1 pb-0\">\n        <Chart className=\"min-h-[300px] mx-auto aspect-square max-h-[300px] w-full\" config={config}>\n          <PieChart>\n            <Pie data={data} dataKey=\"visitors\" />\n            <Chart.Legend\n              content={<Chart.LegendContent nameKey=\"browser\" />}\n              className=\"-translate-y-2 gap-2 [&>*]:basis-1/4 [&>*]:justify-center\"\n            />\n          </PieChart>\n        </Chart>\n      </Card.Content>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/pie/pie-chart-demo": {
    "component": "@/components/docs/surfaces/chart/pie/pie-chart-demo",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { Label, Pie, PieChart } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { plan: \"Basic\", subscribers: 450, fill: \"var(--color-basic)\" },\n  { plan: \"Standard\", subscribers: 400, fill: \"var(--color-standard)\" },\n  { plan: \"Premium\", subscribers: 400, fill: \"var(--color-premium)\" },\n  { plan: \"Pro\", subscribers: 250, fill: \"var(--color-pro)\" },\n  { plan: \"Enterprise\", subscribers: 800, fill: \"var(--color-enterprise)\" }\n]\n\nconst config = {\n  subscribers: {\n    label: \"Subscribers\"\n  },\n  basic: {\n    label: \"Basic\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  standard: {\n    label: \"Standard\",\n    color: \"hsl(var(--secondary-chart))\"\n  },\n  premium: {\n    label: \"Premium\",\n    color: \"hsl(var(--tertiary-chart))\"\n  },\n  pro: {\n    label: \"Pro\",\n    color: \"hsl(var(--highlight-chart))\"\n  },\n  enterprise: {\n    label: \"Enterprise\",\n    color: \"hsl(var(--accent-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function PieChartDemo() {\n  const totalSubscribers = React.useMemo(() => {\n    return data.reduce((acc, curr) => acc + curr.subscribers, 0)\n  }, [])\n\n  return (\n    <Card className=\"flex flex-col\">\n      <Card.Header className=\"items-center pb-0\">\n        <Card.Title>Pie Chart</Card.Title>\n        <Card.Description>January - September 2024</Card.Description>\n      </Card.Header>\n      <Card.Content className=\"flex-1 pb-0\">\n        <Chart className=\"min-h-[250px] max-h-[250px] mx-auto aspect-square w-full\" config={config}>\n          <PieChart>\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n            <Pie data={data} dataKey=\"subscribers\" nameKey=\"plan\" innerRadius={60} strokeWidth={5}>\n              <Label\n                content={({ viewBox }) => {\n                  if (viewBox && \"cx\" in viewBox && \"cy\" in viewBox) {\n                    return (\n                      <text\n                        x={viewBox.cx}\n                        y={viewBox.cy}\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                      >\n                        <tspan x={viewBox.cx} y={viewBox.cy} className=\"fill-fg text-3xl font-bold\">\n                          {totalSubscribers.toLocaleString()}\n                        </tspan>\n                        <tspan x={viewBox.cx} y={(viewBox.cy || 0) + 24} className=\"fill-muted-fg\">\n                          Subscribers\n                        </tspan>\n                      </text>\n                    )\n                  }\n                }}\n              />\n            </Pie>\n          </PieChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col gap-2 text-sm\">\n        <div className=\"flex items-center gap-2 font-medium leading-none\">\n          Subscribers increased by 8.5% this year <IconChartTrending />\n        </div>\n        <div className=\"leading-none text-muted-fg\">\n          Showing total subscribers for the last 3 months\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/pie/pie-chart-stacked-demo": {
    "component": "@/components/docs/surfaces/chart/pie/pie-chart-stacked-demo",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { Pie, PieChart } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"january\", sales: 186, fill: \"var(--color-january)\" },\n  { month: \"february\", sales: 305, fill: \"var(--color-february)\" },\n  { month: \"march\", sales: 237, fill: \"var(--color-march)\" },\n  { month: \"april\", sales: 173, fill: \"var(--color-april)\" },\n  { month: \"may\", sales: 209, fill: \"var(--color-may)\" }\n]\n\nconst profitData = [\n  { month: \"january\", profit: 80, fill: \"var(--color-january)\" },\n  { month: \"february\", profit: 200, fill: \"var(--color-february)\" },\n  { month: \"march\", profit: 120, fill: \"var(--color-march)\" },\n  { month: \"april\", profit: 190, fill: \"var(--color-april)\" },\n  { month: \"may\", profit: 130, fill: \"var(--color-may)\" }\n]\n\nconst config = {\n  visitors: {\n    label: \"Visitors\"\n  },\n  sales: {\n    label: \"Sales\"\n  },\n  profit: {\n    label: \"Profit\"\n  },\n  january: {\n    label: \"January\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  february: {\n    label: \"February\",\n    color: \"hsl(var(--secondary-chart))\"\n  },\n  march: {\n    label: \"March\",\n    color: \"hsl(var(--tertiary-chart))\"\n  },\n  april: {\n    label: \"April\",\n    color: \"hsl(var(--highlight-chart))\"\n  },\n  may: {\n    label: \"May\",\n    color: \"hsl(var(--accent-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function PieChartStackedDemo() {\n  return (\n    <Card className=\"flex flex-col\">\n      <Card.Header className=\"items-center pb-0\">\n        <Card.Title>Pie Chart - Stacked</Card.Title>\n        <Card.Description>January - June 2024</Card.Description>\n      </Card.Header>\n      <Card.Content className=\"flex-1 pb-0\">\n        <Chart\n          className=\"mx-auto aspect-square max-h-[250px] pb-0 [&_.recharts-pie-label-text]:fill-fg\"\n          config={config}\n        >\n          <PieChart>\n            <Chart.Tooltip\n              content={\n                <Chart.TooltipContent\n                  labelKey=\"visitors\"\n                  nameKey=\"month\"\n                  indicator=\"line\"\n                  labelFormatter={(_, payload) => {\n                    return config[payload?.[0].dataKey as keyof typeof config].label\n                  }}\n                />\n              }\n            />\n            <Pie data={data} dataKey=\"sales\" outerRadius={60} />\n            <Pie data={profitData} dataKey=\"profit\" innerRadius={70} outerRadius={90} />\n          </PieChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col gap-2 text-sm\">\n        <div className=\"flex items-center gap-2 font-medium leading-none\">\n          Trending up by 5.2% this month <IconChartTrending />\n        </div>\n        <div className=\"leading-none text-muted-fg\">\n          Showing total visitors for the last 6 months\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/pie/pie-chart-label-demo": {
    "component": "@/components/docs/surfaces/chart/pie/pie-chart-label-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { Pie, PieChart } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { brand: \"apple\", visitors: 175, fill: \"var(--color-apple)\" },\n  { brand: \"samsung\", visitors: 100, fill: \"var(--color-samsung)\" },\n  { brand: \"huawei\", visitors: 187, fill: \"var(--color-huawei)\" },\n  { brand: \"xiaomi\", visitors: 173, fill: \"var(--color-xiaomi)\" },\n  { brand: \"google\", visitors: 90, fill: \"var(--color-google)\" }\n]\n\nconst config = {\n  visitors: {\n    label: \"Visitors\"\n  },\n  apple: {\n    label: \"Apple\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  samsung: {\n    label: \"Samsung\",\n    color: \"hsl(var(--secondary-chart))\"\n  },\n  huawei: {\n    label: \"Huawei\",\n    color: \"hsl(var(--tertiary-chart))\"\n  },\n  xiaomi: {\n    label: \"Xiaomi\",\n    color: \"hsl(var(--highlight-chart))\"\n  },\n  google: {\n    label: \"Google\",\n    color: \"hsl(var(--accent-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function PieChartLabelDemo() {\n  return (\n    <Card className=\"flex flex-col\">\n      <Card.Header className=\"items-center pb-0\">\n        <Card.Title>Pie Chart - Label</Card.Title>\n        <Card.Description>January - June 2024</Card.Description>\n      </Card.Header>\n      <Card.Content className=\"flex-1 pb-0\">\n        <Chart\n          config={config}\n          className=\"mx-auto aspect-square max-h-[250px] pb-0 [&_.recharts-pie-label-text]:fill-fg\"\n        >\n          <PieChart>\n            <Chart.Tooltip content={<Chart.TooltipContent hideLabel />} />\n            <Pie data={data} dataKey=\"visitors\" label nameKey=\"brand\" />\n          </PieChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col gap-2 text-sm\">\n        <div className=\"flex items-center gap-2 font-medium leading-none\">\n          Trending up by 5.2% this month <IconChartTrending />\n        </div>\n        <div className=\"leading-none text-muted-fg\">\n          Showing total visitors for the last 6 months\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/line/line-chart-demo": {
    "component": "@/components/docs/surfaces/chart/line/line-chart-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { CartesianGrid, Line, LineChart, XAxis } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"January\", sales: 186 },\n  { month: \"February\", sales: 305 },\n  { month: \"March\", sales: 237 },\n  { month: \"April\", sales: 73 },\n  { month: \"May\", sales: 209 },\n  { month: \"June\", sales: 214 },\n  { month: \"July\", sales: 186 },\n  { month: \"August\", sales: 305 },\n  { month: \"September\", sales: 237 },\n  { month: \"October\", sales: 73 },\n  { month: \"November\", sales: 209 },\n  { month: \"December\", sales: 214 }\n]\n\nconst config = {\n  sales: {\n    label: \"Sales\",\n    color: \"hsl(var(--primary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function LineChartDemo() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Line Chart</Card.Title>\n        <Card.Description>January - December 2024</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <LineChart\n            accessibilityLayer\n            data={data}\n            margin={{\n              left: 12,\n              right: 12\n            }}\n          >\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n            <Line\n              dataKey=\"sales\"\n              type=\"natural\"\n              stroke=\"var(--color-sales)\"\n              strokeWidth={2}\n              dot={false}\n            />\n          </LineChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col items-start gap-2 text-sm\">\n        <div className=\"flex gap-2 font-medium leading-none\">\n          Sales increased by 5.2% this year <IconChartTrending />\n        </div>\n        <div className=\"leading-none text-muted-fg\">Showing total visitors for one year</div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/line/line-chart-dots-demo": {
    "component": "@/components/docs/surfaces/chart/line/line-chart-dots-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { CartesianGrid, Line, LineChart, XAxis } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"January\", sales: 186, profit: 80 },\n  { month: \"February\", sales: 305, profit: 200 },\n  { month: \"March\", sales: 237, profit: 120 },\n  { month: \"April\", sales: 73, profit: 190 },\n  { month: \"May\", sales: 209, profit: 130 },\n  { month: \"June\", sales: 214, profit: 140 },\n  { month: \"July\", sales: 186, profit: 80 },\n  { month: \"August\", sales: 305, profit: 200 },\n  { month: \"September\", sales: 237, profit: 120 },\n  { month: \"October\", sales: 73, profit: 190 },\n  { month: \"November\", sales: 209, profit: 130 },\n  { month: \"December\", sales: 214, profit: 140 }\n]\n\nconst config = {\n  sales: {\n    label: \"Sales\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  profit: {\n    label: \"Profit\",\n    color: \"hsl(var(--secondary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function LineChartDotsDemo() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Line Chart - Dots</Card.Title>\n        <Card.Description>January - June 2024</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <LineChart\n            accessibilityLayer\n            data={data}\n            margin={{\n              left: 12,\n              right: 12\n            }}\n          >\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n            <Line\n              dataKey=\"sales\"\n              type=\"natural\"\n              stroke=\"var(--color-sales)\"\n              strokeWidth={2}\n              dot={{\n                fill: \"var(--color-sales)\"\n              }}\n              activeDot={{\n                r: 6\n              }}\n            />\n          </LineChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col items-start gap-2 text-sm\">\n        <div className=\"flex gap-2 font-medium leading-none\">\n          Profit increased by 5.2% this year <IconChartTrending />\n        </div>\n        <div className=\"leading-none text-muted-fg\">\n          Showing total profit for the last 10 months\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/line/line-chart-multiple-demo": {
    "component": "@/components/docs/surfaces/chart/line/line-chart-multiple-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { CartesianGrid, Line, LineChart, XAxis } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"January\", sales: 186, profit: 80 },\n  { month: \"February\", sales: 305, profit: 200 },\n  { month: \"March\", sales: 237, profit: 120 },\n  { month: \"April\", sales: 73, profit: 190 },\n  { month: \"May\", sales: 209, profit: 130 },\n  { month: \"June\", sales: 214, profit: 140 },\n  { month: \"July\", sales: 186, profit: 80 },\n  { month: \"August\", sales: 305, profit: 200 },\n  { month: \"September\", sales: 237, profit: 120 },\n  { month: \"October\", sales: 73, profit: 190 },\n  { month: \"November\", sales: 209, profit: 130 },\n  { month: \"December\", sales: 214, profit: 140 },\n  { month: \"January\", sales: 186, profit: 80 },\n  { month: \"February\", sales: 305, profit: 200 },\n  { month: \"March\", sales: 237, profit: 120 },\n  { month: \"April\", sales: 73, profit: 190 }\n]\n\nconst config = {\n  sales: {\n    label: \"Sales\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  profit: {\n    label: \"Profit\",\n    color: \"hsl(var(--secondary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function LineChartMultipleDemo() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Line Chart - Multiple</Card.Title>\n        <Card.Description>Today's sales and profit for the last 16 months</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <LineChart\n            accessibilityLayer\n            data={data}\n            margin={{\n              left: 12,\n              right: 12\n            }}\n          >\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n            <Line\n              dataKey=\"sales\"\n              type=\"monotone\"\n              stroke=\"var(--color-sales)\"\n              strokeWidth={2}\n              dot={false}\n            />\n            <Line\n              dataKey=\"profit\"\n              type=\"monotone\"\n              stroke=\"var(--color-profit)\"\n              strokeWidth={2}\n              dot={false}\n            />\n          </LineChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer>\n        <div className=\"flex w-full items-start gap-2 text-sm\">\n          <div className=\"grid gap-2\">\n            <div className=\"flex items-center gap-2 font-medium leading-none\">\n              Profit and sales increased by 12.5% this year <IconChartTrending />\n            </div>\n            <div className=\"flex items-center gap-2 leading-none text-muted-fg\">\n              January 2023 - April 2024\n            </div>\n          </div>\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/line/line-chart-label-demo": {
    "component": "@/components/docs/surfaces/chart/line/line-chart-label-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { CartesianGrid, LabelList, Line, LineChart, XAxis } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"January\", revenue: 400 },\n  { month: \"February\", revenue: 700 },\n  { month: \"March\", revenue: 500 },\n  { month: \"April\", revenue: 850 },\n  { month: \"May\", revenue: 200 },\n  { month: \"June\", revenue: 500 },\n  { month: \"July\", revenue: 600 },\n  { month: \"August\", revenue: 500 },\n  { month: \"September\", revenue: 800 },\n  { month: \"October\", revenue: 900 }\n]\n\nconst config = {\n  revenue: {\n    label: \"Revenue\",\n    color: \"hsl(var(--primary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function LineChartLabelDemo() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Line Chart - Label</Card.Title>\n        <Card.Description>January - October 2024</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <LineChart\n            accessibilityLayer\n            data={data}\n            margin={{\n              top: 20,\n              left: 12,\n              right: 12\n            }}\n          >\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator=\"line\" />} />\n            <Line\n              dataKey=\"revenue\"\n              type=\"natural\"\n              stroke=\"var(--color-revenue)\"\n              strokeWidth={2}\n              dot={{\n                fill: \"var(--color-revenue)\"\n              }}\n              activeDot={{\n                r: 6\n              }}\n            >\n              <LabelList position=\"top\" offset={12} className=\"fill-fg\" fontSize={12} />\n            </Line>\n          </LineChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col items-start gap-2 text-sm\">\n        <div className=\"flex gap-2 font-medium leading-none\">\n          Revenue increased by 5.2% this year <IconChartTrending />\n        </div>\n        <div className=\"leading-none text-muted-fg\">\n          Showing total revenue for the last 10 months\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/line/line-chart-dots-color-demo": {
    "component": "@/components/docs/surfaces/chart/line/line-chart-dots-color-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { CartesianGrid, Dot, Line, LineChart } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n  { browser: \"firefox\", visitors: 187, fill: \"var(--color-firefox)\" },\n  { browser: \"edge\", visitors: 173, fill: \"var(--color-edge)\" },\n  { browser: \"other\", visitors: 90, fill: \"var(--color-other)\" }\n]\n\nconst config = {\n  visitors: {\n    label: \"Visitors\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  chrome: {\n    label: \"Chrome\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  safari: {\n    label: \"Safari\",\n    color: \"hsl(var(--secondary-chart))\"\n  },\n  firefox: {\n    label: \"Firefox\",\n    color: \"hsl(var(--tertiary-chart))\"\n  },\n  edge: {\n    label: \"Edge\",\n    color: \"hsl(var(--highlight-chart))\"\n  },\n  other: {\n    label: \"Other\",\n    color: \"hsl(var(--accent-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function LineChartDotsColorDemo() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Line Chart - Dots Colors</Card.Title>\n        <Card.Description>January - June 2024</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <LineChart\n            accessibilityLayer\n            data={data}\n            margin={{\n              top: 24,\n              left: 24,\n              right: 24\n            }}\n          >\n            <CartesianGrid vertical={false} />\n            <Chart.Tooltip\n              cursor={false}\n              content={<Chart.TooltipContent indicator=\"line\" nameKey=\"visitors\" hideLabel />}\n            />\n            <Line\n              dataKey=\"visitors\"\n              type=\"natural\"\n              stroke=\"var(--color-visitors)\"\n              strokeWidth={2}\n              dot={({ payload, ...props }) => {\n                return (\n                  <Dot\n                    key={payload.browser}\n                    r={5}\n                    cx={props.cx}\n                    cy={props.cy}\n                    fill={payload.fill}\n                    stroke={payload.fill}\n                  />\n                )\n              }}\n            />\n          </LineChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col items-start gap-2 text-sm\">\n        <div className=\"flex gap-2 font-medium leading-none\">\n          Trending up by 5.2% this month <IconChartTrending />\n        </div>\n        <div className=\"leading-none text-muted-fg\">\n          Showing total visitors for the last 10 months\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/line/line-chart-linear-demo": {
    "component": "@/components/docs/surfaces/chart/line/line-chart-linear-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { CartesianGrid, Line, LineChart, XAxis } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"January\", sales: 186 },\n  { month: \"February\", sales: 305 },\n  { month: \"March\", sales: 237 },\n  { month: \"April\", sales: 73 },\n  { month: \"May\", sales: 209 },\n  { month: \"June\", sales: 214 },\n  { month: \"July\", sales: 186 },\n  { month: \"August\", sales: 305 },\n  { month: \"September\", sales: 237 },\n  { month: \"October\", sales: 73 },\n  { month: \"November\", sales: 209 },\n  { month: \"December\", sales: 214 },\n  { month: \"January\", sales: 186 },\n  { month: \"February\", sales: 305 },\n  { month: \"March\", sales: 237 },\n  { month: \"April\", sales: 73 },\n  { month: \"May\", sales: 209 },\n  { month: \"June\", sales: 214 },\n  { month: \"July\", sales: 186 },\n  { month: \"August\", sales: 305 },\n  { month: \"September\", sales: 237 },\n  { month: \"October\", sales: 373 }\n]\n\nconst config = {\n  sales: {\n    label: \"Sales\",\n    color: \"hsl(var(--primary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function LineChartLinearDemo() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Line Chart - Linear</Card.Title>\n        <Card.Description>January - December 2024</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <LineChart\n            accessibilityLayer\n            data={data}\n            margin={{\n              left: 12,\n              right: 12\n            }}\n          >\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n            <Line\n              dataKey=\"sales\"\n              type=\"linear\"\n              stroke=\"var(--color-sales)\"\n              strokeWidth={2}\n              dot={false}\n            />\n          </LineChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col items-start gap-2 text-sm\">\n        <div className=\"flex gap-2 font-medium leading-none\">\n          Sales increased by 5.2% this year <IconChartTrending />\n        </div>\n        <div className=\"leading-none text-muted-fg\">\n          Showing sales for january 2023 to october 2024\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/radial/radial-chart-text-demo": {
    "component": "@/components/docs/surfaces/chart/radial/radial-chart-text-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { Label, PolarGrid, PolarRadiusAxis, RadialBar, RadialBarChart } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [{ browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" }]\n\nconst config = {\n  visitors: {\n    label: \"Visitors\"\n  },\n  safari: {\n    label: \"Safari\",\n    color: \"hsl(var(--secondary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function RadialChartTextDemo() {\n  return (\n    <Card className=\"flex flex-col\">\n      <Card.Header className=\"items-center pb-0\">\n        <Card.Title>Radial Chart - Text</Card.Title>\n        <Card.Description>January - June 2024</Card.Description>\n      </Card.Header>\n      <Card.Content className=\"flex-1 pb-0\">\n        <Chart className=\"min-h-[250px] max-h-[250px] mx-auto aspect-square w-full\" config={config}>\n          <RadialBarChart\n            data={data}\n            startAngle={0}\n            endAngle={250}\n            innerRadius={80}\n            outerRadius={110}\n          >\n            <PolarGrid\n              gridType=\"circle\"\n              radialLines={false}\n              stroke=\"none\"\n              className=\"first:fill-muted last:fill-bg\"\n              polarRadius={[86, 74]}\n            />\n            <RadialBar dataKey=\"visitors\" background cornerRadius={10} />\n            <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\n              <Label\n                content={({ viewBox }) => {\n                  if (viewBox && \"cx\" in viewBox && \"cy\" in viewBox) {\n                    return (\n                      <text\n                        x={viewBox.cx}\n                        y={viewBox.cy}\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                      >\n                        <tspan x={viewBox.cx} y={viewBox.cy} className=\"fill-fg text-4xl font-bold\">\n                          {data[0].visitors.toLocaleString()}\n                        </tspan>\n                        <tspan x={viewBox.cx} y={(viewBox.cy || 0) + 24} className=\"fill-muted-fg\">\n                          Visitors\n                        </tspan>\n                      </text>\n                    )\n                  }\n                }}\n              />\n            </PolarRadiusAxis>\n          </RadialBarChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col gap-2 text-sm\">\n        <div className=\"flex items-center gap-2 font-medium leading-none\">\n          Visitors increased by 5.2% this year <IconChartTrending />\n        </div>\n        <div className=\"leading-none text-muted-fg\">\n          Showing total visitors for the last 3 months\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/radial/radial-chart-demo": {
    "component": "@/components/docs/surfaces/chart/radial/radial-chart-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { RadialBar, RadialBarChart } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n  { browser: \"firefox\", visitors: 187, fill: \"var(--color-firefox)\" },\n  { browser: \"edge\", visitors: 173, fill: \"var(--color-edge)\" },\n  { browser: \"other\", visitors: 90, fill: \"var(--color-other)\" }\n]\n\nconst config = {\n  visitors: {\n    label: \"Visitors\"\n  },\n  chrome: {\n    label: \"Chrome\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  safari: {\n    label: \"Safari\",\n    color: \"hsl(var(--secondary-chart))\"\n  },\n  firefox: {\n    label: \"Firefox\",\n    color: \"hsl(var(--tertiary-chart))\"\n  },\n  edge: {\n    label: \"Edge\",\n    color: \"hsl(var(--highlight-chart))\"\n  },\n  other: {\n    label: \"Other\",\n    color: \"hsl(var(--accent-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function RadialChartDemo() {\n  return (\n    <Card className=\"flex flex-col\">\n      <Card.Header className=\"items-center pb-0\">\n        <Card.Title>Radial Chart</Card.Title>\n        <Card.Description>January - June 2024</Card.Description>\n      </Card.Header>\n      <Card.Content className=\"flex-1 pb-0\">\n        <Chart className=\"min-h-[250px] max-h-[250px] mx-auto aspect-square w-full\" config={config}>\n          <RadialBarChart data={data} innerRadius={30} outerRadius={110}>\n            <Chart.Tooltip\n              cursor={false}\n              content={<Chart.TooltipContent hideLabel nameKey=\"browser\" />}\n            />\n            <RadialBar dataKey=\"visitors\" background />\n          </RadialBarChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col gap-2 text-sm\">\n        <div className=\"flex items-center gap-2 font-medium leading-none\">\n          Trending up by 5.2% this month <IconChartTrending />\n        </div>\n        <div className=\"leading-none text-muted-fg\">\n          Showing total visitors for the last 6 months\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/radial/radial-chart-shape-demo": {
    "component": "@/components/docs/surfaces/chart/radial/radial-chart-shape-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { Label, PolarGrid, PolarRadiusAxis, RadialBar, RadialBarChart } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst chartData = [{ browser: \"safari\", visitors: 1260, fill: \"var(--color-safari)\" }]\n\nconst config = {\n  visitors: {\n    label: \"Visitors\"\n  },\n  safari: {\n    label: \"Safari\",\n    color: \"hsl(var(--secondary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function RadialChartShapeDemo() {\n  return (\n    <Card className=\"flex flex-col\">\n      <Card.Header className=\"items-center pb-0\">\n        <Card.Title>Radial Chart - Shape</Card.Title>\n        <Card.Description>January - June 2024</Card.Description>\n      </Card.Header>\n      <Card.Content className=\"flex-1 pb-0\">\n        <Chart className=\"min-h-[250px] max-h-[250px] mx-auto aspect-square w-full\" config={config}>\n          <RadialBarChart data={chartData} endAngle={100} innerRadius={80} outerRadius={140}>\n            <PolarGrid\n              gridType=\"circle\"\n              radialLines={false}\n              stroke=\"none\"\n              className=\"first:fill-muted last:fill-bg\"\n              polarRadius={[86, 74]}\n            />\n            <RadialBar dataKey=\"visitors\" background />\n            <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\n              <Label\n                content={({ viewBox }) => {\n                  if (viewBox && \"cx\" in viewBox && \"cy\" in viewBox) {\n                    return (\n                      <text\n                        x={viewBox.cx}\n                        y={viewBox.cy}\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                      >\n                        <tspan x={viewBox.cx} y={viewBox.cy} className=\"fill-fg text-4xl font-bold\">\n                          {chartData[0].visitors.toLocaleString()}\n                        </tspan>\n                        <tspan x={viewBox.cx} y={(viewBox.cy || 0) + 24} className=\"fill-muted-fg\">\n                          Visitors\n                        </tspan>\n                      </text>\n                    )\n                  }\n                }}\n              />\n            </PolarRadiusAxis>\n          </RadialBarChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col gap-2 text-sm\">\n        <div className=\"flex items-center gap-2 font-medium leading-none\">\n          Trending up by 5.2% this month <IconChartTrending />\n        </div>\n        <div className=\"leading-none text-muted-fg\">\n          Showing total visitors for the last 6 months\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/radial/radial-chart-stacked-demo": {
    "component": "@/components/docs/surfaces/chart/radial/radial-chart-stacked-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { Label, PolarRadiusAxis, RadialBar, RadialBarChart } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [{ month: \"january\", sales: 1260, profit: 570 }]\n\nconst config = {\n  sales: {\n    label: \"Sales\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  profit: {\n    label: \"Profit\",\n    color: \"hsl(var(--secondary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function RadialChartStackedDemo() {\n  const totalVisitors = data[0].sales + data[0].profit\n\n  return (\n    <Card className=\"flex flex-col\">\n      <Card.Header className=\"items-center pb-0\">\n        <Card.Title>Radial Chart - Stacked</Card.Title>\n        <Card.Description>August - December 2023</Card.Description>\n      </Card.Header>\n      <Card.Content className=\"flex flex-1 items-center pb-0\">\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full mx-auto aspect-square\" config={config}>\n          <RadialBarChart data={data} endAngle={180} innerRadius={80} outerRadius={130}>\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n            <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\n              <Label\n                content={({ viewBox }) => {\n                  if (viewBox && \"cx\" in viewBox && \"cy\" in viewBox) {\n                    return (\n                      <text x={viewBox.cx} y={viewBox.cy} textAnchor=\"middle\">\n                        <tspan\n                          x={viewBox.cx}\n                          y={(viewBox.cy || 0) - 16}\n                          className=\"fill-fg text-2xl font-bold\"\n                        >\n                          {totalVisitors.toLocaleString()}\n                        </tspan>\n                        <tspan x={viewBox.cx} y={(viewBox.cy || 0) + 4} className=\"fill-muted-fg\">\n                          Visitors\n                        </tspan>\n                      </text>\n                    )\n                  }\n                }}\n              />\n            </PolarRadiusAxis>\n            <RadialBar\n              dataKey=\"sales\"\n              stackId=\"a\"\n              cornerRadius={5}\n              fill=\"var(--color-sales)\"\n              className=\"stroke-transparent stroke-2\"\n            />\n            <RadialBar\n              dataKey=\"profit\"\n              fill=\"var(--color-profit)\"\n              stackId=\"a\"\n              cornerRadius={5}\n              className=\"stroke-transparent stroke-2\"\n            />\n          </RadialBarChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col gap-2 text-sm\">\n        <div className=\"flex items-center gap-2 font-medium leading-none\">\n          Profit increased by 5.2% this year <IconChartTrending />\n        </div>\n        <div className=\"leading-none text-muted-fg\">\n          Showing total profit and sales for the last 3 months\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/radial/radial-chart-grid-demo": {
    "component": "@/components/docs/surfaces/chart/radial/radial-chart-grid-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { PolarGrid, RadialBar, RadialBarChart } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n  { browser: \"firefox\", visitors: 187, fill: \"var(--color-firefox)\" },\n  { browser: \"edge\", visitors: 173, fill: \"var(--color-edge)\" },\n  { browser: \"other\", visitors: 90, fill: \"var(--color-other)\" }\n]\n\nconst config = {\n  visitors: {\n    label: \"Visitors\"\n  },\n  chrome: {\n    label: \"Chrome\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  safari: {\n    label: \"Safari\",\n    color: \"hsl(var(--secondary-chart))\"\n  },\n  firefox: {\n    label: \"Firefox\",\n    color: \"hsl(var(--tertiary-chart))\"\n  },\n  edge: {\n    label: \"Edge\",\n    color: \"hsl(var(--highlight-chart))\"\n  },\n  other: {\n    label: \"Other\",\n    color: \"hsl(var(--accent-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function RadialChartGridDemo() {\n  return (\n    <Card className=\"flex flex-col\">\n      <Card.Header className=\"items-center pb-0\">\n        <Card.Title>Radial Chart - Grid</Card.Title>\n        <Card.Description>January - June 2024</Card.Description>\n      </Card.Header>\n      <Card.Content className=\"flex-1 pb-0\">\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full mx-auto aspect-square\" config={config}>\n          <RadialBarChart data={data} innerRadius={30} outerRadius={100}>\n            <Chart.Tooltip\n              cursor={false}\n              content={<Chart.TooltipContent hideLabel nameKey=\"browser\" />}\n            />\n            <PolarGrid gridType=\"circle\" />\n            <RadialBar dataKey=\"visitors\" />\n          </RadialBarChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col gap-2 text-sm\">\n        <div className=\"flex items-center gap-2 font-medium leading-none\">\n          Trending up by 5.2% this month <IconChartTrending />\n        </div>\n        <div className=\"leading-none text-muted-fg\">\n          Showing total visitors for the last 6 months\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/bar/bar-chart-multiple-demo": {
    "component": "@/components/docs/surfaces/chart/bar/bar-chart-multiple-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { Bar, BarChart, CartesianGrid, XAxis } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"January\", onlineCourses: 1200, webinars: 800 },\n  { month: \"February\", onlineCourses: 800, webinars: 950 },\n  { month: \"March\", onlineCourses: 1200, webinars: 1200 },\n  { month: \"April\", onlineCourses: 1000, webinars: 1500 },\n  { month: \"May\", onlineCourses: 1200, webinars: 1300 },\n  { month: \"June\", onlineCourses: 1200, webinars: 1700 },\n  { month: \"July\", onlineCourses: 1500, webinars: 1400 },\n  { month: \"August\", onlineCourses: 1400, webinars: 2100 },\n  { month: \"September\", onlineCourses: 2300, webinars: 1600 },\n  { month: \"October\", onlineCourses: 1173, webinars: 2190 },\n  { month: \"November\", onlineCourses: 1200, webinars: 1600 },\n  { month: \"December\", onlineCourses: 1200, webinars: 1600 },\n  { month: \"January\", onlineCourses: 1200, webinars: 800 },\n  { month: \"February\", onlineCourses: 800, webinars: 950 },\n  { month: \"March\", onlineCourses: 1200, webinars: 1200 },\n  { month: \"April\", onlineCourses: 1000, webinars: 1500 },\n  { month: \"May\", onlineCourses: 1200, webinars: 1300 },\n  { month: \"June\", onlineCourses: 1200, webinars: 1700 },\n  { month: \"July\", onlineCourses: 1500, webinars: 1400 },\n  { month: \"August\", onlineCourses: 1400, webinars: 2100 }\n]\n\nconst config = {\n  onlineCourses: {\n    label: \"Online Courses\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  webinars: {\n    label: \"Webinars\",\n    color: \"hsl(var(--secondary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function BarChartMultipleDemo() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Bar Chart - Multiple</Card.Title>\n        <Card.Description>January - October 2024</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <BarChart accessibilityLayer data={data}>\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              tickMargin={10}\n              axisLine={false}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator=\"dashed\" />} />\n            <Bar dataKey=\"onlineCourses\" fill=\"var(--color-onlineCourses)\" radius={0} />\n            <Bar dataKey=\"webinars\" fill=\"var(--color-webinars)\" radius={0} />\n          </BarChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col items-start gap-2 text-sm\">\n        <div className=\"flex gap-2 font-medium leading-none\">\n          Online courses increased by 15.2% this year <IconChartTrending />\n        </div>\n        <div className=\"leading-none text-muted-fg\">\n          Showing total revenue for january 2023 to august 2024\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/bar/bar-chart-analytic-demo": {
    "component": "@/components/docs/surfaces/chart/bar/bar-chart-analytic-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { Bar, BarChart, Rectangle, XAxis, YAxis } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  {\n    country: \"Canada\",\n    count: 4276,\n    percentage: 22.0\n  },\n  {\n    country: \"Germany\",\n    count: 3689,\n    percentage: 16.6\n  },\n  {\n    country: \"France\",\n    count: 2134,\n    percentage: 9.6\n  },\n  {\n    country: \"Indonesia\",\n    count: 3567,\n    percentage: 16.2\n  },\n  {\n    country: \"United Kingdom\",\n    count: 2234,\n    percentage: 4.5\n  },\n  {\n    country: \"Brazil\",\n    count: 1967,\n    percentage: 4.2\n  },\n  {\n    country: \"Canada\",\n    count: 4276,\n    percentage: 22.0\n  }\n]\n\nconst config = {\n  count: {\n    label: \"Count\",\n    color: \"hsl(var(--primary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function BarChartAnalyticDemo() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Bar Chart - Custom Label</Card.Title>\n        <Card.Description>\n          The number of visitors to the website has increased by 15.5% this year\n        </Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <BarChart\n            accessibilityLayer\n            data={data}\n            layout=\"vertical\"\n            barSize={30}\n            margin={{ left: 0, right: 0 }}\n          >\n            <YAxis dataKey=\"name\" type=\"category\" hide />\n            <XAxis dataKey=\"count\" type=\"number\" hide />\n            <Bar\n              dataKey=\"count\"\n              layout=\"vertical\"\n              fill=\"var(--color-count)\"\n              background={{ radius: 6, fill: \"hsl(var(--primary-chart)/20%)\" }}\n              radius={6}\n              shape={(props: any) => (\n                <>\n                  <Rectangle {...props} />\n                  <text x={props.x + 10} y={props.y + 20} fill=\"hsl(var(--light))\">\n                    {props.country}\n                  </text>\n                  <text\n                    x={props.background.width - 10}\n                    y={props.y + 20}\n                    textAnchor=\"end\"\n                    fill=\"hsl(var(--fg))\"\n                  >\n                    {props.count.toLocaleString()} ({props.percentage.toFixed(1)}%)\n                  </text>\n                </>\n              )}\n            />\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator=\"dot\" />} />\n          </BarChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer>\n        <div className=\"flex w-full items-start gap-2 text-sm\">\n          <div className=\"grid gap-2\">\n            <div className=\"flex items-center gap-2 font-medium leading-none\">\n              Visitors increased by 5.2% this year <IconChartTrending />\n            </div>\n            <div className=\"flex items-center gap-2 leading-none text-muted-fg\">\n              Showing total visitors for last year\n            </div>\n          </div>\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/bar/bar-chart-mixed-demo": {
    "component": "@/components/docs/surfaces/chart/bar/bar-chart-mixed-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { Bar, BarChart, XAxis, YAxis } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { brand: \"apple\", visitors: 175, fill: \"var(--color-apple)\" },\n  { brand: \"samsung\", visitors: 100, fill: \"var(--color-samsung)\" },\n  { brand: \"huawei\", visitors: 187, fill: \"var(--color-huawei)\" },\n  { brand: \"xiaomi\", visitors: 173, fill: \"var(--color-xiaomi)\" },\n  { brand: \"google\", visitors: 90, fill: \"var(--color-google)\" },\n  { brand: \"motorola\", visitors: 120, fill: \"var(--color-motorola)\" },\n  { brand: \"nokia\", visitors: 150, fill: \"var(--color-nokia)\" },\n  { brand: \"oppo\", visitors: 130, fill: \"var(--color-oppo)\" }\n]\n\nconst config = {\n  visitors: {\n    label: \"Visitors\"\n  },\n  apple: {\n    label: \"Apple\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  samsung: {\n    label: \"Samsung\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  huawei: {\n    label: \"Huawei\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  xiaomi: {\n    label: \"Xiaomi\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  google: {\n    label: \"Google\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  motorola: {\n    label: \"Motorola\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  nokia: {\n    label: \"Nokia\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  oppo: {\n    label: \"Oppo\",\n    color: \"hsl(var(--primary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function BarChartMixedDemo() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Bar Chart - Mixed</Card.Title>\n        <Card.Description>January - September 2024</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <BarChart\n            accessibilityLayer\n            data={data}\n            layout=\"vertical\"\n            margin={{\n              left: 0\n            }}\n          >\n            <YAxis\n              dataKey=\"brand\"\n              type=\"category\"\n              tickLine={false}\n              tickMargin={10}\n              axisLine={false}\n              tickFormatter={(value) => config[value as keyof typeof config]?.label}\n            />\n            <XAxis dataKey=\"visitors\" type=\"number\" hide />\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n            <Bar dataKey=\"visitors\" layout=\"vertical\" radius={5} />\n          </BarChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col items-start gap-2 text-sm\">\n        <div className=\"flex gap-2 font-medium leading-none\">\n          Trending up by 5.2% this month <IconChartTrending />\n        </div>\n        <div className=\"leading-none text-muted-fg\">\n          Showing total visitors for the last 9 months\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/bar/bar-chart-demo": {
    "component": "@/components/docs/surfaces/chart/bar/bar-chart-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { Bar, BarChart, CartesianGrid, XAxis } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"January\", sales: 186, profit: 80 },\n  { month: \"February\", sales: 305, profit: 200 },\n  { month: \"March\", sales: 237, profit: 120 },\n  { month: \"April\", sales: 73, profit: 190 },\n  { month: \"May\", sales: 209, profit: 130 },\n  { month: \"June\", sales: 214, profit: 140 },\n  { month: \"July\", sales: 186, profit: 80 },\n  { month: \"August\", sales: 305, profit: 200 },\n  { month: \"September\", sales: 237, profit: 120 },\n  { month: \"October\", sales: 73, profit: 190 },\n  { month: \"November\", sales: 209, profit: 130 }\n]\n\nconst config = {\n  sales: {\n    label: \"Sales\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  profit: {\n    label: \"Profit\",\n    color: \"hsl(var(--secondary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function BarChartDemo() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Bar Chart</Card.Title>\n        <Card.Description>January - November 2024</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <BarChart accessibilityLayer data={data}>\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              tickMargin={10}\n              axisLine={false}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent hideLabel />} />\n            <Bar dataKey=\"sales\" fill=\"var(--color-sales)\" radius={4} />\n            <Bar dataKey=\"profit\" fill=\"var(--color-profit)\" radius={4} />\n          </BarChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col items-start gap-2 text-sm\">\n        <div className=\"flex gap-2 font-medium leading-none\">\n          Trending up by 10.5% this month <IconChartTrending />\n        </div>\n        <div className=\"leading-none text-muted-fg\">Showing total sales for the last 11 months</div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/bar/bar-chart-horizontal-demo": {
    "component": "@/components/docs/surfaces/chart/bar/bar-chart-horizontal-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { Bar, BarChart, CartesianGrid, LabelList, XAxis, YAxis } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"January\", sales: 186, profit: 80 },\n  { month: \"February\", sales: 305, profit: 200 },\n  { month: \"March\", sales: 237, profit: 120 },\n  { month: \"April\", sales: 73, profit: 190 },\n  { month: \"May\", sales: 209, profit: 130 },\n  { month: \"June\", sales: 214, profit: 140 },\n  { month: \"July\", sales: 186, profit: 80 }\n]\n\nconst config = {\n  sales: {\n    label: \"Sales\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  profit: {\n    label: \"Profit\",\n    color: \"hsl(var(--secondary-chart))\"\n  },\n  label: {\n    color: \"hsl(var(--bg))\"\n  }\n} satisfies ChartConfig\n\nexport default function BarChartHorizontalDemo() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Bar Chart - Horizontal</Card.Title>\n        <Card.Description>January - July 2024</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <BarChart\n            accessibilityLayer\n            data={data}\n            layout=\"vertical\"\n            margin={{\n              right: 16\n            }}\n          >\n            <CartesianGrid horizontal={false} />\n            <YAxis\n              dataKey=\"month\"\n              type=\"category\"\n              tickLine={false}\n              tickMargin={10}\n              axisLine={false}\n              tickFormatter={(value) => value.slice(0, 3)}\n              hide\n            />\n            <XAxis dataKey=\"sales\" type=\"number\" hide />\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator=\"line\" />} />\n            <Bar dataKey=\"sales\" layout=\"vertical\" fill=\"var(--color-sales)\" radius={4}>\n              <LabelList\n                dataKey=\"month\"\n                position=\"insideLeft\"\n                offset={8}\n                className=\"fill-light\"\n                fontSize={12}\n              />\n              <LabelList\n                dataKey=\"sales\"\n                position=\"right\"\n                offset={8}\n                className=\"fill-fg\"\n                fontSize={12}\n              />\n            </Bar>\n          </BarChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col items-start gap-2 text-sm\">\n        <div className=\"flex gap-2 font-medium leading-none\">\n          Sales increased by 5.2% this year <IconChartTrending />\n        </div>\n        <div className=\"leading-none text-muted-fg\">\n          Showing total visitors for the last 7 months\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/radar/radar-chart-demo": {
    "component": "@/components/docs/surfaces/chart/radar/radar-chart-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"Jan\", sales: 186 },\n  { month: \"Feb\", sales: 305 },\n  { month: \"Mar\", sales: 237 },\n  { month: \"Apr\", sales: 273 },\n  { month: \"May\", sales: 209 },\n  { month: \"Jun\", sales: 214 },\n  { month: \"Jul\", sales: 186 },\n  { month: \"Aug\", sales: 305 },\n  { month: \"Sep\", sales: 237 },\n  { month: \"Oct\", sales: 73 },\n  { month: \"Nov\", sales: 209 },\n  { month: \"Dec\", sales: 214 }\n]\n\nconst config = {\n  sales: {\n    label: \"Sales\",\n    color: \"hsl(var(--primary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function RadarChartDemo() {\n  return (\n    <Card>\n      <Card.Header className=\"items-center pb-4\">\n        <Card.Title>Radar Chart</Card.Title>\n        <Card.Description>Showing total visitors for last year</Card.Description>\n      </Card.Header>\n      <Card.Content className=\"pb-0\">\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <RadarChart data={data}>\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n            <PolarAngleAxis dataKey=\"month\" />\n            <PolarGrid />\n            <Radar dataKey=\"sales\" fill=\"var(--color-sales)\" fillOpacity={0.6} />\n          </RadarChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col gap-2 text-sm\">\n        <div className=\"flex items-center gap-2 font-medium leading-none\">\n          Sales increased by 5.2% this year <IconChartTrending />\n        </div>\n        <div className=\"flex items-center gap-2 leading-none text-muted-fg\">\n          January - December 2023\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/radar/radar-chart-line-only-demo": {
    "component": "@/components/docs/surfaces/chart/radar/radar-chart-line-only-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"Jan\", sales: 186, profit: 160 },\n  { month: \"Feb\", sales: 185, profit: 170 },\n  { month: \"Mar\", sales: 207, profit: 180 },\n  { month: \"Apr\", sales: 173, profit: 160 },\n  { month: \"May\", sales: 160, profit: 190 },\n  { month: \"Jun\", sales: 174, profit: 204 },\n  { month: \"Jul\", sales: 186, profit: 80 },\n  { month: \"Aug\", sales: 305, profit: 200 },\n  { month: \"Sep\", sales: 237, profit: 120 },\n  { month: \"Oct\", sales: 73, profit: 190 },\n  { month: \"Nov\", sales: 209, profit: 130 },\n  { month: \"Dec\", sales: 214, profit: 140 }\n]\n\nconst config = {\n  sales: {\n    label: \"Sales\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  profit: {\n    label: \"Profit\",\n    color: \"hsl(var(--secondary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function RadarChartLineOnlyDemo() {\n  return (\n    <Card>\n      <Card.Header className=\"items-center pb-4\">\n        <Card.Title>Radar Chart - Lines Only</Card.Title>\n        <Card.Description>Showing total visitors for last year</Card.Description>\n      </Card.Header>\n      <Card.Content className=\"pb-0\">\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full mx-auto aspect-square\" config={config}>\n          <RadarChart data={data}>\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator=\"line\" />} />\n            <PolarAngleAxis dataKey=\"month\" />\n            <PolarGrid radialLines={false} />\n            <Radar\n              dataKey=\"sales\"\n              fill=\"var(--color-sales)\"\n              fillOpacity={0}\n              stroke=\"var(--color-sales)\"\n              strokeWidth={2}\n            />\n            <Radar\n              dataKey=\"profit\"\n              fill=\"var(--color-profit)\"\n              fillOpacity={0}\n              stroke=\"var(--color-profit)\"\n              strokeWidth={2}\n            />\n          </RadarChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col gap-2 text-sm\">\n        <div className=\"flex items-center gap-2 font-medium leading-none\">\n          Profit increased by 5.2% this year <IconChartTrending />\n        </div>\n        <div className=\"flex items-center gap-2 leading-none text-muted-fg\">\n          January - December 2023\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/radar/radar-chart-icon-demo": {
    "component": "@/components/docs/surfaces/chart/radar/radar-chart-icon-demo",
    "raw": "\"use client\"\n\nimport { IconArrowWall2Down, IconArrowWallUp, IconChartTrending } from \"justd-icons\"\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"January\", sales: 186, profit: 80 },\n  { month: \"February\", sales: 305, profit: 200 },\n  { month: \"March\", sales: 237, profit: 120 },\n  { month: \"April\", sales: 73, profit: 190 },\n  { month: \"May\", sales: 209, profit: 130 },\n  { month: \"June\", sales: 214, profit: 140 }\n]\n\nconst config = {\n  sales: {\n    label: \"Sales\",\n    color: \"hsl(var(--primary-chart))\",\n    icon: IconArrowWallUp\n  },\n  profit: {\n    label: \"Profit\",\n    color: \"hsl(var(--secondary-chart))\",\n    icon: IconArrowWall2Down\n  }\n} satisfies ChartConfig\n\nexport default function RadarChartIconDemo() {\n  return (\n    <Card>\n      <Card.Header className=\"items-center pb-4\">\n        <Card.Title>Radar Chart - Icons</Card.Title>\n        <Card.Description>Showing total visitors for the last 6 months</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <RadarChart\n            data={data}\n            margin={{\n              top: -40,\n              bottom: -10\n            }}\n          >\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator=\"line\" />} />\n            <PolarAngleAxis dataKey=\"month\" />\n            <PolarGrid />\n            <Radar dataKey=\"sales\" fill=\"var(--color-sales)\" fillOpacity={0.6} />\n            <Radar dataKey=\"profit\" fill=\"var(--color-profit)\" />\n            <Chart.Legend className=\"mt-8\" content={<Chart.LegendContent />} />\n          </RadarChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col gap-2 pt-4 text-sm\">\n        <div className=\"flex items-center gap-2 font-medium leading-none\">\n          Trending up by 5.2% this month <IconChartTrending />\n        </div>\n        <div className=\"flex items-center gap-2 leading-none text-muted-fg\">\n          January - June 2024\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/radar/radar-chart-dots-demo": {
    "component": "@/components/docs/surfaces/chart/radar/radar-chart-dots-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"Jan\", sales: 186 },\n  { month: \"Feb\", sales: 305 },\n  { month: \"Mar\", sales: 237 },\n  { month: \"Apr\", sales: 273 },\n  { month: \"May\", sales: 209 },\n  { month: \"Jun\", sales: 214 },\n  { month: \"Jul\", sales: 186 },\n  { month: \"Aug\", sales: 305 },\n  { month: \"Sep\", sales: 237 },\n  { month: \"Oct\", sales: 73 },\n  { month: \"Nov\", sales: 209 },\n  { month: \"Dec\", sales: 214 }\n]\n\nconst config = {\n  sales: {\n    label: \"Sales\",\n    color: \"hsl(var(--primary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function RadarChartDotsDemo() {\n  return (\n    <Card>\n      <Card.Header className=\"items-center\">\n        <Card.Title>Radar Chart - Dots</Card.Title>\n        <Card.Description>Showing total visitors for last year</Card.Description>\n      </Card.Header>\n      <Card.Content className=\"pb-0\">\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <RadarChart data={data}>\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n            <PolarAngleAxis dataKey=\"month\" />\n            <PolarGrid />\n            <Radar\n              dataKey=\"sales\"\n              fill=\"var(--color-sales)\"\n              fillOpacity={0.6}\n              dot={{\n                r: 4,\n                fillOpacity: 1\n              }}\n            />\n          </RadarChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col gap-2 text-sm\">\n        <div className=\"flex items-center gap-2 font-medium leading-none\">\n          Sales increased by 5.2% this year <IconChartTrending />\n        </div>\n        <div className=\"flex items-center gap-2 leading-none text-muted-fg\">\n          January - December 2023\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/radar/radar-chart-multiple-demo": {
    "component": "@/components/docs/surfaces/chart/radar/radar-chart-multiple-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"Jan\", sales: 186, profit: 80 },\n  { month: \"Feb\", sales: 305, profit: 200 },\n  { month: \"Mar\", sales: 237, profit: 120 },\n  { month: \"Apr\", sales: 73, profit: 190 },\n  { month: \"May\", sales: 209, profit: 130 },\n  { month: \"Jun\", sales: 214, profit: 140 },\n  { month: \"Jul\", sales: 186, profit: 80 },\n  { month: \"Aug\", sales: 305, profit: 200 },\n  { month: \"Sep\", sales: 237, profit: 120 },\n  { month: \"Oct\", sales: 73, profit: 190 },\n  { month: \"Nov\", sales: 209, profit: 130 },\n  { month: \"Dec\", sales: 214, profit: 140 }\n]\n\nconst config = {\n  sales: {\n    label: \"Sales\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  profit: {\n    label: \"Profit\",\n    color: \"hsl(var(--secondary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function RadarChartMultipleDemo() {\n  return (\n    <Card>\n      <Card.Header className=\"items-center pb-4\">\n        <Card.Title>Radar Chart - Multiple</Card.Title>\n        <Card.Description>Showing total visitors for last year</Card.Description>\n      </Card.Header>\n      <Card.Content className=\"pb-0\">\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <RadarChart data={data}>\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent indicator=\"line\" />} />\n            <PolarAngleAxis dataKey=\"month\" />\n            <PolarGrid />\n            <Radar dataKey=\"sales\" fill=\"var(--color-sales)\" fillOpacity={0.6} />\n            <Radar dataKey=\"profit\" fill=\"var(--color-profit)\" />\n          </RadarChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer className=\"flex-col gap-2 text-sm\">\n        <div className=\"flex items-center gap-2 font-medium leading-none\">\n          Profit increased by 5.2% this year <IconChartTrending />\n        </div>\n        <div className=\"flex items-center gap-2 leading-none text-muted-fg\">\n          January - December 2023\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/chart/basic-chart-demo": {
    "component": "@/components/docs/surfaces/chart/basic-chart-demo",
    "raw": "\"use client\"\n\nimport { IconChartTrending } from \"justd-icons\"\nimport { Area, AreaChart, CartesianGrid, XAxis } from \"recharts\"\nimport { Card, Chart, type ChartConfig } from \"ui\"\n\nconst data = [\n  { month: \"January\", sales: 186, profit: 80 },\n  { month: \"February\", sales: 305, profit: 200 },\n  { month: \"March\", sales: 237, profit: 120 },\n  { month: \"April\", sales: 73, profit: 190 },\n  { month: \"May\", sales: 209, profit: 130 },\n  { month: \"June\", sales: 214, profit: 140 },\n  { month: \"July\", sales: 186, profit: 80 },\n  { month: \"August\", sales: 305, profit: 200 },\n  { month: \"September\", sales: 237, profit: 120 },\n  { month: \"October\", sales: 73, profit: 190 },\n  { month: \"November\", sales: 209, profit: 130 },\n  { month: \"December\", sales: 214, profit: 140 }\n]\n\nconst config = {\n  sales: {\n    label: \"Sales\",\n    color: \"hsl(var(--primary-chart))\"\n  },\n  profit: {\n    label: \"Profit\",\n    color: \"hsl(var(--secondary-chart))\"\n  }\n} satisfies ChartConfig\n\nexport default function BasicChartDemo() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Sales</Card.Title>\n        <Card.Description>Showing sales for the last year</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Chart className=\"min-h-[250px] max-h-[250px] w-full\" config={config}>\n          <AreaChart\n            accessibilityLayer\n            data={data}\n            margin={{\n              left: 10,\n              right: 10\n            }}\n          >\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n            <Chart.Tooltip cursor={false} content={<Chart.TooltipContent />} />\n            <defs>\n              <linearGradient id=\"fillSales\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"var(--color-sales)\" stopOpacity={0.8} />\n                <stop offset=\"95%\" stopColor=\"var(--color-sales)\" stopOpacity={0.1} />\n              </linearGradient>\n              <linearGradient id=\"fillProfit\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"var(--color-profit)\" stopOpacity={0.8} />\n                <stop offset=\"95%\" stopColor=\"var(--color-profit)\" stopOpacity={0.1} />\n              </linearGradient>\n            </defs>\n            <Area\n              dataKey=\"profit\"\n              type=\"natural\"\n              fill=\"url(#fillProfit)\"\n              fillOpacity={0.4}\n              stroke=\"var(--color-profit)\"\n              stackId=\"a\"\n            />\n            <Area\n              dataKey=\"sales\"\n              type=\"natural\"\n              fill=\"url(#fillSales)\"\n              fillOpacity={0.4}\n              stroke=\"var(--color-sales)\"\n              stackId=\"a\"\n            />\n            <Chart.Legend content={<Chart.LegendContent />} className=\"mt-6\" />\n          </AreaChart>\n        </Chart>\n      </Card.Content>\n      <Card.Footer>\n        <div className=\"flex w-full items-start gap-2 text-sm\">\n          <div className=\"grid gap-2\">\n            <div className=\"flex items-center gap-2 font-medium leading-none\">\n              Profit increased by 10.2% this year <IconChartTrending />\n            </div>\n            <div className=\"flex items-center gap-2 leading-none text-muted-fg\">\n              January - December 2024\n            </div>\n          </div>\n        </div>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/description-list/description-list-demo": {
    "component": "@/components/docs/surfaces/description-list/description-list-demo",
    "raw": "import { DescriptionList } from \"@/components/ui/description-list\"\n\nexport default function DescriptionListDemo() {\n  return (\n    <DescriptionList>\n      <DescriptionList.Term>Invoice Number</DescriptionList.Term>\n      <DescriptionList.Details>INV-12345</DescriptionList.Details>\n      <DescriptionList.Term>Invoice Date</DescriptionList.Term>\n      <DescriptionList.Details>September 21, 2024</DescriptionList.Details>\n      <DescriptionList.Term>Due Date</DescriptionList.Term>\n      <DescriptionList.Details>October 21, 2024</DescriptionList.Details>\n      <DescriptionList.Term>Customer Name</DescriptionList.Term>\n      <DescriptionList.Details>John Doe</DescriptionList.Details>\n      <DescriptionList.Term>Total Amount</DescriptionList.Term>\n      <DescriptionList.Details>$1,250.00</DescriptionList.Details>\n      <DescriptionList.Term>Status</DescriptionList.Term>\n      <DescriptionList.Details>Pending</DescriptionList.Details>\n    </DescriptionList>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/description-list/description-list-heading-demo": {
    "component": "@/components/docs/surfaces/description-list/description-list-heading-demo",
    "raw": "\"use client\"\n\nimport { DescriptionList, Heading } from \"ui\"\n\nexport default function DescriptionListHeadingDemo() {\n  return (\n    <div>\n      <Heading className=\"sm:text-lg\">Product Details</Heading>\n      <DescriptionList>\n        <DescriptionList.Term>Product Name</DescriptionList.Term>\n        <DescriptionList.Details>Wireless Headphones</DescriptionList.Details>\n        <DescriptionList.Term>Battery Life</DescriptionList.Term>\n        <DescriptionList.Details>20 hours</DescriptionList.Details>\n        <DescriptionList.Term>Weight</DescriptionList.Term>\n        <DescriptionList.Details>250 grams</DescriptionList.Details>\n        <DescriptionList.Term>Color</DescriptionList.Term>\n        <DescriptionList.Details>Black</DescriptionList.Details>\n        <DescriptionList.Term>Warranty</DescriptionList.Term>\n        <DescriptionList.Details>2 years</DescriptionList.Details>\n      </DescriptionList>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/description-list/description-list-card-demo": {
    "component": "@/components/docs/surfaces/description-list/description-list-card-demo",
    "raw": "\"use client\"\n\nimport { buttonStyles, Card, DescriptionList, Link } from \"ui\"\n\nexport default function DescriptionListCardDemo() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Product Details</Card.Title>\n        <Card.Description>\n          The product details card is a great way to display information about a product.\n        </Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <DescriptionList>\n          <DescriptionList.Term>Product Name</DescriptionList.Term>\n          <DescriptionList.Details>Wireless Headphones</DescriptionList.Details>\n          <DescriptionList.Term>Battery Life</DescriptionList.Term>\n          <DescriptionList.Details>20 hours</DescriptionList.Details>\n          <DescriptionList.Term>Weight</DescriptionList.Term>\n          <DescriptionList.Details>250 grams</DescriptionList.Details>\n          <DescriptionList.Term>Color</DescriptionList.Term>\n          <DescriptionList.Details>Black</DescriptionList.Details>\n          <DescriptionList.Term>Warranty</DescriptionList.Term>\n          <DescriptionList.Details>2 years</DescriptionList.Details>\n        </DescriptionList>\n      </Card.Content>\n      <Card.Footer>\n        <Link className={buttonStyles()} href=\"#\">\n          Edit\n        </Link>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/grid/grid-gap-demo": {
    "component": "@/components/docs/surfaces/grid/grid-gap-demo",
    "raw": "\"use client\"\n\nimport { Grid } from \"ui\"\n\nexport default function GridGapDemo() {\n  return (\n    <Grid\n      columns={{\n        initial: 4,\n        sm: 5,\n        md: 6\n      }}\n      gap={{\n        initial: 2,\n        sm: 4\n      }}\n    >\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n    </Grid>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/grid/grid-collections-demo": {
    "component": "@/components/docs/surfaces/grid/grid-collections-demo",
    "raw": "\"use client\"\n\nimport { Card, Grid } from \"ui\"\n\nexport default function GridCollectionsDemo() {\n  return (\n    <Grid aria-label=\"List articles\" columns={{ initial: 1, sm: 2, \"2xl\": 3 }} gap={2}>\n      <Grid.Collection items={articles}>\n        {(item) => (\n          <Grid.Item>\n            <Card>\n              <Card.Header>\n                <Card.Title>{item.title}</Card.Title>\n                <Card.Description>{item.description}</Card.Description>\n              </Card.Header>\n            </Card>\n          </Grid.Item>\n        )}\n      </Grid.Collection>\n    </Grid>\n  )\n}\n\nconst articles = [\n  {\n    id: 1,\n    title: \"Understanding React Hooks\",\n    description:\n      \"Get the lowdown on React Hooks, how to use 'em, and best practices for those sleek functional components.\"\n  },\n  {\n    id: 2,\n    title: \"Mastering TypeScript\",\n    description:\n      \"Dive deep into TypeScript, from basic stuff to pro features, for building rock-solid apps.\"\n  },\n  {\n    id: 3,\n    title: \"Laravel Eloquent Tips\",\n    description:\n      \"Check out advanced tricks for using Laravel Eloquent ORM to make your database game strong.\"\n  },\n  {\n    id: 4,\n    title: \"Building with Next.js\",\n    description:\n      \"A full-on tutorial on creating server-rendered React apps with the Next.js framework.\"\n  },\n  {\n    id: 5,\n    title: \"Inertia.js for Full-Stack Devs\",\n    description:\n      \"Learn how Inertia.js smooths out the gap between client-side frameworks and server-side apps.\"\n  },\n  {\n    id: 6,\n    title: \"Optimizing Web Performance\",\n    description: \"Tips and tricks to boost the performance and speed of your web apps.\"\n  }\n]\n",
    "type": "docs"
  },
  "surfaces/grid/grid-basic-demo": {
    "component": "@/components/docs/surfaces/grid/grid-basic-demo",
    "raw": "\"use client\"\n\nimport { Grid } from \"ui\"\n\nexport default function GridBasicDemo() {\n  return (\n    <Grid columns={6}>\n      <Grid.Item>\n        <div className=\"p-4 border-l border-y h-32\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border-l border-y h-32\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border-l border-y h-32\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border-l border-y h-32\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border-l border-y h-32\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border-l border-y h-32 border-r\" />\n      </Grid.Item>\n    </Grid>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/grid/grid-responsive-demo": {
    "component": "@/components/docs/surfaces/grid/grid-responsive-demo",
    "raw": "\"use client\"\n\nimport { Grid } from \"ui\"\n\nexport default function GridResponsiveDemo() {\n  return (\n    <Grid\n      columns={{\n        initial: 3,\n        sm: 4,\n        md: 5,\n        xl: 6\n      }}\n      gap={{\n        initial: 2,\n        sm: 3,\n        lg: 4\n      }}\n    >\n      <Grid.Item>\n        <div className=\"p-4 border h-32\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-32\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-32\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-32\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-32\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-32\" />\n      </Grid.Item>\n    </Grid>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/grid/grid-item-demo": {
    "component": "@/components/docs/surfaces/grid/grid-item-demo",
    "raw": "\"use client\"\n\nimport { Grid } from \"ui\"\n\nexport default function GridItemDemo() {\n  return (\n    <Grid debug columns={3} gap={4}>\n      <Grid.Item\n        colSpan={{\n          initial: 1,\n          sm: 2\n        }}\n        className=\"w-full h-24 grid place-content-center\"\n      >\n        1\n      </Grid.Item>\n      <Grid.Item className=\"w-full h-24 grid place-content-center\">2</Grid.Item>\n      <Grid.Item\n        colSpan={{\n          initial: 1,\n          sm: 3\n        }}\n        className=\"w-full h-24 grid place-content-center\"\n      >\n        3\n      </Grid.Item>\n    </Grid>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/grid/grid-debug-demo": {
    "component": "@/components/docs/surfaces/grid/grid-debug-demo",
    "raw": "\"use client\"\n\nimport { Grid } from \"ui\"\n\nexport default function GridDebugDemo() {\n  return (\n    <Grid debug columns={3} gap={4}>\n      <Grid.Item className=\"w-full h-24\" />\n      <Grid.Item className=\"w-full h-24\" />\n      <Grid.Item className=\"w-full h-24\" />\n      <Grid.Item className=\"w-full h-24\" />\n      <Grid.Item className=\"w-full h-24\" />\n      <Grid.Item className=\"w-full h-24\" />\n      <Grid.Item className=\"w-full h-24\" />\n      <Grid.Item className=\"w-full h-24\" />\n      <Grid.Item className=\"w-full h-24\" />\n    </Grid>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/grid/grid-gap-x-y-demo": {
    "component": "@/components/docs/surfaces/grid/grid-gap-x-y-demo",
    "raw": "\"use client\"\n\nimport { Grid } from \"ui\"\n\nexport default function GridGapXYDemo() {\n  return (\n    <Grid\n      columns={{\n        initial: 3,\n        sm: 4,\n        md: 6\n      }}\n      gapX={{\n        initial: 2,\n        sm: 4\n      }}\n      gapY={{\n        initial: 4,\n        sm: 6\n      }}\n    >\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n    </Grid>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/toast-description-demo": {
    "component": "@/components/docs/statuses/toast-description-demo",
    "raw": "\"use client\"\n\nimport { toast } from \"sonner\"\nimport { Button } from \"ui\"\n\nexport default function ToastDescriptionDemo() {\n  return (\n    <Button\n      onPress={() =>\n        toast(\"Cart Updated\", {\n          description: \"Your item’s in the cart. Tap here to check it out.\"\n        })\n      }\n    >\n      Add to Cart\n    </Button>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/meter-decimal-format-demo": {
    "component": "@/components/docs/statuses/meter-decimal-format-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Meter } from \"ui\"\n\nexport default function MeterDecimalFormatDemo() {\n  return (\n    <Meter\n      formatOptions={{\n        style: \"decimal\",\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      }}\n      label=\"Progress\"\n      value={75.25}\n    />\n  )\n}\n",
    "type": "docs"
  },
  "statuses/badge-demo": {
    "component": "@/components/docs/statuses/badge-demo",
    "raw": "\"use client\"\n\nimport { Badge } from \"ui\"\n\nexport default function BadgeDemo() {\n  return <Badge>Label</Badge>\n}\n",
    "type": "docs"
  },
  "statuses/progress-circle-controlled-demo": {
    "component": "@/components/docs/statuses/progress-circle-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ProgressCircle, Slider } from \"ui\"\n\nexport default function ProgressCircleControlledDemo() {\n  const [value, setValue] = React.useState(10)\n\n  return (\n    <div className=\"flex flex-col items-center gap-y-6 min-w-56\">\n      <ProgressCircle className=\"size-10\" value={value} />\n      <Slider label=\"Track\" value={value} onChange={(v) => setValue(v as number)} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/skeleton-shape-demo": {
    "component": "@/components/docs/statuses/skeleton-shape-demo",
    "raw": "\"use client\"\n\nimport { Card, Skeleton } from \"ui\"\n\nexport default function SkeletonShapeDemo() {\n  return (\n    <Card className=\"p-4\">\n      <div className=\"flex gap-2\">\n        <Skeleton intent=\"lighter\" shape=\"circle\" className=\"size-8\" />\n        <div className=\"space-y-1\">\n          <Skeleton intent=\"muted\" shape=\"circle\" className=\"h-4 w-56\" />\n          <Skeleton intent=\"muted\" shape=\"circle\" className=\"h-4 w-10\" />\n        </div>\n      </div>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/progress-bar-demo": {
    "component": "@/components/docs/statuses/progress-bar-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ProgressBar } from \"ui\"\n\nexport default function ProgressBarDemo() {\n  const [value, setValue] = React.useState(1)\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setValue((prev) => (prev < 100 ? prev + 1 : 100))\n    }, 200)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <ProgressBar label=\"Loading…\" value={value} />\n}\n",
    "type": "docs"
  },
  "statuses/loader-demo": {
    "component": "@/components/docs/statuses/loader-demo",
    "raw": "\"use client\"\n\nimport { Loader } from \"ui\"\n\nexport default function LoaderDemo() {\n  return <Loader />\n}\n",
    "type": "docs"
  },
  "statuses/skeleton-intent-demo": {
    "component": "@/components/docs/statuses/skeleton-intent-demo",
    "raw": "\"use client\"\n\nimport { Card, Skeleton } from \"ui\"\n\nexport default function SkeletonIntentDemo() {\n  return (\n    <Card className=\"p-4\">\n      <div className=\"flex gap-2\">\n        <Skeleton intent=\"lighter\" className=\"size-8\" />\n        <div className=\"space-y-1\">\n          <Skeleton intent=\"muted\" className=\"h-3.5 w-20\" />\n          <Skeleton intent=\"muted\" className=\"h-3.5 w-48\" />\n        </div>\n      </div>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/loader-variant-demo": {
    "component": "@/components/docs/statuses/loader-variant-demo",
    "raw": "\"use client\"\n\nimport { Loader } from \"ui\"\n\nexport default function LoaderVariantDemo() {\n  return (\n    <div className=\"flex gap-6\">\n      <Loader variant=\"ring\" />\n      <Loader variant=\"spin\" />\n      <Loader variant=\"bars\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/progress-circle-indeterminate-demo": {
    "component": "@/components/docs/statuses/progress-circle-indeterminate-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ProgressCircle } from \"ui\"\n\nexport default function ProgressCircleIndeterminateDemo() {\n  return <ProgressCircle aria-label=\"Loading…\" isIndeterminate />\n}\n",
    "type": "docs"
  },
  "statuses/indeterminate-progress-bar-demo": {
    "component": "@/components/docs/statuses/indeterminate-progress-bar-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ProgressBar } from \"ui\"\n\nexport default function ProgressBarDemo() {\n  return <ProgressBar label=\"Loading…\" isIndeterminate />\n}\n",
    "type": "docs"
  },
  "statuses/skeleton-demo": {
    "component": "@/components/docs/statuses/skeleton-demo",
    "raw": "\"use client\"\n\nimport { Card, Skeleton } from \"ui\"\n\nexport default function SkeletonDemo() {\n  return (\n    <Card className=\"p-4\">\n      <div className=\"flex gap-2\">\n        <Skeleton shape=\"circle\" className=\"size-6\" />\n        <div className=\"space-y-1\">\n          <Skeleton className=\"h-3 w-56\" />\n          <Skeleton className=\"h-3 w-10\" />\n        </div>\n      </div>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/loader-intent-demo": {
    "component": "@/components/docs/statuses/loader-intent-demo",
    "raw": "\"use client\"\n\nimport { Loader } from \"ui\"\n\nexport default function LoaderIntentDemo() {\n  return (\n    <div className=\"flex gap-6\">\n      <Loader variant=\"spin\" size=\"medium\" intent=\"current\" />\n      <Loader variant=\"spin\" size=\"medium\" intent=\"primary\" />\n      <Loader variant=\"spin\" size=\"medium\" intent=\"secondary\" />\n      <Loader variant=\"spin\" size=\"medium\" intent=\"success\" />\n      <Loader variant=\"spin\" size=\"medium\" intent=\"warning\" />\n      <Loader variant=\"spin\" size=\"medium\" intent=\"danger\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/toast-action-demo": {
    "component": "@/components/docs/statuses/toast-action-demo",
    "raw": "\"use client\"\n\nimport { toast } from \"sonner\"\nimport { Button } from \"ui\"\n\nexport default function ToastActionDemo() {\n  return (\n    <div className=\"flex gap-3\">\n      <Button\n        appearance=\"outline\"\n        size=\"small\"\n        onPress={() =>\n          toast(\"New comment on your post!\", {\n            action: {\n              label: \"View\",\n              onClick: () => alert(\"Viewed\")\n            }\n          })\n        }\n      >\n        Action\n      </Button>\n      <Button\n        appearance=\"outline\"\n        size=\"small\"\n        onPress={() =>\n          toast(\"New comment on your post!\", {\n            action: {\n              label: \"View\",\n              onClick: () => alert(\"Viewed\")\n            },\n            cancel: {\n              label: \"Cancel\",\n              onClick: () => alert(\"Cancelled\")\n            }\n          })\n        }\n      >\n        Do or Not\n      </Button>\n      <Button\n        appearance=\"outline\"\n        size=\"small\"\n        onPress={() =>\n          toast(\"New comment on your post!\", {\n            cancel: {\n              label: \"Cancel\",\n              onClick: () => alert(\"Cancelled\")\n            }\n          })\n        }\n      >\n        Cancel\n      </Button>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/badge-shape-demo": {
    "component": "@/components/docs/statuses/badge-shape-demo",
    "raw": "\"use client\"\n\nimport { Badge } from \"ui\"\n\nexport default function BadgeShapeDemo() {\n  return <Badge shape=\"circle\">Label</Badge>\n}\n",
    "type": "docs"
  },
  "statuses/note-demo": {
    "component": "@/components/docs/statuses/note-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Note } from \"ui\"\n\nexport default function NoteDemo() {\n  return (\n    <Note>\n      We hook you up with top-tier migration services in our startup plan. Wanna roll with it? Hit\n      us up here.\n    </Note>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/progress-circle-color-demo": {
    "component": "@/components/docs/statuses/progress-circle-color-demo",
    "raw": "\"use client\"\n\nimport { ProgressCircle } from \"ui\"\n\nexport default function ProgressCircleColorDemo() {\n  return (\n    <div className=\"flex gap-2\">\n      <ProgressCircle isIndeterminate className=\"text-red-500\" />\n      <ProgressCircle isIndeterminate className=\"text-blue-500\" />\n      <ProgressCircle isIndeterminate className=\"text-warning\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/toast-status-demo": {
    "component": "@/components/docs/statuses/toast-status-demo",
    "raw": "\"use client\"\n\nimport { toast } from \"sonner\"\nimport { Button } from \"ui\"\n\nexport default function ToastStatusDemo() {\n  return (\n    <div className=\"flex flex-wrap gap-3\">\n      <Button appearance=\"outline\" onPress={() => toast.error(\"The registration failed\")}>\n        Error\n      </Button>\n      <Button\n        appearance=\"outline\"\n        onPress={() => toast.success(\"The registration was successful.\")}\n      >\n        Success\n      </Button>\n      <Button\n        appearance=\"outline\"\n        onPress={() => toast.warning(\"There was an issue during registration\")}\n      >\n        Warning\n      </Button>\n      <Button appearance=\"outline\" onPress={() => toast.info(\"Email is already registered.\")}>\n        Info\n      </Button>\n      <Button\n        appearance=\"outline\"\n        onPress={() => {\n          toast.promise(wait(2000), {\n            loading: \"Deleting database...\",\n            success: \"Database deleted.\",\n            error: \"Failed to delete database.\"\n          })\n        }}\n      >\n        Promise / Loading\n      </Button>\n    </div>\n  )\n}\n\nfunction wait(number: number) {\n  return new Promise((resolve) => setTimeout(resolve, number))\n}\n",
    "type": "docs"
  },
  "statuses/note-intent-demo": {
    "component": "@/components/docs/statuses/note-intent-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { OptionPreview } from \"@/components/docs/outside/option-preview\"\nimport { Note, Select } from \"ui\"\n\nconst notes = [\"info\", \"primary\", \"secondary\", \"warning\", \"danger\", \"success\"].map((n) => ({\n  name: n\n}))\n\nexport default function NoteIntentDemo() {\n  const [selected, setSelected] = React.useState<any>(\"primary\")\n  return (\n    <>\n      <OptionPreview>\n        <Select\n          className=\"[&_button]:h-9\"\n          selectedKey={selected}\n          onSelectionChange={setSelected}\n          placeholder=\"Choose an intent\"\n        >\n          <Select.Trigger />\n          <Select.List items={notes}>\n            {(item) => (\n              <Select.Option id={item.name} textValue={item.name}>\n                {item.name}\n              </Select.Option>\n            )}\n          </Select.List>\n        </Select>\n      </OptionPreview>\n      <div className=\"max-w-md\">\n        <Note intent={selected as any}>\n          We hook you up with top-tier migration services in our startup plan. Wanna roll with it?\n          Hit us up here.\n        </Note>\n      </div>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/progress-circle-custom-size-demo": {
    "component": "@/components/docs/statuses/progress-circle-custom-size-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ProgressCircle } from \"ui\"\n\nexport default function ProgressCircleCustomSizeDemo() {\n  const [value, setValue] = React.useState(1)\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setValue((prev) => (prev < 100 ? prev + 1 : 100))\n    }, 100)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <ProgressCircle className=\"size-10\" aria-label=\"Loading…\" isIndeterminate value={value} />\n}\n",
    "type": "docs"
  },
  "statuses/meter-currency-format-demo": {
    "component": "@/components/docs/statuses/meter-currency-format-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Meter } from \"ui\"\n\nexport default function MeterCurrencyFormatDemo() {\n  return <Meter label=\"Revenue\" formatOptions={{ style: \"currency\", currency: \"USD\" }} value={15} />\n}\n",
    "type": "docs"
  },
  "statuses/toast-positions-demo": {
    "component": "@/components/docs/statuses/toast-positions-demo",
    "raw": "\"use client\"\n\nimport { toast, type ToastT } from \"sonner\"\nimport { Button } from \"ui\"\n\nconst positions: ToastT[\"position\"][] = [\n  \"top-left\",\n  \"top-right\",\n  \"bottom-left\",\n  \"bottom-right\",\n  \"top-center\",\n  \"bottom-center\"\n]\n\nexport default function ToastPositionsDemo() {\n  return (\n    <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-4\">\n      {positions.map((position) => (\n        <Button\n          appearance=\"outline\"\n          size=\"small\"\n          key={position}\n          onPress={() =>\n            toast(\"The registration is successful, click here to continue.\", { position })\n          }\n        >\n          {position}\n        </Button>\n      ))}\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/note-hide-indicator-demo": {
    "component": "@/components/docs/statuses/note-hide-indicator-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Note } from \"ui\"\n\nexport default function NoteHideIndicatorDemo() {\n  return (\n    <>\n      <Note hideIndicator>\n        You need to be careful with this note. This is a note without indicator.\n      </Note>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/badge-intent-demo": {
    "component": "@/components/docs/statuses/badge-intent-demo",
    "raw": "\"use client\"\n\nimport { Badge } from \"ui\"\n\nexport default function BadgeIntentDemo() {\n  return (\n    <div className=\"flex flex-wrap gap-2\">\n      {[\"primary\", \"secondary\", \"success\", \"info\", \"warning\", \"danger\"].map((intent, index) => (\n        <Badge key={index} intent={intent as any}>\n          {intent}\n        </Badge>\n      ))}\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/progress-circle-demo": {
    "component": "@/components/docs/statuses/progress-circle-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ProgressCircle } from \"ui\"\n\nexport default function ProgressCircleDemo() {\n  const [value, setValue] = React.useState(1)\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setValue((prev) => (prev < 100 ? prev + 1 : 100))\n    }, 50)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <ProgressCircle aria-label=\"Loading…\" value={value} />\n}\n",
    "type": "docs"
  },
  "statuses/toast-demo": {
    "component": "@/components/docs/statuses/toast-demo",
    "raw": "\"use client\"\n\nimport { toast } from \"sonner\"\nimport { Button } from \"ui\"\n\nexport default function ToastDemo() {\n  return (\n    <Button onPress={() => toast(\"The registration is successful, click here to continue.\")}>\n      Show Toast\n    </Button>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/meter-demo": {
    "component": "@/components/docs/statuses/meter-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Meter } from \"ui\"\n\nexport default function MeterDemo() {\n  const [value, setValue] = React.useState(1)\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setValue((prev) => (prev < 100 ? prev + 1 : 100))\n    }, 50)\n\n    return () => clearInterval(interval)\n  }, [])\n  return <Meter label=\"Storage space\" value={value} />\n}\n",
    "type": "docs"
  },
  "statuses/loader-size-demo": {
    "component": "@/components/docs/statuses/loader-size-demo",
    "raw": "\"use client\"\n\nimport { Loader } from \"ui\"\n\nexport default function LoaderSizeDemo() {\n  return (\n    <div className=\"flex gap-6\">\n      <Loader size=\"small\" />\n      <Loader size=\"medium\" />\n      <Loader size=\"large\" />\n      <Loader size=\"extra-large\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "collections/tree/tree-demo": {
    "component": "@/components/docs/collections/tree/tree-demo",
    "raw": "import * as React from \"react\"\n\nimport { Collection } from \"react-aria-components\"\nimport { Tree, TreeItem } from \"ui\"\n\nexport default function TreeDemo() {\n  const renderItem = (item: FileNode): React.ReactNode => {\n    return (\n      <TreeItem key={item.id} textValue={item.title}>\n        <TreeItem.Content>\n          {item.children.length > 0 && <TreeItem.Indicator />}\n          <TreeItem.Checkbox />\n          <TreeItem.Label>{item.title}</TreeItem.Label>\n        </TreeItem.Content>\n        {item.children.length > 0 && <Collection items={item.children}>{renderItem}</Collection>}\n      </TreeItem>\n    )\n  }\n  return (\n    <Tree className=\"w-full max-w-xl\" aria-label=\"Files\" selectionMode=\"multiple\" items={files}>\n      {files.map(renderItem)}\n    </Tree>\n  )\n}\n\ntype FileNode = {\n  id: number\n  title: string\n  children: FileNode[]\n}\n\nconst files: FileNode[] = [\n  {\n    id: 1,\n    title: \"Work\",\n    children: [\n      {\n        id: 2,\n        title: \"Reports\",\n        children: [\n          {\n            id: 3,\n            title: \"2023\",\n            children: [\n              {\n                id: 4,\n                title: \"Q1 Report\",\n                children: [\n                  { id: 5, title: \"Summary\", children: [] },\n                  { id: 6, title: \"Details\", children: [] }\n                ]\n              }\n            ]\n          }\n        ]\n      },\n      {\n        id: 7,\n        title: \"Presentations\",\n        children: [\n          {\n            id: 8,\n            title: \"2023 Projects\",\n            children: [\n              {\n                id: 9,\n                title: \"Project A\",\n                children: [\n                  { id: 10, title: \"Draft\", children: [] },\n                  { id: 11, title: \"Final\", children: [] }\n                ]\n              },\n              {\n                id: 12,\n                title: \"Project B\",\n                children: [{ id: 13, title: \"Research\", children: [] }]\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    id: 14,\n    title: \"Personal\",\n    children: [\n      {\n        id: 15,\n        title: \"Hobbies\",\n        children: [\n          {\n            id: 16,\n            title: \"Photography\",\n            children: [\n              { id: 17, title: \"Travel\", children: [] },\n              { id: 18, title: \"Portraits\", children: [] }\n            ]\n          },\n          {\n            id: 19,\n            title: \"Cooking\",\n            children: [{ id: 20, title: \"Recipes\", children: [] }]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    id: 21,\n    title: \"Projects\",\n    children: [\n      {\n        id: 22,\n        title: \"Web Development\",\n        children: [\n          {\n            id: 23,\n            title: \"Portfolio\",\n            children: [\n              { id: 24, title: \"Images\", children: [] },\n              { id: 25, title: \"CSS\", children: [] }\n            ]\n          },\n          { id: 26, title: \"Landing Page\", children: [] }\n        ]\n      },\n      {\n        id: 27,\n        title: \"Mobile Apps\",\n        children: [{ id: 28, title: \"Weather App\", children: [] }]\n      }\n    ]\n  },\n  {\n    id: 29,\n    title: \"Finance\",\n    children: [\n      {\n        id: 30,\n        title: \"Budget\",\n        children: [\n          {\n            id: 31,\n            title: \"2023\",\n            children: [\n              { id: 32, title: \"January\", children: [] },\n              { id: 33, title: \"February\", children: [] }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    id: 34,\n    title: \"Health\",\n    children: [\n      {\n        id: 35,\n        title: \"Fitness\",\n        children: [\n          { id: 36, title: \"Workouts\", children: [] },\n          { id: 37, title: \"Nutrition\", children: [] }\n        ]\n      },\n      { id: 38, title: \"Wellness\", children: [] }\n    ]\n  }\n]\n",
    "type": "docs"
  },
  "collections/choicebox/choicebox-single-selection-demo": {
    "component": "@/components/docs/collections/choicebox/choicebox-single-selection-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Choicebox } from \"ui\"\n\nexport default function ChoiceboxSingleSelectionDemo() {\n  return (\n    <Choicebox aria-label=\"Select packages\" selectionMode=\"single\" items={packages}>\n      {(item) => <Choicebox.Item {...item} />}\n    </Choicebox>\n  )\n}\n\nconst packages = [\n  {\n    id: \"sm\",\n    title: \"Small\",\n    description: \"Perfect for beginners. Basic resources for light projects.\"\n  },\n  {\n    id: \"md\",\n    title: \"Medium\",\n    description: \"Great for growing sites. More power and storage.\"\n  },\n  {\n    id: \"lg\",\n    title: \"Large\",\n    description: \"Ideal for busy sites. Lots of resources and support.\"\n  },\n  {\n    id: \"xl\",\n    title: \"Extra Large\",\n    description: \"Max power for demanding applications. Top-tier performance.\"\n  }\n]\n",
    "type": "docs"
  },
  "collections/choicebox/choicebox-controlled-demo": {
    "component": "@/components/docs/collections/choicebox/choicebox-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { Selection } from \"react-aria-components\"\nimport { Choicebox, Description } from \"ui\"\n\nexport default function ChoiceboxControlledDemo() {\n  const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([packages[0].id]))\n  return (\n    <>\n      <Choicebox\n        aria-label=\"Select packages\"\n        selectionMode=\"multiple\"\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n        items={packages}\n      >\n        {(item) => <Choicebox.Item {...item} />}\n      </Choicebox>\n\n      <Description className=\"mt-2 block [&>strong]:text-fg text-muted-fg\">\n        You have selected: <strong>{Array.from(selectedKeys).join(\", \")}</strong>\n      </Description>\n    </>\n  )\n}\n\nconst packages = [\n  {\n    id: \"sm\",\n    title: \"Small\",\n    description: \"Perfect for beginners. Basic resources for light projects.\"\n  },\n  {\n    id: \"md\",\n    title: \"Medium\",\n    description: \"Great for growing sites. More power and storage.\"\n  },\n  {\n    id: \"lg\",\n    title: \"Large\",\n    description: \"Ideal for busy sites. Lots of resources and support.\"\n  },\n  {\n    id: \"xl\",\n    title: \"Extra Large\",\n    description: \"Max power for demanding applications. Top-tier performance.\"\n  }\n]\n",
    "type": "docs"
  },
  "collections/choicebox/choicebox-disabled-demo": {
    "component": "@/components/docs/collections/choicebox/choicebox-disabled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Choicebox } from \"ui\"\n\nexport default function ChoiceboxDisabledDemo() {\n  return (\n    <div className=\"p-1\">\n      <Choicebox aria-label=\"Select packages\" selectionMode=\"multiple\" items={packages}>\n        {(item) => <Choicebox.Item isDisabled={[\"sm\", \"lg\"].includes(item.id)} {...item} />}\n      </Choicebox>\n    </div>\n  )\n}\n\nconst packages = [\n  {\n    id: \"sm\",\n    title: \"Small\",\n    description: \"Perfect for beginners. Basic resources for light projects.\"\n  },\n  {\n    id: \"md\",\n    title: \"Medium\",\n    description: \"Great for growing sites. More power and storage.\"\n  },\n  {\n    id: \"lg\",\n    title: \"Large\",\n    description: \"Ideal for busy sites. Lots of resources and support.\"\n  },\n  {\n    id: \"xl\",\n    title: \"Extra Large\",\n    description: \"Max power for demanding applications. Top-tier performance.\"\n  }\n]\n",
    "type": "docs"
  },
  "collections/choicebox/choicebox-columns-demo": {
    "component": "@/components/docs/collections/choicebox/choicebox-columns-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Choicebox } from \"ui\"\n\nexport default function ChoiceboxColumnsDemo() {\n  return (\n    <div className=\"p-1\">\n      <Choicebox\n        aria-label=\"Select prices\"\n        gap={2}\n        columns={3}\n        selectionMode=\"multiple\"\n        items={prices}\n      >\n        {(item) => <Choicebox.Item {...item} />}\n      </Choicebox>\n    </div>\n  )\n}\n\nconst prices = [\n  { id: 1, title: \"Basic\", description: \"Essentials, get started\" },\n  { id: 2, title: \"Standard\", description: \"More features, support\" },\n  { id: 3, title: \"Premium\", description: \"Advanced, growing needs\" },\n  { id: 4, title: \"Deluxe\", description: \"Top-tier, maximum performance\" },\n  { id: 5, title: \"Ultimate\", description: \"All-inclusive, every feature\" },\n  { id: 6, title: \"Enterprise\", description: \"Custom, large-scale operations\" }\n]\n",
    "type": "docs"
  },
  "collections/choicebox/choicebox-demo": {
    "component": "@/components/docs/collections/choicebox/choicebox-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Choicebox } from \"ui\"\n\nexport default function ChoiceboxDemo() {\n  return (\n    <Choicebox aria-label=\"Select items\" selectionMode=\"multiple\">\n      <Choicebox.Item title=\"Basic\" description=\"Just the essentials to get started.\" />\n      <Choicebox.Item title=\"Standard\" description=\"A step up with more features and support.\" />\n      <Choicebox.Item title=\"Premium\" description=\"Advanced options for growing needs.\" />\n      <Choicebox.Item title=\"Deluxe\" description=\"Top-tier features for maximum performance.\" />\n      <Choicebox.Item\n        title=\"Ultimate\"\n        description=\"All-inclusive plan with every feature available.\"\n      />\n      <Choicebox.Item\n        title=\"Enterprise\"\n        description=\"Custom solutions for large-scale operations.\"\n      />\n    </Choicebox>\n  )\n}\n",
    "type": "docs"
  },
  "collections/table/table-resize-demo": {
    "component": "@/components/docs/collections/table/table-resize-demo",
    "raw": "\"use client\"\n\nimport { Card, Table } from \"ui\"\n\nexport default function TableResizeDemo() {\n  return (\n    <Card>\n      <Table allowResize aria-label=\"Vocalists\">\n        <Table.Header>\n          <Table.Column className=\"max-w-0\">ID</Table.Column>\n          <Table.Column isRowHeader isResizable>\n            Name\n          </Table.Column>\n          <Table.Column isResizable>Email</Table.Column>\n          <Table.Column>Age</Table.Column>\n          <Table.Column>Role</Table.Column>\n          <Table.Column isResizable>Band</Table.Column>\n          <Table.Column>Status</Table.Column>\n        </Table.Header>\n        <Table.Body items={items}>\n          {(item) => (\n            <Table.Row id={item.id}>\n              <Table.Cell>{item.id}</Table.Cell>\n              <Table.Cell>{item.name}</Table.Cell>\n              <Table.Cell>{item.email}</Table.Cell>\n              <Table.Cell>{item.age}</Table.Cell>\n              <Table.Cell>{item.role}</Table.Cell>\n              <Table.Cell>{item.band}</Table.Cell>\n              <Table.Cell>{item.status}</Table.Cell>\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n    </Card>\n  )\n}\n\nconst items = [\n  {\n    id: 1,\n    name: \"Randy Blythe\",\n    email: \"randy.blythe@example.com\",\n    age: 52,\n    role: \"Vocalist\",\n    band: \"Lamb of God\",\n    status: \"Active\"\n  },\n  {\n    id: 2,\n    name: \"Phil Anselmo\",\n    email: \"phil.anselmo@example.com\",\n    age: 55,\n    role: \"Vocalist\",\n    band: \"Pantera\",\n    status: \"Active\"\n  },\n  {\n    id: 3,\n    name: \"George Fisher\",\n    email: \"george.fisher@example.com\",\n    age: 53,\n    role: \"Vocalist\",\n    band: \"Cannibal Corpse\",\n    status: \"Active\"\n  },\n  {\n    id: 4,\n    name: \"Corey Taylor\",\n    email: \"corey.taylor@example.com\",\n    age: 50,\n    role: \"Vocalist\",\n    band: \"Slipknot\",\n    status: \"Active\"\n  },\n  {\n    id: 5,\n    name: \"Trevor Strnad\",\n    email: \"trevor.strnad@example.com\",\n    age: 41,\n    role: \"Vocalist\",\n    band: \"The Black Dahlia Murder\",\n    status: \"Inactive\"\n  },\n  {\n    id: 6,\n    name: \"Chuck Schuldiner\",\n    email: \"chuck.schuldiner@example.com\",\n    age: 34,\n    role: \"Vocalist\",\n    band: \"Death\",\n    status: \"Deceased\"\n  },\n  {\n    id: 7,\n    name: \"Mitch Lucker\",\n    email: \"mitch.lucker@example.com\",\n    age: 28,\n    role: \"Vocalist\",\n    band: \"Suicide Silence\",\n    status: \"Deceased\"\n  }\n]\n",
    "type": "docs"
  },
  "collections/table/table-demo": {
    "component": "@/components/docs/collections/table/table-demo",
    "raw": "\"use client\"\n\nimport { NumberFormatter } from \"@internationalized/number\"\nimport { IconDotsVertical } from \"justd-icons\"\nimport { Card, Menu, Table } from \"ui\"\n\nexport default function TableDemo() {\n  const formatter = new NumberFormatter(\"en-US\", { style: \"currency\", currency: \"USD\" })\n\n  const priceFormat = (price: number) => formatter.format(price)\n  return (\n    <Card>\n      <Table aria-label=\"Products\">\n        <Table.Header>\n          <Table.Column className=\"w-0\">#</Table.Column>\n          <Table.Column isRowHeader>Name</Table.Column>\n          <Table.Column>Category</Table.Column>\n          <Table.Column>Price</Table.Column>\n          <Table.Column>Stock</Table.Column>\n          <Table.Column />\n        </Table.Header>\n        <Table.Body items={products}>\n          {(item) => (\n            <Table.Row id={item.id}>\n              <Table.Cell>{item.id}</Table.Cell>\n              <Table.Cell>{item.name}</Table.Cell>\n              <Table.Cell>{item.category}</Table.Cell>\n              <Table.Cell>{priceFormat(item.price)}</Table.Cell>\n              <Table.Cell>{item.stock}</Table.Cell>\n              <Table.Cell>\n                <div className=\"flex justify-end\">\n                  <Menu>\n                    <Menu.Trigger>\n                      <IconDotsVertical />\n                    </Menu.Trigger>\n                    <Menu.Content aria-label=\"Actions\" showArrow placement=\"left\">\n                      <Menu.Item>View</Menu.Item>\n                      <Menu.Item>Edit</Menu.Item>\n                      <Menu.Separator />\n                      <Menu.Item isDanger>Delete</Menu.Item>\n                    </Menu.Content>\n                  </Menu>\n                </div>\n              </Table.Cell>\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n    </Card>\n  )\n}\n\nexport const products = [\n  { id: \"1\", name: \"iPhone 13\", category: \"Electronics\", price: 799, brand: \"Apple\", stock: 150 },\n  {\n    id: \"2\",\n    name: \"Galaxy S21\",\n    category: \"Electronics\",\n    price: 699,\n    brand: \"Samsung\",\n    stock: 200\n  },\n  { id: \"3\", name: \"MacBook Pro\", category: \"Computers\", price: 1299, brand: \"Apple\", stock: 80 },\n  { id: \"4\", name: \"Dell XPS 13\", category: \"Computers\", price: 999, brand: \"Dell\", stock: 50 },\n  {\n    id: \"5\",\n    name: \"Sony WH-1000XM4\",\n    category: \"Headphones\",\n    price: 349,\n    brand: \"Sony\",\n    stock: 120\n  },\n  { id: \"6\", name: \"AirPods Pro\", category: \"Headphones\", price: 249, brand: \"Apple\", stock: 180 },\n  {\n    id: \"7\",\n    name: \"Fitbit Charge 5\",\n    category: \"Wearables\",\n    price: 179,\n    brand: \"Fitbit\",\n    stock: 75\n  }\n]\n",
    "type": "docs"
  },
  "collections/table/table-sorting-demo": {
    "component": "@/components/docs/collections/table/table-sorting-demo",
    "raw": "\"use client\"\n\nimport { useAsyncList } from \"@react-stately/data\"\nimport { IconLoader } from \"justd-icons\"\nimport { Card, Table } from \"ui\"\n\ninterface Character {\n  title: string\n  director: number\n  producer: number\n  release_date: number\n}\n\nexport default function TableSortingDemo() {\n  const list = useAsyncList<Character>({\n    async load({ signal }) {\n      const res = await fetch(`https://swapi.py4e.com/api/films`, {\n        signal\n      })\n      const json = await res.json()\n      return {\n        items: json.results\n      }\n    },\n    async sort({ items, sortDescriptor }) {\n      return {\n        items: items.sort((a, b) => {\n          // @ts-ignore\n          const first = a[sortDescriptor.column]\n          // @ts-ignore\n          const second = b[sortDescriptor.column]\n          let cmp = (parseInt(first) || first) < (parseInt(second) || second) ? -1 : 1\n          if (sortDescriptor.direction === \"descending\") {\n            cmp *= -1\n          }\n          return cmp\n        })\n      }\n    }\n  })\n  return (\n    <Card>\n      <Table\n        aria-label=\"Movies\"\n        selectionMode=\"multiple\"\n        sortDescriptor={list.sortDescriptor}\n        onSortChange={list.sort}\n      >\n        <Table.Header>\n          <Table.Column id=\"title\" isRowHeader>\n            Title\n          </Table.Column>\n          <Table.Column id=\"director\" allowsSorting>\n            Director\n          </Table.Column>\n          <Table.Column id=\"producer\">Producer</Table.Column>\n          <Table.Column id=\"release_date\" allowsSorting>\n            Release Date\n          </Table.Column>\n        </Table.Header>\n        <Table.Body\n          items={list.items}\n          renderEmptyState={() => (\n            <div className=\"grid place-content-center p-10\">\n              <IconLoader className=\"animate-spin\" />\n            </div>\n          )}\n        >\n          {(item) => (\n            <Table.Row id={item.title}>\n              <Table.Cell className=\"whitespace-nowrap\">{item.title}</Table.Cell>\n              <Table.Cell className=\"whitespace-nowrap\">{item.director}</Table.Cell>\n              <Table.Cell className=\"whitespace-nowrap\">{item.producer}</Table.Cell>\n              <Table.Cell>{item.release_date}</Table.Cell>\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "collections/table/table-bulk-demo": {
    "component": "@/components/docs/collections/table/table-bulk-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { Selection } from \"react-aria-components\"\nimport { Card, Description, Table } from \"ui\"\n\nexport default function TableBulkDemo() {\n  const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set())\n  return (\n    <>\n      <Card>\n        <Table\n          aria-label=\"Books\"\n          selectionMode=\"multiple\"\n          selectedKeys={selectedKeys}\n          onSelectionChange={setSelectedKeys}\n        >\n          <Table.Header>\n            <Table.Column>#</Table.Column>\n            <Table.Column isRowHeader>Title</Table.Column>\n            <Table.Column>Author</Table.Column>\n            <Table.Column>Genre</Table.Column>\n            <Table.Column>Published</Table.Column>\n          </Table.Header>\n          <Table.Body items={books}>\n            {(item) => (\n              <Table.Row>\n                <Table.Cell>{item.id}</Table.Cell>\n                <Table.Cell className=\"whitespace-nowrap\">{item.title}</Table.Cell>\n                <Table.Cell className=\"whitespace-nowrap\">{item.author}</Table.Cell>\n                <Table.Cell>{item.genre}</Table.Cell>\n                <Table.Cell>{item.publishedYear}</Table.Cell>\n              </Table.Row>\n            )}\n          </Table.Body>\n        </Table>\n      </Card>\n      <Description className=\"block mt-2 [&>strong]:text-fg text-muted-fg\">\n        {Array.from(selectedKeys).length > 0 ? (\n          <>\n            You have selected: <strong>{Array.from(selectedKeys).join(\", \")}</strong>\n          </>\n        ) : (\n          \"You have not selected anything.\"\n        )}\n      </Description>\n    </>\n  )\n}\n\nexport const books = [\n  {\n    id: \"1\",\n    title: \"To Kill a Mockingbird\",\n    author: \"Harper Lee\",\n    genre: \"Fiction\",\n    publishedYear: 1960\n  },\n  { id: \"2\", title: \"1984\", author: \"George Orwell\", genre: \"Dystopian\", publishedYear: 1949 },\n  {\n    id: \"3\",\n    title: \"The Great Gatsby\",\n    author: \"F. Scott Fitzgerald\",\n    genre: \"Fiction\",\n    publishedYear: 1925\n  },\n  {\n    id: \"4\",\n    title: \"The Catcher in the Rye\",\n    author: \"J.D. Salinger\",\n    genre: \"Fiction\",\n    publishedYear: 1951\n  },\n  {\n    id: \"5\",\n    title: \"Pride and Prejudice\",\n    author: \"Jane Austen\",\n    genre: \"Romance\",\n    publishedYear: 1813\n  },\n  {\n    id: \"6\",\n    title: \"The Lord of the Rings\",\n    author: \"J.R.R. Tolkien\",\n    genre: \"Fantasy\",\n    publishedYear: 1954\n  },\n  {\n    id: \"7\",\n    title: \"Harry Potter and the Sorcerer's Stone\",\n    author: \"J.K. Rowling\",\n    genre: \"Fantasy\",\n    publishedYear: 1997\n  }\n]\n",
    "type": "docs"
  },
  "collections/table/table-drag-demo": {
    "component": "@/components/docs/collections/table/table-drag-demo",
    "raw": "\"use client\"\n\nimport { IconStarFill } from \"justd-icons\"\nimport { useDragAndDrop } from \"react-aria-components\"\nimport { useListData } from \"react-stately\"\nimport { Card, Table } from \"ui\"\n\nexport default function TableDragDemo() {\n  const list = useListData({\n    initialItems: movies\n  })\n\n  const { dragAndDropHooks } = useDragAndDrop({\n    getItems: (keys) =>\n      [...keys].map((key) => ({\n        \"text/plain\": list.getItem(key)?.name ?? \"\"\n      })),\n    onReorder(e) {\n      if (e.target.dropPosition === \"before\") {\n        list.moveBefore(e.target.key, e.keys)\n      } else if (e.target.dropPosition === \"after\") {\n        list.moveAfter(e.target.key, e.keys)\n      }\n    }\n  })\n  return (\n    <Card>\n      <Table aria-label=\"Movies\" selectionMode=\"multiple\" dragAndDropHooks={dragAndDropHooks}>\n        <Table.Header>\n          <Table.Column>#</Table.Column>\n          <Table.Column isRowHeader>Name</Table.Column>\n          <Table.Column>Genre</Table.Column>\n          <Table.Column>Release</Table.Column>\n          <Table.Column>Rating</Table.Column>\n        </Table.Header>\n        <Table.Body items={list.items}>\n          {(item) => (\n            <Table.Row>\n              <Table.Cell>{item.id}</Table.Cell>\n              <Table.Cell>{item.name}</Table.Cell>\n              <Table.Cell>{item.genre}</Table.Cell>\n              <Table.Cell>{item.releaseYear}</Table.Cell>\n              <Table.Cell>\n                <div className=\"flex items-center gap-x-2\">\n                  <IconStarFill className=\"text-warning size-3.5\" /> <span>{item.rating}</span>\n                </div>\n              </Table.Cell>\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n    </Card>\n  )\n}\n\nconst movies = [\n  {\n    id: \"1\",\n    name: \"The Matrix\",\n    genre: \"Sci-Fi\",\n    releaseYear: 1999,\n    director: \"Wachowskis\",\n    rating: 8.7\n  },\n  {\n    id: \"2\",\n    name: \"Inception\",\n    genre: \"Sci-Fi\",\n    releaseYear: 2010,\n    director: \"Christopher Nolan\",\n    rating: 8.8\n  },\n  {\n    id: \"3\",\n    name: \"The Godfather\",\n    genre: \"Crime\",\n    releaseYear: 1972,\n    director: \"Francis Ford Coppola\",\n    rating: 9.2\n  },\n  {\n    id: \"4\",\n    name: \"Pulp Fiction\",\n    genre: \"Crime\",\n    releaseYear: 1994,\n    director: \"Quentin Tarantino\",\n    rating: 8.9\n  },\n  {\n    id: \"5\",\n    name: \"The Dark Knight\",\n    genre: \"Action\",\n    releaseYear: 2008,\n    director: \"Christopher Nolan\",\n    rating: 9.0\n  },\n  {\n    id: \"6\",\n    name: \"Fight Club\",\n    genre: \"Drama\",\n    releaseYear: 1999,\n    director: \"David Fincher\",\n    rating: 8.8\n  },\n  {\n    id: \"7\",\n    name: \"Forrest Gump\",\n    genre: \"Drama\",\n    releaseYear: 1994,\n    director: \"Robert Zemeckis\",\n    rating: 8.8\n  }\n]\n",
    "type": "docs"
  },
  "collections/menu/menu-collection-demo": {
    "component": "@/components/docs/collections/menu/menu-collection-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Button, Menu } from \"ui\"\n\nexport default function MenuCollectionDemo() {\n  return (\n    <Menu>\n      <Button appearance=\"outline\">Open</Button>\n      <Menu.Content className=\"min-w-64\" placement=\"bottom\" items={categories}>\n        {(item) => <Menu.Item id={item.slug}>{item.name}</Menu.Item>}\n      </Menu.Content>\n    </Menu>\n  )\n}\n\nconst categories = [\n  {\n    name: \"Technology\",\n    slug: \"technology\"\n  },\n  {\n    name: \"Health\",\n    slug: \"health\"\n  },\n  {\n    name: \"Business\",\n    slug: \"business\"\n  },\n  {\n    name: \"Travel\",\n    slug: \"travel\"\n  },\n  {\n    name: \"Education\",\n    slug: \"education\"\n  },\n  {\n    name: \"Entertainment\",\n    slug: \"entertainment\"\n  },\n  {\n    name: \"Sports\",\n    slug: \"sports\"\n  },\n  {\n    name: \"Fashion\",\n    slug: \"fashion\"\n  },\n  {\n    name: \"Food\",\n    slug: \"food\"\n  },\n  {\n    name: \"Science\",\n    slug: \"science\"\n  }\n]\n",
    "type": "docs"
  },
  "collections/menu/single-menu-demo": {
    "component": "@/components/docs/collections/menu/single-menu-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { Placement } from \"@react-types/overlays\"\nimport type { Selection } from \"react-aria-components\"\nimport { Button, Menu } from \"ui\"\n\nexport const placements = [\n  \"bottom\",\n  \"bottom left\",\n  \"bottom right\",\n  \"bottom start\",\n  \"bottom end\",\n  \"top\",\n  \"top left\",\n  \"top right\",\n  \"top start\",\n  \"top end\",\n  \"left\",\n  \"left top\",\n  \"left bottom\",\n  \"start\",\n  \"start top\",\n  \"start bottom\",\n  \"right\",\n  \"right top\",\n  \"right bottom\",\n  \"end\",\n  \"end top\",\n  \"end bottom\"\n].map((item, i) => ({ id: i, name: item }))\n\nexport default function SingleMenuDemo() {\n  const [selected, setSelected] = React.useState<Selection>(new Set([\"bottom\"]))\n  return (\n    <Menu>\n      <Button appearance=\"outline\">Placement</Button>\n      <Menu.Content\n        placement={Array.from(selected)[0] as Placement}\n        selectionMode=\"single\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n        items={placements}\n        className=\"max-h-72 min-w-52\"\n      >\n        {(item) => <Menu.Item id={item.name}>{item.name}</Menu.Item>}\n      </Menu.Content>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/menu/multiple-menu-demo": {
    "component": "@/components/docs/collections/menu/multiple-menu-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { type Selection } from \"@react-types/shared\"\nimport { Button, Menu } from \"ui\"\n\nexport default function MultipleMenuDemo() {\n  const [selected, setSelected] = React.useState<Selection>(new Set([\"autoPlay\"]))\n  return (\n    <Menu>\n      <Button appearance=\"outline\">Open</Button>\n      <Menu.Content\n        placement=\"bottom\"\n        selectionMode=\"multiple\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n        items={items}\n      >\n        {(item) => (\n          <Menu.Item id={item.slug} textValue={item.name}>\n            {item.name}\n          </Menu.Item>\n        )}\n      </Menu.Content>\n    </Menu>\n  )\n}\n\nconst items = [\n  {\n    name: \"Auto-Play Videos\",\n    slug: \"autoPlay\"\n  },\n  {\n    name: \"High-Quality Streaming\",\n    slug: \"highQuality\"\n  },\n  {\n    name: \"Exclusive Releases\",\n    slug: \"exclusiveContent\"\n  },\n  {\n    name: \"Default Subtitles\",\n    slug: \"subtitles\"\n  },\n  {\n    name: \"Personalized Recommendations\",\n    slug: \"recommendations\"\n  },\n  {\n    name: \"Background Play\",\n    slug: \"backgroundPlay\"\n  },\n  {\n    name: \"Allow Downloads\",\n    slug: \"download\"\n  }\n]\n",
    "type": "docs"
  },
  "collections/menu/menu-section-level-selection": {
    "component": "@/components/docs/collections/menu/menu-section-level-selection",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport {\n  IconAlignmentCenter,\n  IconAlignmentLeft,\n  IconAlignmentRight,\n  IconBold,\n  IconClipboard,\n  IconCut,\n  IconDuplicate,\n  IconItalic,\n  IconUnderline\n} from \"justd-icons\"\nimport type { Selection } from \"react-aria-components\"\nimport { Menu } from \"ui\"\n\nexport default function MenuSectionLevelSelection() {\n  const [style, setStyle] = React.useState<Selection>(new Set([\"bold\"]))\n  const [align, setAlign] = React.useState<Selection>(new Set([\"left\"]))\n  return (\n    <Menu>\n      <Menu.Trigger>Open</Menu.Trigger>\n      <Menu.Content placement=\"bottom\" className=\"sm:min-w-52\">\n        <Menu.Section title=\"Actions\">\n          <Menu.Item textValue=\"Cut\">\n            <IconCut />\n            Cut\n          </Menu.Item>\n          <Menu.Item textValue=\"Copy\">\n            <IconDuplicate />\n            Copy\n          </Menu.Item>\n          <Menu.Item textValue=\"Paste\">\n            <IconClipboard />\n            Paste\n          </Menu.Item>\n        </Menu.Section>\n        <Menu.Section\n          selectionMode=\"multiple\"\n          selectedKeys={style}\n          onSelectionChange={setStyle}\n          title=\"Text style\"\n        >\n          <Menu.Item id=\"bold\" textValue=\"Bold\">\n            <IconBold />\n            Bold\n          </Menu.Item>\n          <Menu.Item id=\"italic\" textValue=\"Italic\">\n            <IconItalic />\n            Italic\n          </Menu.Item>\n          <Menu.Item id=\"underline\" textValue=\"Underline\">\n            <IconUnderline />\n            Underline\n          </Menu.Item>\n        </Menu.Section>\n        <Menu.Section\n          selectionMode=\"single\"\n          selectedKeys={align}\n          onSelectionChange={setAlign}\n          title=\"Text alignment\"\n        >\n          <Menu.Item id=\"left\" textValue=\"Left\">\n            <IconAlignmentLeft />\n            Left\n          </Menu.Item>\n          <Menu.Item id=\"center\" textValue=\"Cente\">\n            <IconAlignmentCenter />\n            Center\n          </Menu.Item>\n          <Menu.Item id=\"right\" textValue=\"Right\">\n            <IconAlignmentRight />\n            Right\n          </Menu.Item>\n        </Menu.Section>\n      </Menu.Content>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/menu/menu-respect-screen-demo": {
    "component": "@/components/docs/collections/menu/menu-respect-screen-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Button, Menu } from \"ui\"\n\nexport default function MenuRespectScreenDemo() {\n  return (\n    <Menu respectScreen={false}>\n      <Button appearance=\"outline\">Open</Button>\n      <Menu.Content placement=\"bottom\" className=\"min-w-48\">\n        <Menu.Item>Dashboard</Menu.Item>\n        <Menu.Item>Reports</Menu.Item>\n        <Menu.Item>Settings</Menu.Item>\n        <Menu.Item>Security</Menu.Item>\n        <Menu.Item>Privacy</Menu.Item>\n        <Menu.Item>Help</Menu.Item>\n      </Menu.Content>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/menu/menu-danger-demo": {
    "component": "@/components/docs/collections/menu/menu-danger-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Menu } from \"ui\"\n\nexport default function MenuDangerDemo() {\n  return (\n    <Menu>\n      <Menu.Trigger>Open</Menu.Trigger>\n      <Menu.Content className=\"min-w-48\" placement=\"bottom\">\n        <Menu.Item>View</Menu.Item>\n        <Menu.Item>Edit</Menu.Item>\n        <Menu.Separator />\n        <Menu.Item isDanger>Delete</Menu.Item>\n      </Menu.Content>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/menu/menu-section-demo": {
    "component": "@/components/docs/collections/menu/menu-section-demo",
    "raw": "\"use client\"\n\nimport { Menu } from \"ui\"\n\nexport default function MenuSectionDemo() {\n  return (\n    <Menu>\n      <Menu.Trigger>Open</Menu.Trigger>\n      <Menu.Content className=\"sm:min-w-64\" items={cities} placement=\"bottom\">\n        {(city) => (\n          <Menu.Section title={city.name} items={city.landmarks}>\n            {(landmark) => <Menu.Item textValue={landmark.name}>{landmark.name}</Menu.Item>}\n          </Menu.Section>\n        )}\n      </Menu.Content>\n    </Menu>\n  )\n}\n\nconst cities = [\n  {\n    id: 1,\n    name: \"New York City\",\n    landmarks: [\n      {\n        id: 101,\n        name: \"Statue of Liberty\"\n      },\n      {\n        id: 102,\n        name: \"Central Park\"\n      },\n      {\n        id: 103,\n        name: \"Empire State Building\"\n      },\n      {\n        id: 104,\n        name: \"Times Square\"\n      }\n    ]\n  },\n  {\n    id: 2,\n    name: \"Paris\",\n    landmarks: [\n      {\n        id: 201,\n        name: \"Eiffel Tower\"\n      },\n      {\n        id: 202,\n        name: \"Louvre Museum\"\n      },\n      {\n        id: 203,\n        name: \"Notre-Dame Cathedral\"\n      },\n      {\n        id: 204,\n        name: \"Champs-Élysées\"\n      }\n    ]\n  },\n  {\n    id: 3,\n    name: \"Tokyo\",\n    landmarks: [\n      {\n        id: 301,\n        name: \"Tokyo Tower\"\n      },\n      {\n        id: 302,\n        name: \"Shibuya Crossing\"\n      },\n      {\n        id: 303,\n        name: \"Senso-ji Temple\"\n      },\n      {\n        id: 304,\n        name: \"Meiji Shrine\"\n      },\n      {\n        id: 305,\n        name: \"Tokyo Skytree\"\n      }\n    ]\n  },\n  {\n    id: 4,\n    name: \"London\",\n    landmarks: [\n      {\n        id: 401,\n        name: \"Big Ben\"\n      },\n      {\n        id: 402,\n        name: \"Tower of London\"\n      },\n      {\n        id: 403,\n        name: \"Buckingham Palace\"\n      },\n      {\n        id: 404,\n        name: \"London Eye\"\n      },\n      {\n        id: 405,\n        name: \"Westminster Abbey\"\n      }\n    ]\n  },\n  {\n    id: 5,\n    name: \"Rome\",\n    landmarks: [\n      {\n        id: 501,\n        name: \"Colosseum\"\n      },\n      {\n        id: 502,\n        name: \"Vatican City\"\n      },\n      {\n        id: 503,\n        name: \"Trevi Fountain\"\n      },\n      {\n        id: 504,\n        name: \"Pantheon\"\n      }\n    ]\n  },\n  {\n    id: 6,\n    name: \"Sydney\",\n    landmarks: [\n      {\n        id: 601,\n        name: \"Sydney Opera House\"\n      },\n      {\n        id: 602,\n        name: \"Sydney Harbour Bridge\"\n      },\n      {\n        id: 603,\n        name: \"Bondi Beach\"\n      },\n      {\n        id: 604,\n        name: \"Royal Botanic Garden\"\n      }\n    ]\n  },\n  {\n    id: 7,\n    name: \"Dubai\",\n    landmarks: [\n      {\n        id: 701,\n        name: \"Burj Khalifa\"\n      },\n      {\n        id: 702,\n        name: \"Palm Jumeirah\"\n      },\n      {\n        id: 703,\n        name: \"Dubai Mall\"\n      },\n      {\n        id: 704,\n        name: \"Burj Al Arab\"\n      }\n    ]\n  },\n  {\n    id: 8,\n    name: \"Moscow\",\n    landmarks: [\n      {\n        id: 801,\n        name: \"Red Square\"\n      },\n      {\n        id: 802,\n        name: \"Kremlin\"\n      },\n      {\n        id: 803,\n        name: \"St. Basil's Cathedral\"\n      },\n      {\n        id: 804,\n        name: \"Bolshoi Theatre\"\n      }\n    ]\n  },\n  {\n    id: 9,\n    name: \"Cairo\",\n    landmarks: [\n      {\n        id: 901,\n        name: \"Pyramids of Giza\"\n      },\n      {\n        id: 902,\n        name: \"Great Sphinx of Giza\"\n      },\n      {\n        id: 903,\n        name: \"Egyptian Museum\"\n      }\n    ]\n  },\n  {\n    id: 10,\n    name: \"Rio de Janeiro\",\n    landmarks: [\n      {\n        id: 1001,\n        name: \"Christ the Redeemer\"\n      },\n      {\n        id: 1002,\n        name: \"Sugarloaf Mountain\"\n      },\n      {\n        id: 1003,\n        name: \"Copacabana Beach\"\n      },\n      {\n        id: 1004,\n        name: \"Maracanã Stadium\"\n      }\n    ]\n  }\n]\n",
    "type": "docs"
  },
  "collections/menu/menu-with-arrow-demo": {
    "component": "@/components/docs/collections/menu/menu-with-arrow-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconHashtag, IconHeadphones, IconLogout, IconPlus, IconSettings } from \"justd-icons\"\nimport { Avatar, Menu } from \"ui\"\n\nexport default function MenuWithArrowDemo() {\n  return (\n    <>\n      <Menu>\n        <Menu.Trigger aria-label=\"Open Menu\">\n          <Avatar className=\"size-10\" src=\"https://github.com/irsyadadl.png\" />\n        </Menu.Trigger>\n        <Menu.Content placement=\"bottom\" showArrow className=\"min-w-64\">\n          <Menu.Section>\n            <Menu.Header separator>\n              <span className=\"block\">Irsyad A. Panjaitan</span>\n              <span className=\"font-normal text-muted-fg\">@irsyadadl</span>\n            </Menu.Header>\n          </Menu.Section>\n          <Menu.Item>\n            <IconSettings />\n            Settings\n          </Menu.Item>\n          <Menu.Item href=\"#\">\n            <IconPlus />\n            Create Team\n          </Menu.Item>\n          <Menu.Item href=\"#\">\n            <IconHashtag />\n            Command Menu\n            <Menu.Keyboard keys=\"⌘K\" />\n          </Menu.Item>\n          <Menu.Separator />\n          <Menu.Item href=\"#\">\n            <IconHeadphones />\n            Contact Support\n          </Menu.Item>\n          <Menu.Separator />\n          <Menu.Item>\n            <IconLogout />\n            Log out\n          </Menu.Item>\n        </Menu.Content>\n      </Menu>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "collections/menu/menu-with-icon-demo": {
    "component": "@/components/docs/collections/menu/menu-with-icon-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport {\n  IconCommandRegular,\n  IconDashboard,\n  IconDeviceDesktop,\n  IconHeadphones,\n  IconLogout,\n  IconMoon,\n  IconSettings,\n  IconSun\n} from \"justd-icons\"\nimport { useTheme } from \"next-themes\"\nimport { Avatar, Menu } from \"ui\"\n\nexport default function MenuWithIconDemo() {\n  const { resolvedTheme, setTheme } = useTheme()\n  return (\n    <Menu>\n      <Menu.Trigger aria-label=\"Open Menu\">\n        <Avatar alt=\"irsyadadl\" className=\"size-10\" src=\"https://github.com/irsyadadl.png\" />\n      </Menu.Trigger>\n      <Menu.Content placement=\"bottom\" showArrow className=\"sm:min-w-64\">\n        <Menu.Section>\n          <Menu.Header separator>\n            <span className=\"block\">Irsyad A. Panjaitan</span>\n            <span className=\"font-normal text-muted-fg\">@irsyadadl</span>\n          </Menu.Header>\n        </Menu.Section>\n\n        <Menu.Item href=\"#dashboard\">\n          <IconDashboard />\n          Dashboard\n        </Menu.Item>\n        <Menu.Item href=\"#settings\">\n          <IconSettings />\n          Settings\n        </Menu.Item>\n        <Menu.Separator />\n        <Menu.Item>\n          <IconCommandRegular />\n          Command Menu\n        </Menu.Item>\n        <Menu.Submenu>\n          <Menu.Item>\n            {resolvedTheme === \"light\" ? (\n              <IconSun />\n            ) : resolvedTheme === \"dark\" ? (\n              <IconMoon />\n            ) : (\n              <IconDeviceDesktop />\n            )}\n            Switch theme\n          </Menu.Item>\n          <Menu.Content>\n            <Menu.Item onAction={() => setTheme(\"system\")}>\n              <IconDeviceDesktop /> System\n            </Menu.Item>\n            <Menu.Item onAction={() => setTheme(\"dark\")}>\n              <IconMoon /> Dark\n            </Menu.Item>\n            <Menu.Item onAction={() => setTheme(\"light\")}>\n              <IconSun /> Light\n            </Menu.Item>\n          </Menu.Content>\n        </Menu.Submenu>\n        <Menu.Separator />\n        <Menu.Item href=\"#contact-s\">\n          <IconHeadphones />\n          Contact Support\n        </Menu.Item>\n        <Menu.Separator />\n        <Menu.Item href=\"#logout\">\n          <IconLogout />\n          Log out\n        </Menu.Item>\n      </Menu.Content>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/menu/menu-item-details-demo": {
    "component": "@/components/docs/collections/menu/menu-item-details-demo",
    "raw": "\"use client\"\n\nimport { Button, Menu } from \"ui\"\n\nexport default function MenuItemDetailsDemo() {\n  return (\n    <Menu>\n      <Button appearance=\"outline\">Open</Button>\n      <Menu.Content placement=\"bottom\" items={roles}>\n        {(item) => (\n          <Menu.Item id={item.id} textValue={item.name}>\n            <Menu.ItemDetails label={item.name} description={item.description} />\n          </Menu.Item>\n        )}\n      </Menu.Content>\n    </Menu>\n  )\n}\n\nconst roles = [\n  { id: 1, name: \"Admin\", description: \"Has full access to all resources\" },\n  { id: 2, name: \"Editor\", description: \"Can edit content but has limited access to settings\" },\n  { id: 3, name: \"Viewer\", description: \"Can view content but cannot make changes\" },\n  { id: 4, name: \"Contributor\", description: \"Can contribute content for review\" },\n  { id: 5, name: \"Guest\", description: \"Limited access, mostly for viewing purposes\" }\n]\n",
    "type": "docs"
  },
  "collections/menu/menu-sub-demo": {
    "component": "@/components/docs/collections/menu/menu-sub-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Button, Menu } from \"ui\"\n\nexport default function MenuSubDemo() {\n  return (\n    <Menu>\n      <Button appearance=\"outline\">Open</Button>\n      <Menu.Content placement=\"bottom\" className=\"sm:min-w-48\">\n        <Menu.Item>Dashboard</Menu.Item>\n        <Menu.Item>Reports</Menu.Item>\n        <Menu.Separator />\n        <Menu.Submenu>\n          <Menu.Item>Settings</Menu.Item>\n          <Menu.Content>\n            <Menu.Item>General</Menu.Item>\n            <Menu.Item>Security</Menu.Item>\n            <Menu.Item>Privacy</Menu.Item>\n            <Menu.Item>Data Sharing</Menu.Item>\n          </Menu.Content>\n        </Menu.Submenu>\n        <Menu.Item>Help</Menu.Item>\n      </Menu.Content>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/menu/menu-basic-demo": {
    "component": "@/components/docs/collections/menu/menu-basic-demo",
    "raw": "\"use client\"\n\nimport { Menu } from \"ui\"\n\nexport default function MenuBasicDemo() {\n  return (\n    <Menu>\n      <Menu.Trigger>Open</Menu.Trigger>\n      <Menu.Content placement=\"bottom\">\n        <Menu.Item>Inbox</Menu.Item>\n        <Menu.Item>Sent</Menu.Item>\n        <Menu.Item>New Message</Menu.Item>\n      </Menu.Content>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/menu/menu-disabled-demo": {
    "component": "@/components/docs/collections/menu/menu-disabled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Menu } from \"ui\"\n\nexport default function MenuDisabledDemo() {\n  return (\n    <Menu>\n      <Menu.Trigger>Open</Menu.Trigger>\n      <Menu.Content className=\"min-w-48\" placement=\"bottom\">\n        <Menu.Item id=\"view\">View</Menu.Item>\n        <Menu.Item id=\"edit\">Edit</Menu.Item>\n        <Menu.Item id=\"gsu\" isDisabled>\n          Generate Short URL\n        </Menu.Item>\n      </Menu.Content>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/grid-list/grid-list-drag-between-item-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-drag-between-item-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport GridListDragDemo from \"@/components/docs/collections/grid-list/grid-list-drag-demo\"\nimport { useDragAndDrop } from \"react-aria-components\"\nimport { useListData } from \"react-stately\"\nimport { GridList } from \"ui\"\n\nexport default function GridListDragBetweenItemDemo() {\n  const list = useListData({\n    initialItems: [\n      { id: 6, name: \"The Byrds\" },\n      { id: 7, name: \"The Yardbirds\" }\n    ]\n  })\n\n  const { dragAndDropHooks } = useDragAndDrop({\n    async onInsert(e) {\n      const items = await Promise.all(\n        e.items.map(async (item) => {\n          const name = item.kind === \"text\" ? await item.getText(\"text/plain\") : item.name\n          return { id: Math.random(), name }\n        })\n      )\n\n      if (e.target.dropPosition === \"before\") {\n        list.insertBefore(e.target.key, ...items)\n      } else if (e.target.dropPosition === \"after\") {\n        list.insertAfter(e.target.key, ...items)\n      }\n    }\n  })\n\n  return (\n    <div className=\"grid gap-4 lg:grid-cols-3\">\n      <GridListDragDemo />\n      <GridList aria-label=\"Droppable list\" items={list.items} dragAndDropHooks={dragAndDropHooks}>\n        {(item) => <GridList.Item>{item.name}</GridList.Item>}\n      </GridList>\n      <OtherEmptyList />\n    </div>\n  )\n}\n\nexport function OtherEmptyList() {\n  const list = useListData({\n    initialItems: [{ id: 7, name: \"The Who\" }]\n  })\n\n  const { dragAndDropHooks } = useDragAndDrop({\n    async onInsert(e) {\n      const items = await Promise.all(\n        e.items.map(async (item) => {\n          const name = item.kind === \"text\" ? await item.getText(\"text/plain\") : item.name\n          return { id: Math.random(), name }\n        })\n      )\n\n      if (e.target.dropPosition === \"before\") {\n        list.insertBefore(e.target.key, ...items)\n      } else if (e.target.dropPosition === \"after\") {\n        list.insertAfter(e.target.key, ...items)\n      }\n    }\n  })\n\n  return (\n    <GridList\n      aria-label=\"Droppable list\"\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}\n      renderEmptyState={() => <GridList.EmptyState>No bands selected</GridList.EmptyState>}\n    >\n      {(item) => <GridList.Item>{item.name}</GridList.Item>}\n    </GridList>\n  )\n}\n",
    "type": "docs"
  },
  "collections/grid-list/grid-list-multiple-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-multiple-demo",
    "raw": "\"use client\"\n\nimport { GridList } from \"ui\"\n\nexport default function GridListMultipleDemo() {\n  return (\n    <div>\n      <GridList\n        items={items}\n        aria-label=\"Select items\"\n        selectionMode=\"multiple\"\n        className=\"min-w-64\"\n      >\n        {(item) => <GridList.Item>{item.name}</GridList.Item>}\n      </GridList>\n    </div>\n  )\n}\n\nconst items = [\n  { id: \"1\", name: \"The Beatles\" },\n  { id: \"2\", name: \"Led Zeppelin\" },\n  { id: \"3\", name: \"Pink Floyd\" },\n  { id: \"4\", name: \"Queen\" },\n  { id: \"5\", name: \"The Rolling Stones\" }\n]\n",
    "type": "docs"
  },
  "collections/grid-list/grid-list-render-empty-state-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-render-empty-state-demo",
    "raw": "\"use client\"\n\nimport { GridList } from \"ui\"\n\nexport default function GridListRenderEmptyStateDemo() {\n  return (\n    <GridList\n      items={items}\n      aria-label=\"Select items\"\n      selectionMode=\"multiple\"\n      className=\"min-w-64\"\n      renderEmptyState={() => <GridList.EmptyState>No bands selected</GridList.EmptyState>}\n    />\n  )\n}\n\nconst items: Iterable<any> | undefined = []\n",
    "type": "docs"
  },
  "collections/grid-list/grid-list-controlled-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { Selection } from \"react-aria-components\"\nimport { Description, GridList } from \"ui\"\n\nexport default function GridListControlledDemo() {\n  const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([]))\n  return (\n    <div>\n      <GridList\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n        items={items}\n        aria-label=\"Select items\"\n        selectionMode=\"multiple\"\n        className=\"min-w-64\"\n      >\n        {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n      </GridList>\n      <Description className=\"mt-2 block [&>strong]:text-fg text-muted-fg\">\n        You have selected: <strong>{Array.from(selectedKeys).join(\", \")}</strong>\n      </Description>\n    </div>\n  )\n}\n\nconst items = [\n  { id: \"1\", name: \"The Beatles\" },\n  { id: \"2\", name: \"Led Zeppelin\" },\n  { id: \"3\", name: \"Pink Floyd\" },\n  { id: \"4\", name: \"Queen\" },\n  { id: \"5\", name: \"The Rolling Stones\" }\n]\n",
    "type": "docs"
  },
  "collections/grid-list/grid-list-disabled-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-disabled-demo",
    "raw": "\"use client\"\n\nimport { GridList } from \"ui\"\n\nexport default function GridListDisabledDemo() {\n  return (\n    <GridList\n      items={items}\n      aria-label=\"Select your favorite bands\"\n      selectionMode=\"multiple\"\n      className=\"min-w-64\"\n    >\n      {(item) => (\n        <GridList.Item isDisabled={[2, 5].includes(Number(item.id))} id={item.id}>\n          {item.name}\n        </GridList.Item>\n      )}\n    </GridList>\n  )\n}\n\nconst items = [\n  { id: \"1\", name: \"The Beatles\" },\n  { id: \"2\", name: \"Led Zeppelin\" },\n  { id: \"3\", name: \"Pink Floyd\" },\n  { id: \"4\", name: \"Queen\" },\n  { id: \"5\", name: \"The Rolling Stones\" }\n]\n",
    "type": "docs"
  },
  "collections/grid-list/grid-list-drag-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-drag-demo",
    "raw": "\"use client\"\n\nimport { useDragAndDrop } from \"react-aria-components\"\nimport { useListData } from \"react-stately\"\nimport { GridList } from \"ui\"\n\nexport default function GridListDragDemo() {\n  const list = useListData({\n    initialItems: items\n  })\n  const { dragAndDropHooks } = useDragAndDrop({\n    getItems: (keys) => [...keys].map((key) => ({ \"text/plain\": list.getItem(key)?.name ?? \"\" })),\n    onReorder(e) {\n      if (e.target.dropPosition === \"before\") {\n        list.moveBefore(e.target.key, e.keys)\n      } else if (e.target.dropPosition === \"after\") {\n        list.moveAfter(e.target.key, e.keys)\n      }\n    }\n  })\n\n  return (\n    <>\n      <GridList\n        items={list.items}\n        aria-label=\"Droppable list\"\n        selectionMode=\"multiple\"\n        dragAndDropHooks={dragAndDropHooks}\n      >\n        {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n      </GridList>\n    </>\n  )\n}\n\nconst items = [\n  { id: 1, name: \"The Beatles\" },\n  { id: 2, name: \"Led Zeppelin\" },\n  { id: 3, name: \"Pink Floyd\" },\n  { id: 4, name: \"Queen\" },\n  { id: 5, name: \"The Rolling Stones\" },\n  { id: 6, name: \"The Beach Boys\" },\n  { id: 7, name: \"The Kinks\" },\n  { id: 8, name: \"The Who\" }\n]\n",
    "type": "docs"
  },
  "collections/grid-list/grid-list-demo": {
    "component": "@/components/docs/collections/grid-list/grid-list-demo",
    "raw": "\"use client\"\n\nimport { GridList } from \"ui\"\n\nexport default function GridListDemo() {\n  return (\n    <GridList\n      selectionMode=\"single\"\n      items={items}\n      aria-label=\"Select your favorite bands\"\n      className=\"min-w-64\"\n    >\n      {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n    </GridList>\n  )\n}\n\nconst items = [\n  { id: \"1\", name: \"The Beatles\" },\n  { id: \"2\", name: \"Led Zeppelin\" },\n  { id: \"3\", name: \"Pink Floyd\" },\n  { id: \"4\", name: \"Queen\" },\n  { id: \"5\", name: \"The Rolling Stones\" },\n  { id: \"6\", name: \"The Who\" }\n]\n",
    "type": "docs"
  },
  "collections/list-box/list-box-demo": {
    "component": "@/components/docs/collections/list-box/list-box-demo",
    "raw": "\"use client\"\n\nimport { ListBox } from \"ui\"\n\nexport default function ListBoxDemo() {\n  return (\n    <ListBox items={rockPopBands} selectionMode=\"single\" aria-label=\"Bands\">\n      {(item) => <ListBox.Item id={item.id}>{item.name}</ListBox.Item>}\n    </ListBox>\n  )\n}\n\nconst rockPopBands = [\n  { id: \"1\", name: \"Nirvana\" },\n  { id: \"2\", name: \"Radiohead\" },\n  { id: \"3\", name: \"Foo Fighters\" },\n  { id: \"4\", name: \"Arctic Monkeys\" },\n  { id: \"5\", name: \"The Strokes\" }\n]\n",
    "type": "docs"
  },
  "collections/list-box/list-box-multiple-demo": {
    "component": "@/components/docs/collections/list-box/list-box-multiple-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { Selection } from \"react-aria-components\"\nimport { Description, ListBox } from \"ui\"\n\nexport default function ListBoxMultipleDemo() {\n  const [selected, setSelected] = React.useState<Selection>(new Set([3]))\n  return (\n    <>\n      <ListBox\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n        items={fruits}\n        aria-label=\"Fruits\"\n        selectionMode=\"multiple\"\n      >\n        {(fruit) => (\n          <ListBox.Item id={fruit.id} textValue={fruit.name}>\n            {fruit.name}\n          </ListBox.Item>\n        )}\n      </ListBox>\n\n      {[...selected].length > 0 && (\n        <Description className=\"mt-4 block\">\n          Selected: {selected === \"all\" ? \"All selected\" : [...selected].join(\", \")}\n        </Description>\n      )}\n    </>\n  )\n}\n\nconst fruits = [\n  {\n    id: 1,\n    name: \"Apple\"\n  },\n  {\n    id: 2,\n    name: \"Banana\"\n  },\n  {\n    id: 3,\n    name: \"Orange\"\n  },\n  {\n    id: 4,\n    name: \"Strawberry\"\n  },\n  {\n    id: 5,\n    name: \"Grapes\"\n  },\n  {\n    id: 6,\n    name: \"Mango\"\n  },\n  {\n    id: 7,\n    name: \"Pineapple\"\n  }\n]\n",
    "type": "docs"
  },
  "collections/list-box/list-box-item-details-demo": {
    "component": "@/components/docs/collections/list-box/list-box-item-details-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { Selection } from \"react-aria-components\"\nimport { ListBox } from \"ui\"\n\nexport default function ListBoxItemDetailsDemo() {\n  const [selected, setSelected] = React.useState<Selection>(new Set([1]))\n  return (\n    <ListBox\n      selectedKeys={selected}\n      onSelectionChange={setSelected}\n      items={roles}\n      aria-label=\"Bands\"\n    >\n      {(item) => (\n        <ListBox.Item id={item.id}>\n          <ListBox.ItemDetails label={item.name} description={item.description} />\n        </ListBox.Item>\n      )}\n    </ListBox>\n  )\n}\n\nconst roles = [\n  { id: 1, name: \"Admin\", description: \"Has full access to all resources\" },\n  { id: 2, name: \"Editor\", description: \"Can edit content but has limited access to settings\" },\n  { id: 3, name: \"Viewer\", description: \"Can view content but cannot make changes\" },\n  { id: 4, name: \"Contributor\", description: \"Can contribute content for review\" },\n  { id: 5, name: \"Guest\", description: \"Limited access, mostly for viewing purposes\" }\n]\n",
    "type": "docs"
  },
  "collections/list-box/list-box-section-demo": {
    "component": "@/components/docs/collections/list-box/list-box-section-demo",
    "raw": "\"use client\"\n\nimport { ListBox } from \"ui\"\n\nexport default function ListBoxSectionDemo() {\n  return (\n    <ListBox items={bands} aria-label=\"Bands\" selectionMode=\"multiple\">\n      {(item) => (\n        <ListBox.Section items={item.albums} title={item.name} id={item.id}>\n          {/*@ts-expect-error: ts ^5.5.4*/}\n          {(album) => <ListBox.Item id={album.id}>{album.name}</ListBox.Item>}\n        </ListBox.Section>\n      )}\n    </ListBox>\n  )\n}\n\nconst bands = [\n  {\n    id: 1,\n    name: \"The Beatles\",\n    albums: [\n      {\n        id: 101,\n        name: \"Abbey Road\"\n      },\n      {\n        id: 102,\n        name: \"Sgt. Pepper's Lonely Hearts Club Band\"\n      },\n      {\n        id: 103,\n        name: \"Revolver\"\n      }\n    ]\n  },\n  {\n    id: 2,\n    name: \"Led Zeppelin\",\n    albums: [\n      {\n        id: 201,\n        name: \"Led Zeppelin IV\"\n      },\n      {\n        id: 202,\n        name: \"Physical Graffiti\"\n      },\n      {\n        id: 203,\n        name: \"Houses of the Holy\"\n      },\n      {\n        id: 204,\n        name: \"Led Zeppelin II\"\n      }\n    ]\n  },\n  {\n    id: 3,\n    name: \"Pink Floyd\",\n    albums: [\n      {\n        id: 301,\n        name: \"The Dark Side of the Moon\"\n      },\n      {\n        id: 302,\n        name: \"The Wall\"\n      },\n      {\n        id: 303,\n        name: \"Wish You Were Here\"\n      },\n      {\n        id: 304,\n        name: \"Animals\"\n      },\n      {\n        id: 305,\n        name: \"Meddle\"\n      }\n    ]\n  },\n  {\n    id: 4,\n    name: \"Queen\",\n    albums: [\n      {\n        id: 401,\n        name: \"A Night at the Opera\"\n      },\n      {\n        id: 402,\n        name: \"News of the World\"\n      },\n      {\n        id: 403,\n        name: \"Sheer Heart Attack\"\n      },\n      {\n        id: 404,\n        name: \"The Game\"\n      },\n      {\n        id: 405,\n        name: \"Jazz\"\n      },\n      {\n        id: 406,\n        name: \"Queen II\"\n      }\n    ]\n  },\n  {\n    id: 5,\n    name: \"The Rolling Stones\",\n    albums: [\n      {\n        id: 501,\n        name: \"Let It Bleed\"\n      },\n      {\n        id: 502,\n        name: \"Sticky Fingers\"\n      },\n      {\n        id: 503,\n        name: \"Exile on Main St.\"\n      },\n      {\n        id: 504,\n        name: \"Beggars Banquet\"\n      },\n      {\n        id: 505,\n        name: \"Some Girls\"\n      },\n      {\n        id: 506,\n        name: \"Tattoo You\"\n      }\n    ]\n  },\n  {\n    id: 6,\n    name: \"Nirvana\",\n    albums: [\n      {\n        id: 601,\n        name: \"Nevermind\"\n      },\n      {\n        id: 602,\n        name: \"In Utero\"\n      },\n      {\n        id: 603,\n        name: \"Bleach\"\n      }\n    ]\n  },\n  {\n    id: 7,\n    name: \"The Doors\",\n    albums: [\n      {\n        id: 701,\n        name: \"The Doors\"\n      },\n      {\n        id: 702,\n        name: \"L.A. Woman\"\n      },\n      {\n        id: 703,\n        name: \"Strange Days\"\n      },\n      {\n        id: 704,\n        name: \"Morrison Hotel\"\n      }\n    ]\n  },\n  {\n    id: 8,\n    name: \"Radiohead\",\n    albums: [\n      {\n        id: 801,\n        name: \"OK Computer\"\n      },\n      {\n        id: 802,\n        name: \"Kid A\"\n      },\n      {\n        id: 803,\n        name: \"The Bends\"\n      },\n      {\n        id: 804,\n        name: \"In Rainbows\"\n      }\n    ]\n  },\n  {\n    id: 9,\n    name: \"AC/DC\",\n    albums: [\n      {\n        id: 901,\n        name: \"Back in Black\"\n      },\n      {\n        id: 902,\n        name: \"Highway to Hell\"\n      },\n      {\n        id: 903,\n        name: \"Let There Be Rock\"\n      }\n    ]\n  },\n  {\n    id: 10,\n    name: \"The Who\",\n    albums: [\n      {\n        id: 1001,\n        name: \"Who's Next\"\n      },\n      {\n        id: 1002,\n        name: \"Tommy\"\n      },\n      {\n        id: 1003,\n        name: \"Quadrophenia\"\n      },\n      {\n        id: 1004,\n        name: \"My Generation\"\n      },\n      {\n        id: 1005,\n        name: \"The Who Sell Out\"\n      }\n    ]\n  }\n]\n",
    "type": "docs"
  },
  "collections/list-box/list-box-rearrange-demo": {
    "component": "@/components/docs/collections/list-box/list-box-rearrange-demo",
    "raw": "\"use client\"\n\nimport { useDragAndDrop } from \"react-aria-components\"\nimport { useListData } from \"react-stately\"\nimport { ListBox } from \"ui\"\n\nexport default function ListBoxRearrangeDemo() {\n  const list = useListData({\n    initialItems: [\n      { id: \"1\", name: \"Nirvana\" },\n      { id: \"2\", name: \"Radiohead\" },\n      { id: \"3\", name: \"Foo Fighters\" },\n      { id: \"4\", name: \"Arctic Monkeys\" },\n      { id: \"5\", name: \"The Strokes\" }\n    ]\n  })\n\n  const { dragAndDropHooks } = useDragAndDrop({\n    getItems: (keys) => [...keys].map((key) => ({ \"text/plain\": list.getItem(key)?.name ?? \"\" })),\n    onReorder(e) {\n      if (e.target.dropPosition === \"before\") {\n        list.moveBefore(e.target.key, e.keys)\n      } else if (e.target.dropPosition === \"after\") {\n        list.moveAfter(e.target.key, e.keys)\n      }\n    }\n  })\n\n  return (\n    <ListBox\n      items={list.items}\n      aria-label=\"Bands\"\n      selectionMode=\"multiple\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      {(item) => <ListBox.Item key={item.id}>{item.name}</ListBox.Item>}\n    </ListBox>\n  )\n}\n",
    "type": "docs"
  },
  "collections/list-box/list-box-controlled-demo": {
    "component": "@/components/docs/collections/list-box/list-box-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { Selection } from \"react-aria-components\"\nimport { Description, ListBox } from \"ui\"\n\nexport default function ListBoxControlledDemo() {\n  const [selected, setSelected] = React.useState<Selection>(new Set([1]))\n  return (\n    <>\n      <ListBox\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n        items={fruits}\n        aria-label=\"Fruits\"\n        selectionMode=\"single\"\n      >\n        {(fruit) => (\n          <ListBox.Item id={fruit.id} textValue={fruit.name}>\n            {fruit.name}\n          </ListBox.Item>\n        )}\n      </ListBox>\n\n      {selected && (\n        <Description className=\"mt-4 block [&>strong]:font-medium [&>strong]:text-fg\">\n          Selected: <strong>{selected}</strong>\n        </Description>\n      )}\n    </>\n  )\n}\n\nconst fruits = [\n  {\n    id: 1,\n    name: \"Apple\"\n  },\n  {\n    id: 2,\n    name: \"Banana\"\n  },\n  {\n    id: 3,\n    name: \"Orange\"\n  },\n  {\n    id: 4,\n    name: \"Strawberry\"\n  },\n  {\n    id: 5,\n    name: \"Grapes\"\n  },\n  {\n    id: 6,\n    name: \"Mango\"\n  },\n  {\n    id: 7,\n    name: \"Pineapple\"\n  }\n]\n",
    "type": "docs"
  },
  "collections/list-box/list-box-disabled-demo": {
    "component": "@/components/docs/collections/list-box/list-box-disabled-demo",
    "raw": "\"use client\"\n\nimport { ListBox } from \"ui\"\n\nexport default function ListBoxDisabledDemo() {\n  return (\n    <>\n      <ListBox\n        disabledKeys={[2, 3, 4, 5]}\n        items={fruits}\n        aria-label=\"Fruits\"\n        selectionMode=\"multiple\"\n      >\n        {(fruit) => <ListBox.Item id={fruit.id}>{fruit.name}</ListBox.Item>}\n      </ListBox>\n    </>\n  )\n}\n\nconst fruits = [\n  {\n    id: 1,\n    name: \"Apple\"\n  },\n  {\n    id: 2,\n    name: \"Banana\"\n  },\n  {\n    id: 3,\n    name: \"Orange\"\n  },\n  {\n    id: 4,\n    name: \"Strawberry\"\n  },\n  {\n    id: 5,\n    name: \"Grapes\"\n  },\n  {\n    id: 6,\n    name: \"Mango\"\n  },\n  {\n    id: 7,\n    name: \"Pineapple\"\n  }\n]\n",
    "type": "docs"
  },
  "collections/tag-group/tag-group-disabled-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-disabled-demo",
    "raw": "\"use client\"\n\nimport { androidBrands } from \"@/components/docs/collections/tag-group/tag-group-demo\"\nimport { Tag } from \"ui\"\n\nexport default function TagGroupDisabledDemo() {\n  return (\n    <div className=\"space-y-6\">\n      <Tag.Group\n        disabledKeys={androidBrands.filter((brand) => !brand.available).map((brand) => brand.id)}\n        label=\"Disabled Key\"\n        selectionMode=\"multiple\"\n      >\n        <Tag.List items={androidBrands}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n      </Tag.Group>\n\n      <Tag.Group label=\"Disabled by Tag\" selectionMode=\"multiple\">\n        <Tag.List items={androidBrands}>\n          {(item) => <Tag.Item isDisabled={item.available}>{item.name}</Tag.Item>}\n        </Tag.List>\n      </Tag.Group>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "collections/tag-group/tag-group-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-demo",
    "raw": "\"use client\"\n\nimport { Tag } from \"ui\"\n\nexport const androidBrands = [\n  { id: \"1\", name: \"Samsung\", available: false },\n  { id: \"2\", name: \"OnePlus\", available: true },\n  { id: \"3\", name: \"Google\", available: true },\n  { id: \"4\", name: \"Xiaomi\", available: false }\n]\n\nexport default function TagGroupDemo() {\n  return (\n    <Tag.Group label=\"Android Brands\" selectionMode=\"multiple\">\n      <Tag.List items={androidBrands}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n    </Tag.Group>\n  )\n}\n",
    "type": "docs"
  },
  "collections/tag-group/tag-group-shape-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-shape-demo",
    "raw": "\"use client\"\n\nimport { Tag } from \"ui\"\n\nconst carModels = [\n  { id: \"1\", name: \"Tesla Model S\", available: true },\n  { id: \"2\", name: \"Ford Mustang\", available: false },\n  { id: \"3\", name: \"Chevrolet Camaro\", available: true },\n  { id: \"4\", name: \"BMW M3\", available: false },\n  { id: \"5\", name: \"Audi R8\", available: true }\n]\n\nexport default function TagGroupIntentDemo() {\n  return (\n    <div className=\"space-y-6 max-w-sm\">\n      <Tag.Group shape=\"square\" intent=\"danger\" label=\"Car Models\" selectionMode=\"multiple\">\n        <Tag.List items={carModels}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n      </Tag.Group>\n      <Tag.Group shape=\"circle\" intent=\"warning\" label=\"Car Models\" selectionMode=\"multiple\">\n        <Tag.List items={carModels}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n      </Tag.Group>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "collections/tag-group/tag-group-controlled-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-controlled-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { Selection } from \"react-aria-components\"\nimport { Description, Tag } from \"ui\"\n\nconst fruitList = [\n  { id: \"1\", name: \"Apple\", available: false },\n  { id: \"2\", name: \"Banana\", available: true },\n  { id: \"3\", name: \"Cherry\", available: true },\n  { id: \"4\", name: \"Date\", available: false }\n]\n\nexport default function TagGroupControlledDemo() {\n  const [selected, setSelected] = React.useState<Selection>(new Set([]))\n  return (\n    <div>\n      <Tag.Group selectionMode=\"multiple\" selectedKeys={selected} onSelectionChange={setSelected}>\n        <Tag.List items={fruitList}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n      </Tag.Group>\n\n      <Description className=\"mt-2 block [&>strong]:text-fg text-muted-fg\">\n        You have selected: <strong>{Array.from(selected).join(\", \")}</strong>\n      </Description>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "collections/tag-group/tag-group-with-remove-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-with-remove-demo",
    "raw": "\"use client\"\n\nimport { useListData } from \"react-stately\"\nimport { Tag } from \"ui\"\n\nexport default function TagGroupWithRemoveDemo() {\n  const list = useListData({\n    initialItems: [\n      { id: \"1\", name: \"Ferrari\", available: true },\n      { id: \"2\", name: \"Lamborghini\", available: false },\n      { id: \"3\", name: \"Porsche\", available: true },\n      { id: \"4\", name: \"Bugatti\", available: false },\n      { id: \"5\", name: \"McLaren\", available: true },\n      { id: \"6\", name: \"Aston Martin\", available: true },\n      { id: \"7\", name: \"Bentley\", available: false },\n      { id: \"8\", name: \"Rolls-Royce\", available: true },\n      { id: \"9\", name: \"Maserati\", available: false },\n      { id: \"10\", name: \"Jaguar\", available: true }\n    ]\n  })\n\n  return (\n    <Tag.Group\n      selectionMode=\"multiple\"\n      className=\"max-w-sm\"\n      onRemove={(keys) => list.remove(...keys)}\n    >\n      <Tag.List items={list.items}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n    </Tag.Group>\n  )\n}\n",
    "type": "docs"
  },
  "collections/tag-group/tag-group-href-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-href-demo",
    "raw": "\"use client\"\n\nimport { Tag } from \"ui\"\n\nconst articles = [\n  { name: \"React Tutorial\", url: \"#\" },\n  { name: \"TypeScript Handbook\", url: \"#\" },\n  { name: \"JavaScript Guide\", url: \"#\" }\n]\n\nexport default function TagGroupControlledDemo() {\n  return (\n    <Tag.Group>\n      <Tag.List items={articles}>\n        {(item) => (\n          <Tag.Item id={item.name} href={item.url}>\n            {item.name}\n          </Tag.Item>\n        )}\n      </Tag.List>\n    </Tag.Group>\n  )\n}\n",
    "type": "docs"
  },
  "collections/tag-group/tag-group-intent-demo": {
    "component": "@/components/docs/collections/tag-group/tag-group-intent-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { useListData } from \"react-stately\"\nimport { Tag } from \"ui\"\n\nconst shoes = [\n  { id: \"1\", name: \"Nike\", available: true },\n  { id: \"2\", name: \"Adidas\", available: false },\n  { id: \"3\", name: \"Puma\", available: true },\n  { id: \"4\", name: \"Reebok\", available: true }\n]\n\nexport default function TagGroupIntentDemo() {\n  const shoesList = useListData({\n    initialItems: shoes\n  })\n  return (\n    <div className=\"space-y-2 max-w-sm\">\n      <Tag.Group\n        intent=\"primary\"\n        aria-label=\"Primary Intent\"\n        selectionMode=\"multiple\"\n        onRemove={(keys) => shoesList.remove(...keys)}\n      >\n        <Tag.List items={shoesList.items}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n      </Tag.Group>\n      <Tag.Group\n        intent=\"secondary\"\n        aria-label=\"Secondary Intent\"\n        selectionMode=\"multiple\"\n        onRemove={(keys) => shoesList.remove(...keys)}\n      >\n        <Tag.List items={shoesList.items}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n      </Tag.Group>\n      <Tag.Group\n        intent=\"success\"\n        aria-label=\"Success Intent\"\n        selectionMode=\"multiple\"\n        onRemove={(keys) => shoesList.remove(...keys)}\n      >\n        <Tag.List items={shoesList.items}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n      </Tag.Group>\n      <Tag.Group\n        intent=\"warning\"\n        aria-label=\"Warning Intent\"\n        selectionMode=\"multiple\"\n        onRemove={(keys) => shoesList.remove(...keys)}\n      >\n        <Tag.List items={shoesList.items}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n      </Tag.Group>\n      <Tag.Group\n        intent=\"danger\"\n        aria-label=\"Danger Intent\"\n        selectionMode=\"multiple\"\n        onRemove={(keys) => shoesList.remove(...keys)}\n      >\n        <Tag.List items={shoesList.items}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n      </Tag.Group>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "media/avatar-size-demo": {
    "component": "@/components/docs/media/avatar-size-demo",
    "raw": "\"use client\"\n\nimport { Avatar } from \"ui\"\n\nexport default function AvatarSizeDemo() {\n  return (\n    <div className=\"flex gap-4\">\n      <Avatar alt=\"irsyadadl small\" size=\"small\" src=\"https://github.com/irsyadadl.png\" />\n      <Avatar alt=\"irsyadadl medium\" size=\"medium\" src=\"https://github.com/irsyadadl.png\" />\n      <Avatar alt=\"irsyadadl large\" size=\"large\" src=\"https://github.com/irsyadadl.png\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "media/carousel-demo": {
    "component": "@/components/docs/media/carousel-demo",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport Image from \"next/image\"\nimport { Carousel } from \"ui\"\n\nexport default function CarouselDemo() {\n  return (\n    <Carousel className=\"w-full [&_.xrkr]:h-56 [&_.xrkr]:overflow-hidden [&_.xrkr]:flex [&_.xrkr]:flex-col max-w-xs\">\n      <Carousel.Content>\n        <Carousel.Item className=\"basis-1/2\">\n          <Image\n            className=\"rounded-xl\"\n            src=\"/slides/slide-1.jpg\"\n            alt=\"image 1\"\n            width={400}\n            height={300}\n          />\n        </Carousel.Item>\n        <Carousel.Item className=\"basis-1/2\">\n          <Image\n            className=\"rounded-xl\"\n            src=\"/slides/slide-2.jpg\"\n            alt=\"image 2\"\n            width={400}\n            height={300}\n          />\n        </Carousel.Item>\n        <Carousel.Item className=\"basis-1/2\">\n          <Image\n            className=\"rounded-xl\"\n            src=\"/slides/slide-3.jpg\"\n            alt=\"image 3\"\n            width={400}\n            height={300}\n          />\n        </Carousel.Item>\n        <Carousel.Item className=\"basis-1/2\">\n          <Image\n            className=\"rounded-xl\"\n            src=\"/slides/slide-4.jpg\"\n            alt=\"image 4\"\n            width={400}\n            height={300}\n          />\n        </Carousel.Item>\n        <Carousel.Item className=\"basis-1/2\">\n          <Image\n            className=\"rounded-xl\"\n            src=\"/slides/slide-5.jpg\"\n            alt=\"image 5\"\n            width={400}\n            height={300}\n          />\n        </Carousel.Item>\n        <Carousel.Item className=\"basis-1/2\">\n          <Image\n            className=\"rounded-xl\"\n            src=\"/slides/slide-6.jpg\"\n            alt=\"image 6\"\n            width={400}\n            height={300}\n          />\n        </Carousel.Item>\n        <Carousel.Item className=\"basis-1/2\">\n          <Image\n            className=\"rounded-xl\"\n            src=\"/slides/slide-7.jpg\"\n            alt=\"image 7\"\n            width={400}\n            height={300}\n          />\n        </Carousel.Item>\n      </Carousel.Content>\n\n      <Carousel.Handler>\n        <Carousel.Button slot=\"previous\" />\n        <Carousel.Button slot=\"next\" />\n      </Carousel.Handler>\n    </Carousel>\n  )\n}\n",
    "type": "docs"
  },
  "media/avatar-initials-demo": {
    "component": "@/components/docs/media/avatar-initials-demo",
    "raw": "\"use client\"\n\nimport { Avatar } from \"ui\"\n\nexport default function AvatarInitialsDemo() {\n  return <Avatar alt=\"IR\" initials=\"IR\" />\n}\n",
    "type": "docs"
  },
  "media/carousel-with-collection-demo": {
    "component": "@/components/docs/media/carousel-with-collection-demo",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport Image from \"next/image\"\nimport { Card, Carousel } from \"ui\"\n\nexport default function CarouselWithCollectionDemo() {\n  return (\n    <Carousel className=\"w-full [&_.xrkr]:overflow-hidden [&_.xrkr]:flex [&_.xrkr]:flex-col max-w-xs\">\n      <Carousel.Content items={items}>\n        {(item) => (\n          <Carousel.Item id={item.id}>\n            <Card className=\"p-1\">\n              <Image\n                className=\"rounded-md h-40 object-center object-cover\"\n                src={`/slides/slide-${item.id}.jpg`}\n                alt=\"image 5\"\n                width={400}\n                height={300}\n              />\n              <Card.Header className=\"p-3\">\n                <Card.Title className=\"line-clamp-1 sm:text-lg\">{item.title}</Card.Title>\n                <Card.Description className=\"line-clamp-2\">{item.description}</Card.Description>\n              </Card.Header>\n            </Card>\n          </Carousel.Item>\n        )}\n      </Carousel.Content>\n\n      <Carousel.Handler>\n        <Carousel.Button slot=\"previous\" />\n        <Carousel.Button slot=\"next\" />\n      </Carousel.Handler>\n    </Carousel>\n  )\n}\n\nconst items = [\n  {\n    id: 1,\n    title: \"Vintage Leather Jacket\",\n    description: \"Classic brown leather jacket, perfect for a stylish retro look.\"\n  },\n  {\n    id: 2,\n    title: \"Wireless Bluetooth Headphones\",\n    description: \"Experience high-quality sound with these comfortable, noise-canceling headphones.\"\n  },\n  {\n    id: 3,\n    title: \"Organic Cotton T-Shirt\",\n    description: \"Soft and eco-friendly t-shirt made from 100% organic cotton.\"\n  },\n  {\n    id: 4,\n    title: \"Stainless Steel Water Bottle\",\n    description: \"Keep your drinks cold or hot with this durable, insulated water bottle.\"\n  },\n  {\n    id: 5,\n    title: \"Running Shoes\",\n    description: \"Lightweight and comfortable shoes designed for optimal performance.\"\n  },\n  {\n    id: 6,\n    title: \"Smartwatch\",\n    description: \"Stay connected and track your fitness with this sleek smartwatch.\"\n  },\n  {\n    id: 7,\n    title: \"Portable Charger\",\n    description: \"Never run out of battery with this high-capacity portable charger.\"\n  }\n]\n",
    "type": "docs"
  },
  "media/carousel-api-demo": {
    "component": "@/components/docs/media/carousel-api-demo",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { Button } from \"react-aria-components\"\nimport { twJoin } from \"tailwind-merge\"\nimport { Card, Carousel, type CarouselApi } from \"ui\"\n\nexport default function CarouselDApiDemo() {\n  const [api, setApi] = React.useState<CarouselApi>()\n  const [current, setCurrent] = React.useState(0)\n  const [count, setCount] = React.useState(0)\n\n  React.useEffect(() => {\n    if (!api) {\n      return\n    }\n\n    setCount(api.scrollSnapList().length)\n    setCurrent(api.selectedScrollSnap() + 1)\n    api.on(\"select\", () => {\n      setCurrent(api.selectedScrollSnap() + 1)\n    })\n  }, [api])\n\n  const handleSelect = (index: number) => {\n    if (api) {\n      api.scrollTo(index)\n      setCurrent(index + 1)\n    }\n  }\n\n  return (\n    <Carousel setApi={setApi} className=\"w-full max-w-sm\">\n      <Carousel.Content items={Array.from({ length: 10 }, (_, id) => ({ id: id + 1 }))}>\n        {({ id }) => (\n          <Carousel.Item id={id}>\n            <Card>\n              <Card.Content className=\"flex aspect-square items-center justify-center p-6\">\n                <span className=\"text-4xl font-semibold\">{id}</span>\n              </Card.Content>\n            </Card>\n          </Carousel.Item>\n        )}\n      </Carousel.Content>\n      <div className=\"flex justify-between mt-4 items-center\">\n        <div className=\"py-2 gap-1 flex text-center text-sm text-muted-foreground\">\n          {Array.from({ length: 10 }).map((_, index) => (\n            <Button\n              className={twJoin(\n                \"focus:outline-none transition rounded-xl\",\n                current === index + 1\n                  ? \"w-5 h-3 transition-all bg-primary hover:bg-primary/80\"\n                  : \"bg-fg/10 hover:bg-fg/15 w-3 h-3\"\n              )}\n              aria-label={`Slide ${current} of ${count}`}\n              onPress={() => handleSelect(index)}\n              key={index}\n            />\n          ))}\n        </div>\n\n        <div className=\"space-x-2\">\n          <Carousel.Button slot=\"previous\" />\n          <Carousel.Button slot=\"next\" />\n        </div>\n      </div>\n    </Carousel>\n  )\n}\n",
    "type": "docs"
  },
  "media/avatar-demo": {
    "component": "@/components/docs/media/avatar-demo",
    "raw": "\"use client\"\n\nimport AvatarGroupDemo from \"@/components/docs/media/avatar-group-demo\"\n\nexport default function AvatarDemo() {\n  return <AvatarGroupDemo />\n}\n",
    "type": "docs"
  },
  "media/avatar-shape-demo": {
    "component": "@/components/docs/media/avatar-shape-demo",
    "raw": "\"use client\"\n\nimport { Avatar } from \"ui\"\n\nexport default function AvatarShapeDemo() {\n  return (\n    <Avatar shape=\"square\" initials=\"IR\" alt=\"irsyadadl\" src=\"https://github.com/irsyadadl.png\" />\n  )\n}\n",
    "type": "docs"
  },
  "media/carousel-options-demo": {
    "component": "@/components/docs/media/carousel-options-demo",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { Card, Carousel } from \"ui\"\n\nexport default function CarouselOptionsDemo() {\n  return (\n    <Carousel\n      opts={{\n        align: \"center\",\n        loop: true\n      }}\n      className=\"w-full max-w-2xl\"\n    >\n      <Carousel.Content items={Array.from({ length: 16 }, (_, id) => ({ id: id + 1 }))}>\n        {({ id }) => (\n          <Carousel.Item id={id} className=\"basis-1/2 lg:basis-1/3\">\n            <Card className=\"flex aspect-square items-center justify-center\">\n              <Card.Title>{id}</Card.Title>\n            </Card>\n          </Carousel.Item>\n        )}\n      </Carousel.Content>\n\n      <Carousel.Handler>\n        <Carousel.Button slot=\"previous\" />\n        <Carousel.Button slot=\"next\" />\n      </Carousel.Handler>\n    </Carousel>\n  )\n}\n",
    "type": "docs"
  },
  "media/avatar-group-demo": {
    "component": "@/components/docs/media/avatar-group-demo",
    "raw": "\"use client\"\n\nimport { Avatar, AvatarGroup } from \"ui\"\n\nexport default function AvatarGroupDemo() {\n  return (\n    <AvatarGroup aria-label=\"avatar-group\">\n      <Avatar alt=\"image 1\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=61\" />\n      <Avatar alt=\"image 2\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=62\" />\n      <Avatar alt=\"image 3\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=63\" />\n      <Avatar alt=\"image 4\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=64\" />\n      <Avatar alt=\"image 5\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=65\" />\n    </AvatarGroup>\n  )\n}\n",
    "type": "docs"
  },
  "media/avatar-fallback-demo": {
    "component": "@/components/docs/media/avatar-fallback-demo",
    "raw": "\"use client\"\n\nimport { Avatar } from \"ui\"\n\nexport default function AvatarFallbackDemo() {\n  return <Avatar initials=\"IR\" src=\"https://github.com/irsyadadl.png\" />\n}\n",
    "type": "docs"
  },
  "media/avatar-status-demo": {
    "component": "@/components/docs/media/avatar-status-demo",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { Avatar } from \"ui\"\n\nexport default function AvatarStatusDemo() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex justify-center gap-2\">\n        <Avatar status=\"online\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=58\" />\n        <Avatar\n          shape=\"square\"\n          status=\"online\"\n          initials=\"IR\"\n          src=\"https://i.pravatar.cc/150?img=57\"\n        />\n      </div>\n      <div className=\"flex justify-center gap-2\">\n        <Avatar status=\"online\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=59\" />\n        <Avatar status=\"offline\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=62\" />\n        <Avatar status=\"away\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=63\" />\n        <Avatar status=\"dnd\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=64\" />\n        <Avatar status=\"idle\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=60\" />\n      </div>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "media/carousel-autoplay-demo": {
    "component": "@/components/docs/media/carousel-autoplay-demo",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport Autoplay from \"embla-carousel-autoplay\"\nimport { Card, Carousel } from \"ui\"\n\nexport default function CarouselAutoplayDemo() {\n  const plugin = React.useRef(Autoplay({ delay: 1000, stopOnInteraction: true }))\n\n  return (\n    <Carousel\n      onMouseEnter={plugin.current.stop}\n      onMouseLeave={plugin.current.reset}\n      plugins={[plugin.current as any]}\n      opts={{\n        loop: true,\n        align: \"center\"\n      }}\n      className=\"w-full [&_.xrkr]:h-56 [&_.xrkr]:overflow-hidden [&_.xrkr]:flex [&_.xrkr]:flex-col max-w-xs\"\n    >\n      <Carousel.Content items={items}>\n        {(item) => (\n          <Carousel.Item id={item.id}>\n            <div className=\"p-1\">\n              <Card>\n                <div className=\"bg-fg/5 border-b flex-1 relative\" />\n                <Card.Header>\n                  <Card.Title className=\"line-clamp-1 sm:text-lg\">{item.title}</Card.Title>\n                  <Card.Description className=\"line-clamp-2\">{item.description}</Card.Description>\n                </Card.Header>\n              </Card>\n            </div>\n          </Carousel.Item>\n        )}\n      </Carousel.Content>\n\n      <Carousel.Handler>\n        <Carousel.Button slot=\"previous\" />\n        <Carousel.Button slot=\"next\" />\n      </Carousel.Handler>\n    </Carousel>\n  )\n}\n\nconst items = [\n  {\n    id: 1,\n    title: \"Vintage Leather Jacket\",\n    description: \"Classic brown leather jacket, perfect for a stylish retro look.\"\n  },\n  {\n    id: 2,\n    title: \"Wireless Bluetooth Headphones\",\n    description: \"Experience high-quality sound with these comfortable, noise-canceling headphones.\"\n  },\n  {\n    id: 3,\n    title: \"Organic Cotton T-Shirt\",\n    description: \"Soft and eco-friendly t-shirt made from 100% organic cotton.\"\n  },\n  {\n    id: 4,\n    title: \"Stainless Steel Water Bottle\",\n    description: \"Keep your drinks cold or hot with this durable, insulated water bottle.\"\n  },\n  {\n    id: 5,\n    title: \"Running Shoes\",\n    description: \"Lightweight and comfortable shoes designed for optimal performance.\"\n  },\n  {\n    id: 6,\n    title: \"Smartwatch\",\n    description: \"Stay connected and track your fitness with this sleek smartwatch.\"\n  },\n  {\n    id: 7,\n    title: \"Portable Charger\",\n    description: \"Never run out of battery with this high-capacity portable charger.\"\n  },\n  {\n    id: 8,\n    title: \"Noise-Canceling Earbuds\",\n    description: \"Compact and powerful earbuds that block out unwanted noise.\"\n  },\n  {\n    id: 9,\n    title: \"Yoga Mat\",\n    description: \"Non-slip, cushioned yoga mat for a comfortable workout experience.\"\n  },\n  {\n    id: 10,\n    title: \"LED Desk Lamp\",\n    description: \"Bright and energy-efficient LED lamp with adjustable brightness.\"\n  }\n]\n",
    "type": "docs"
  },
  "media/carousel-orientation-demo": {
    "component": "@/components/docs/media/carousel-orientation-demo",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { Card, Carousel } from \"ui\"\n\nexport default function CarouselOrientationDemo() {\n  return (\n    <Carousel orientation=\"vertical\" className=\"w-full relative max-w-xs\">\n      <Carousel.Content items={items} className=\"h-64 py-4 snap-y\">\n        {(item) => (\n          <Carousel.Item className=\"pt-1 basis-1/2 md:basis-1/3 snap-center\">\n            <Card>\n              <Card.Header>\n                <Card.Title>{item.title}</Card.Title>\n                <Card.Description>{item.description}</Card.Description>\n              </Card.Header>\n            </Card>\n          </Carousel.Item>\n        )}\n      </Carousel.Content>\n\n      <Carousel.Handler>\n        <Carousel.Button slot=\"previous\" />\n        <Carousel.Button slot=\"next\" />\n      </Carousel.Handler>\n    </Carousel>\n  )\n}\n\nconst items = [\n  {\n    id: 1,\n    title: \"Vintage Leather Jacket\",\n    description: \"Classic brown leather jacket, perfect for a stylish retro look.\"\n  },\n  {\n    id: 2,\n    title: \"Wireless Bluetooth Headphones\",\n    description: \"Experience high-quality sound with these comfortable, noise-canceling headphones.\"\n  },\n  {\n    id: 3,\n    title: \"Organic Cotton T-Shirt\",\n    description: \"Soft and eco-friendly t-shirt made from 100% organic cotton.\"\n  },\n  {\n    id: 4,\n    title: \"Stainless Steel Water Bottle\",\n    description: \"Keep your drinks cold or hot with this durable, insulated water bottle.\"\n  },\n  {\n    id: 5,\n    title: \"Running Shoes\",\n    description: \"Lightweight and comfortable shoes designed for optimal performance.\"\n  },\n  {\n    id: 6,\n    title: \"Smartwatch\",\n    description: \"Stay connected and track your fitness with this sleek smartwatch.\"\n  },\n  {\n    id: 7,\n    title: \"Portable Charger\",\n    description: \"Never run out of battery with this high-capacity portable charger.\"\n  },\n  {\n    id: 8,\n    title: \"Noise-Canceling Earbuds\",\n    description: \"Compact and powerful earbuds that block out unwanted noise.\"\n  },\n  {\n    id: 9,\n    title: \"Yoga Mat\",\n    description: \"Non-slip, cushioned yoga mat for a comfortable workout experience.\"\n  },\n  {\n    id: 10,\n    title: \"LED Desk Lamp\",\n    description: \"Bright and energy-efficient LED lamp with adjustable brightness.\"\n  }\n]\n",
    "type": "docs"
  },
  "show-more": {
    "component": "@/components/ui/show-more",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { Text, ToggleButton } from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { buttonStyles } from \"./button\"\nimport { cr } from \"./primitive\"\n\nconst showMoreStyles = tv({\n  base: \"text-sm leading-6 after:border-muted before:border-muted\",\n  variants: {\n    orientation: {\n      vertical: \"mx-1 h-auto self-stretch\",\n      horizontal: \"my-0.5 h-px w-full self-stretch\"\n    }\n  },\n  compoundVariants: [\n    {\n      orientation: \"vertical\",\n      className:\n        \"mx-2 flex flex-col items-center before:border-l before:flex-1 before:mb-2 after:border-r after:flex-1 after:mt-2\"\n    },\n    {\n      orientation: \"horizontal\",\n      className:\n        \"self-stretch my-2 flex items-center before:border-t before:flex-1 before:mr-2 after:border-t after:flex-1 after:ml-2\"\n    }\n  ],\n  defaultVariants: {\n    orientation: \"horizontal\"\n  }\n})\n\ninterface ShowMoreProps extends React.ComponentProps<typeof ToggleButton> {\n  className?: string\n  orientation?: \"horizontal\" | \"vertical\"\n  as?: \"text\" | \"button\"\n  text?: string\n}\n\nconst ShowMore = ({\n  as = \"button\",\n  orientation = \"horizontal\",\n  className,\n  ...props\n}: ShowMoreProps) => {\n  return (\n    <div className={showMoreStyles({ orientation, className })}>\n      {as === \"button\" ? (\n        <ToggleButton\n          {...props}\n          className={buttonStyles({ shape: \"circle\", appearance: \"outline\", size: \"small\" })}\n        >\n          {cr(props.children, (children) => (\n            <>{children}</>\n          ))}\n        </ToggleButton>\n      ) : (\n        <Text slot=\"description\">{props.text}</Text>\n      )}\n    </div>\n  )\n}\n\nexport { ShowMore }\n",
    "type": "ui"
  },
  "tag-field": {
    "component": "@/components/ui/tag-field",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type { Key } from \"react-aria-components\"\nimport { Group, TextField } from \"react-aria-components\"\nimport type { ListData } from \"react-stately\"\nimport { twJoin } from \"tailwind-merge\"\nimport { tv } from \"tailwind-variants\"\n\nimport type { FieldProps } from \"./field\"\nimport { Description, Input, Label } from \"./field\"\nimport { cn } from \"./primitive\"\nimport type { RestrictedIntent, TagGroupProps } from \"./tag-group\"\nimport { Tag } from \"./tag-group\"\n\nconst tagFieldsStyles = tv({\n  base: [\"relative flex min-h-10 bg-bg flex-row flex-wrap items-center\"],\n  variants: {\n    appearance: {\n      outline: [\n        \"px-1 rounded-lg shadow-sm border\",\n        \"has-[input[data-focused=true]]:border-primary\",\n        \"has-[input[data-invalid=true][data-focused=true]]:border-danger has-[input[data-invalid=true]]:border-danger has-[input[data-invalid=true]]:ring-danger/20\",\n        \"has-[input[data-focused=true]]:ring-4 has-[input[data-focused=true]]:ring-primary/20\"\n      ],\n      plain: [\"has-[input[data-focused=true]]:border-transparent\"]\n    }\n  }\n})\n\ninterface TagItemProps {\n  id: number\n  name: string\n}\n\ninterface TagFieldProps extends Pick<TagGroupProps, \"shape\">, FieldProps {\n  intent?: RestrictedIntent\n  isDisabled?: boolean\n  max?: number\n  className?: string\n  children?: React.ReactNode\n  name?: string\n  list: ListData<TagItemProps>\n  onItemInserted?: (tag: TagItemProps) => void\n  onItemCleared?: (tag: TagItemProps | undefined) => void\n  appearance?: \"outline\" | \"plain\"\n}\n\nconst TagField = ({\n  appearance = \"outline\",\n  name,\n  className,\n  list,\n  onItemCleared,\n  onItemInserted,\n  ...props\n}: TagFieldProps) => {\n  const [isInvalid, setIsInvalid] = React.useState(false)\n  const [inputValue, setInputValue] = React.useState(\"\")\n\n  const existingTagCount = list.items.length\n  const maxTags = props.max !== undefined ? props.max : Infinity\n  const maxTagsToAdd = maxTags - existingTagCount\n\n  const insertTag = () => {\n    const tagNames = inputValue.split(/,/)\n    if (maxTagsToAdd <= 0) {\n      setIsInvalid(true)\n      setInputValue(\"\")\n      const timeoutId = setTimeout(() => {\n        setIsInvalid(false)\n      }, 2000)\n\n      return () => clearTimeout(timeoutId)\n    }\n\n    tagNames.slice(0, maxTagsToAdd).forEach((tagName) => {\n      const formattedName = tagName\n        .trim()\n        .replace(/\\s+/g, \" \")\n        .replace(/[\\t\\r\\n]/g, \"\")\n\n      if (\n        formattedName &&\n        !list.items.some(({ name }) => name.toLowerCase() === formattedName.toLowerCase())\n      ) {\n        const tag = {\n          id: (list.items.at(-1)?.id ?? 0) + 1,\n          name: formattedName\n        }\n\n        list.append(tag)\n        onItemInserted?.(tag)\n      }\n    })\n\n    setInputValue(\"\")\n  }\n\n  const clearInvalidFeedback = () => {\n    if (maxTags - list.items.length <= maxTagsToAdd) {\n      setIsInvalid(false)\n    }\n  }\n\n  const onRemove = (keys: Set<Key>) => {\n    list.remove(...keys)\n    onItemCleared?.(list.getItem([...keys][0]))\n    clearInvalidFeedback()\n  }\n\n  const onKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" || e.key === \",\") {\n      e.preventDefault()\n      insertTag()\n    }\n\n    if (e.key === \"Backspace\" && inputValue === \"\") {\n      popLast()\n      clearInvalidFeedback()\n    }\n  }\n\n  const popLast = React.useCallback(() => {\n    if (list.items.length == 0) {\n      return\n    }\n\n    const endKey = list.items[list.items.length - 1]\n\n    if (endKey !== null) {\n      list.remove(endKey.id)\n      onItemCleared?.(list.getItem(endKey.id))\n    }\n  }, [list, onItemCleared])\n\n  return (\n    <div className={cn(\"flex flex-col gap-y-1.5 w-full\", className)}>\n      {props.label && <Label>{props.label}</Label>}\n      <Group className={twJoin(\"flex flex-col\", props.isDisabled && \"opacity-50\")}>\n        <Tag.Group\n          intent={props.intent}\n          shape={props.shape}\n          aria-label=\"List item inserted\"\n          onRemove={onRemove}\n        >\n          <div className={tagFieldsStyles({ appearance })}>\n            <div className=\"flex flex-1 flex-wrap items-center\">\n              <Tag.List\n                items={list.items}\n                className={twJoin(\n                  list.items.length !== 0\n                    ? appearance === \"outline\" && \"py-1.5 px-0.5 gap-1.5\"\n                    : \"gap-0\",\n                  props.shape === \"square\" && \"[&_.jdt3lr2x]:rounded-[calc(var(--radius)-4px)]\",\n                  \"[&_.jdt3lr2x]:cursor-default last:[&_.jdt3lr2x]:-mr-1 outline-none\"\n                )}\n              >\n                {(item) => <Tag.Item>{item.name}</Tag.Item>}\n              </Tag.List>\n              <TextField\n                isDisabled={props.isDisabled}\n                aria-label={props?.label ?? (props[\"aria-label\"] || props.placeholder)}\n                isInvalid={isInvalid}\n                onKeyDown={onKeyDown}\n                onChange={setInputValue}\n                value={inputValue}\n                {...props}\n              >\n                <Input\n                  className=\"w-auto inline\"\n                  placeholder={maxTagsToAdd <= 0 ? \"Remove one to add more\" : props.placeholder}\n                />\n              </TextField>\n            </div>\n          </div>\n        </Tag.Group>\n        {name && (\n          <input hidden name={name} value={list.items.map((i) => i.name).join(\",\")} readOnly />\n        )}\n      </Group>\n      {props.description && <Description>{props.description}</Description>}\n    </div>\n  )\n}\n\nexport { TagField, type TagItemProps }\n",
    "type": "ui"
  },
  "navbar": {
    "component": "@/components/ui/navbar",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { LayoutGroup, motion } from \"framer-motion\"\nimport { IconHamburger } from \"justd-icons\"\nimport type { LinkProps } from \"react-aria-components\"\nimport { Link } from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Button } from \"./button\"\nimport { cn, cr, useMediaQuery } from \"./primitive\"\nimport { Sheet } from \"./sheet\"\n\ntype NavbarOptions = {\n  side?: \"left\" | \"right\"\n  isSticky?: boolean\n  intent?: \"navbar\" | \"floating\" | \"inset\"\n}\n\ntype NavbarContextProps = {\n  open: boolean\n  setOpen: (open: boolean) => void\n  isCompact: boolean\n  toggleNavbar: () => void\n} & NavbarOptions\n\nconst NavbarContext = React.createContext<NavbarContextProps | null>(null)\n\nfunction useNavbar() {\n  const context = React.useContext(NavbarContext)\n  if (!context) {\n    throw new Error(\"useNavbar must be used within a Navbar.\")\n  }\n\n  return context\n}\n\ninterface NavbarProviderProps extends React.ComponentProps<\"header\">, NavbarOptions {\n  defaultOpen?: boolean\n  isOpen?: boolean\n  onOpenChange?: (open: boolean) => void\n}\n\nconst navbarStyles = tv({\n  base: \"relative isolate flex w-full min-h-svh flex-col\",\n  variants: {\n    intent: {\n      floating: \"pt-2 px-2.5\",\n      navbar: \"\",\n      inset: \"bg-secondary dark:bg-bg\"\n    }\n  }\n})\n\nconst Navbar = ({\n  children,\n  isOpen: openProp,\n  onOpenChange: setOpenProp,\n  defaultOpen = false,\n  className,\n  side = \"left\",\n  isSticky = false,\n  intent = \"navbar\",\n  ...props\n}: NavbarProviderProps) => {\n  const isCompact = useMediaQuery(\"(max-width: 1023px)\")\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      if (setOpenProp) {\n        return setOpenProp?.(typeof value === \"function\" ? value(open) : value)\n      }\n\n      _setOpen(value)\n    },\n    [setOpenProp, open]\n  )\n\n  const toggleNavbar = React.useCallback(() => {\n    setOpen((open) => !open)\n  }, [setOpen])\n\n  const contextValue = React.useMemo<NavbarContextProps>(\n    () => ({\n      open,\n      setOpen,\n      isCompact,\n      toggleNavbar,\n      intent,\n      isSticky,\n      side\n    }),\n    [open, setOpen, isCompact, toggleNavbar, intent, isSticky, side]\n  )\n  return (\n    <NavbarContext.Provider value={contextValue}>\n      <header data-intent={intent} className={navbarStyles({ intent, className })} {...props}>\n        {children}\n      </header>\n    </NavbarContext.Provider>\n  )\n}\n\nconst navStyles = tv({\n  base: [\n    \"hidden h-[--navbar-height] [--navbar-height:3.5rem] px-4 group peer lg:flex items-center w-full\",\n    \"[&>div]:max-w-[1680px] lg:[&>div]:flex [&>div]:items-center [&>div]:w-full [&>div]:mx-auto\"\n  ],\n  variants: {\n    isSticky: {\n      true: \"sticky z-40 top-0\"\n    },\n    intent: {\n      floating:\n        \"bg-tertiary w-full max-w-7xl 2xl:max-w-screen-2xl mx-auto shadow-sm border rounded-xl sm:px-4\",\n      navbar: \"bg-tertiary shadow-sm border-b sm:px-6\",\n      inset: [\n        \"bg-secondary mx-auto dark:bg-bg sm:px-6\",\n        \"2xl:[&>div]:max-w-screen-2xl lg:[&>div]:flex [&>div]:items-center [&>div]:w-full [&>div]:mx-auto\"\n      ]\n    }\n  }\n})\n\ninterface NavbarProps extends React.ComponentProps<\"div\"> {\n  intent?: \"navbar\" | \"floating\" | \"inset\"\n  isSticky?: boolean\n  side?: \"left\" | \"right\"\n}\n\nconst Nav = ({ className, ...props }: NavbarProps) => {\n  const { isCompact, side, intent, isSticky, open, setOpen } = useNavbar()\n\n  if (isCompact) {\n    return (\n      <Sheet isOpen={open} onOpenChange={setOpen} {...props}>\n        <Sheet.Content\n          side={side}\n          aria-label=\"Compact Navbar\"\n          data-navbar=\"compact\"\n          classNames={{\n            content: \"text-fg [&>button]:hidden\"\n          }}\n          isStack={intent === \"floating\"}\n        >\n          <Sheet.Body className=\"sm:px-4 px-2\">{props.children}</Sheet.Body>\n        </Sheet.Content>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div className={navStyles({ isSticky, intent, className })} {...props}>\n      <div>{props.children}</div>\n    </div>\n  )\n}\n\nconst Trigger = ({ className, onPress, ...props }: React.ComponentProps<typeof Button>) => {\n  const { toggleNavbar } = useNavbar()\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      appearance=\"plain\"\n      aria-label={props[\"aria-label\"] || \"Toggle Navbar\"}\n      size=\"square-petite\"\n      className={className}\n      onPress={(event) => {\n        onPress?.(event)\n        toggleNavbar()\n      }}\n      {...props}\n    >\n      <IconHamburger />\n      <span className=\"sr-only\">Toggle Navbar</span>\n    </Button>\n  )\n}\n\nconst Section = ({ className, ...props }: React.ComponentProps<\"div\">) => {\n  const { isCompact } = useNavbar()\n  const id = React.useId()\n  return (\n    <LayoutGroup id={id}>\n      <div\n        data-slot=\"navbar-section\"\n        className={cn(\n          \"flex\",\n          isCompact ? \"flex-col gap-y-4\" : \"flex-row gap-x-3 items-center\",\n          className\n        )}\n        {...props}\n      >\n        {props.children}\n      </div>\n    </LayoutGroup>\n  )\n}\n\nconst navItemStyles = tv({\n  base: [\n    \"relative cursor-pointer lg:text-sm px-2 flex forced-colors:outline-0 items-center gap-x-2 [&>[data-slot=icon]]:-mx-0.5 text-muted-fg outline-none forced-colors:disabled:text-[GrayText] forced-colors:transform-none transition-colors\",\n    \"hover:text-fg focus:text-fg pressed:text-fg focus-visible:outline-1 focus-visible:outline-primary\",\n    \"disabled:opacity-60 disabled:cursor-default\",\n    \"[&>[data-slot=icon]]:size-4 [&>[data-slot=icon]]:shrink-0\"\n  ],\n  variants: {\n    isCurrent: {\n      true: \"text-fg\"\n    }\n  }\n})\n\ninterface ItemProps extends LinkProps {\n  isCurrent?: boolean\n}\n\nconst Item = ({ className, isCurrent, ...props }: ItemProps) => {\n  const { intent, isCompact } = useNavbar()\n  return (\n    <Link\n      slot=\"navbar-item\"\n      aria-current={isCurrent ? \"page\" : undefined}\n      className={cr(className, (className, ...renderProps) =>\n        navItemStyles({ ...renderProps, isCurrent, className })\n      )}\n      {...props}\n    >\n      {(values) => (\n        <>\n          {typeof props.children === \"function\" ? props.children(values) : props.children}\n\n          {(isCurrent || values.isCurrent) && !isCompact && intent !== \"floating\" && (\n            <motion.span\n              layoutId=\"current-indicator\"\n              className=\"absolute inset-x-2 bottom-[calc(var(--navbar-height)*-0.33)] h-0.5 rounded-full bg-fg\"\n            />\n          )}\n        </>\n      )}\n    </Link>\n  )\n}\n\nconst Logo = ({ className, ...props }: LinkProps) => {\n  return (\n    <Link\n      className={cn(\n        \"lg:mr-4 focus:outline-none flex items-center gap-x-2 focus-visible:outline-1 focus-visible:outline-primary px-2 py-4 lg:px-0 lg:py-0 text-fg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nconst Flex = ({ className, ...props }: React.ComponentProps<\"div\">) => {\n  return <div className={cn(\"flex items-center gap-2 sm:gap-3\", className)} {...props} />\n}\n\nconst compactStyles = tv({\n  base: \"lg:hidden flex peer-has-[[data-intent=floating]]:border bg-tertiary justify-between\",\n  variants: {\n    intent: {\n      floating: \"border h-12 rounded-lg px-3.5\",\n      inset: \"h-14 px-4\",\n      navbar: \"h-14 border-b px-4\"\n    }\n  }\n})\n\nconst Compact = ({ className, ...props }: React.ComponentProps<\"div\">) => {\n  const { intent } = useNavbar()\n  return <div className={compactStyles({ intent, className })} {...props} />\n}\n\nconst insetStyles = tv({\n  base: \"grow\",\n  variants: {\n    intent: {\n      floating: \"\",\n      inset:\n        \"bg-tertiary lg:rounded-lg lg:shadow-sm lg:ring-1 lg:ring-dark/5 lg:dark:ring-light/10\",\n      navbar: \"\"\n    }\n  }\n})\n\nconst Inset = ({ className, ...props }: React.ComponentProps<\"div\">) => {\n  const { intent } = useNavbar()\n  return (\n    <main\n      data-intent={intent}\n      className={cn(\"flex flex-1 flex-col\", intent === \"inset\" && \"pb-2 lg:px-2\", className)}\n    >\n      <div className={insetStyles({ intent, className })}>{props.children}</div>\n    </main>\n  )\n}\n\nNavbar.Nav = Nav\nNavbar.Inset = Inset\nNavbar.Compact = Compact\nNavbar.Flex = Flex\nNavbar.Trigger = Trigger\nNavbar.Logo = Logo\nNavbar.Item = Item\nNavbar.Section = Section\n\nexport { Navbar }\n",
    "type": "ui"
  },
  "note": {
    "component": "@/components/ui/note",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconCircleCheck, IconCircleInfo, IconTriangleExclamation } from \"justd-icons\"\nimport { Text } from \"react-aria-components\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nconst noteStyles = tv({\n  base: [\n    \"my-4 px-4 [&_.nd]:block [&_.nd]:text-sm py-4 leading-4 overflow-hidden rounded-lg border [&_strong]:font-semibold\",\n    \"[&_[data-slot=icon]]:size-5 [&_[data-slot=icon]]:shrink-0 [&_a]:underline [&_a]:hover:underline\"\n  ],\n  variants: {\n    intent: {\n      primary: [\"border-primary/35 [&_a]:text-primary text-primary bg-primary/10 leading-4\"],\n      secondary: [\n        \"border-border [&_a]:text-secondary-fg text-secondary-fg bg-secondary/50 [&_[data-slot=icon]]:text-secondary-fg\",\n        \"dark:[&_a]:text-secondary-fg dark:[&_[data-slot=icon]]:text-secondary-fg\"\n      ],\n      info: [\"border-info/20 text-info bg-info/5 dark:bg-info/10 leading-4\"],\n      warning:\n        \"border-warning/50 dark:border-warning/25 bg-warning/5 text-warning-fg dark:text-warning\",\n      danger: \"border-danger/30 bg-danger/5 dark:bg-danger/10 text-danger\",\n      success: [\n        \"border-emerald-500/20 [&_a]:text-emerald-600 text-emerald-900 bg-emerald-50/50 [&_[data-slot=icon]]:text-emerald-600 leading-4\",\n        \"dark:bg-emerald-500/10 dark:text-emerald-200 dark:[&_a]:text-emerald-50 dark:[&_[data-slot=icon]]:text-emerald-400\"\n      ]\n    }\n  }\n})\n\ninterface NoteProps\n  extends React.HtmlHTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof noteStyles> {\n  hideIndicator?: boolean\n}\n\nconst Note = ({ hideIndicator = false, intent = \"info\", className, ...props }: NoteProps) => {\n  return (\n    <div className={noteStyles({ intent, className })} {...props}>\n      <div className=\"flex items-start gap-x-2.5\">\n        {!hideIndicator && (\n          <div className=\"w-5 shrink-0 mt-px\">\n            {[\"info\", \"primary\", \"secondary\"].includes(intent) ? (\n              <IconCircleInfo />\n            ) : intent === \"success\" ? (\n              <IconCircleCheck />\n            ) : (\n              <IconTriangleExclamation />\n            )}\n          </div>\n        )}\n        <Text slot=\"description\" {...props} className=\"nd\">\n          {props.children}\n        </Text>\n      </div>\n    </div>\n  )\n}\n\nexport { Note, type NoteProps }\n",
    "type": "ui"
  },
  "keyboard": {
    "component": "@/components/ui/keyboard",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { Keyboard as KeyboardPrimitive } from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nconst keyboardStyles = tv({\n  slots: {\n    base: \"-mr-1 ml-auto hidden items-center gap-[0.25rem] px-1 lg:inline-flex\",\n    kbd: [\n      \"text-center font-sans capitalize text-muted-fg group-focus:text-fg forced-colors:group-focus:text-[HighlightText]\",\n      \"inline-grid min-h-5 min-w-5 place-content-center rounded bg-bg font-sans text-[.75rem] uppercase text-fg ring-1 ring-fg/10 group-focus:opacity-60\"\n    ]\n  }\n})\n\nconst { base, kbd } = keyboardStyles()\n\ninterface KeyboardProps extends React.HTMLAttributes<HTMLElement> {\n  keys: string | string[]\n  classNames?: {\n    base?: string\n    kbd?: string\n  }\n}\n\nconst Keyboard = ({ keys, classNames, className, ...props }: KeyboardProps) => {\n  return (\n    <KeyboardPrimitive className={base({ className: classNames?.base ?? className })} {...props}>\n      {(Array.isArray(keys) ? keys : keys.split(\"\")).map((char, index) => (\n        <kbd\n          key={index}\n          className={kbd({ className: index > 0 && char.length > 1 ? \"pl-1\" : classNames?.kbd })}\n        >\n          {char}\n        </kbd>\n      ))}\n    </KeyboardPrimitive>\n  )\n}\n\nexport { Keyboard, type KeyboardProps }\n",
    "type": "ui"
  },
  "date-range-picker": {
    "component": "@/components/ui/date-range-picker",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport {\n  DateRangePicker as DateRangePickerPrimitive,\n  type DateRangePickerProps as DateRangePickerPrimitiveProps,\n  type DateValue,\n  type ValidationResult\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { DateInput } from \"./date-field\"\nimport { DatePickerIcon, DatePickerOverlay } from \"./date-picker\"\nimport { Description, FieldError, FieldGroup, Label } from \"./field\"\nimport { ctr } from \"./primitive\"\n\nconst dateRangePickerStyles = tv({\n  slots: {\n    base: \"group flex flex-col gap-y-1.5\",\n    dateRangePickerInputStart: \"px-2 lg:text-sm tabular-nums text-base\",\n    dateRangePickerInputEnd: \"flex-1 px-2 py-1.5 tabular-nums text-base lg:text-sm\",\n    dateRangePickerDash:\n      \"text-fg group-disabled:text-muted-fg forced-colors:text-[ButtonText] group-disabled:forced-colors:text-[GrayText]\"\n  }\n})\nconst { base, dateRangePickerInputStart, dateRangePickerInputEnd, dateRangePickerDash } =\n  dateRangePickerStyles()\n\ninterface DateRangePickerProps<T extends DateValue> extends DateRangePickerPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst DateRangePicker = <T extends DateValue>({\n  label,\n  className,\n  description,\n  errorMessage,\n  ...props\n}: DateRangePickerProps<T>) => {\n  return (\n    <DateRangePickerPrimitive {...props} className={ctr(className, base())}>\n      {label && <Label>{label}</Label>}\n      <FieldGroup className=\"w-auto min-w-40\">\n        <DateInput slot=\"start\" className={dateRangePickerInputStart()} />\n        <span aria-hidden=\"true\" className={dateRangePickerDash()}>\n          –\n        </span>\n        <DateInput slot=\"end\" className={dateRangePickerInputEnd()} />\n        <DatePickerIcon />\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n      <DatePickerOverlay range />\n    </DateRangePickerPrimitive>\n  )\n}\n\nexport { DateRangePicker, type DateRangePickerProps }\n",
    "type": "ui"
  },
  "list-box": {
    "component": "@/components/ui/list-box",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconCheck, IconHamburger } from \"justd-icons\"\nimport {\n  ListBox as ListBoxPrimitive,\n  ListBoxItem as ListBoxItemPrimitive,\n  type ListBoxItemProps as ListBoxItemPrimitiveProps,\n  type ListBoxProps as ListBoxPrimitiveProps\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { DropdownItemDetails, DropdownSection } from \"./dropdown\"\nimport { cn, cr } from \"./primitive\"\n\nconst listBoxStyles = tv({\n  base: \"flex max-h-96 [&::-webkit-scrollbar]:size-0.5 [scrollbar-width:thin] w-full gap-y-1 min-w-72 flex-col overflow-y-auto rounded-xl border p-1 shadow-lg outline-none\"\n})\n\ninterface ListBoxProps<T> extends ListBoxPrimitiveProps<T> {\n  className?: string\n}\n\nconst ListBox = <T extends object>({ children, className, ...props }: ListBoxProps<T>) => (\n  <ListBoxPrimitive {...props} className={listBoxStyles({ className })}>\n    {children}\n  </ListBoxPrimitive>\n)\n\nconst listBoxItemStyles = tv({\n  base: \"lbi cursor-pointer relative rounded-[calc(var(--radius)-1px)] p-2 text-base outline-none lg:text-sm\",\n  variants: {\n    isFocusVisible: {\n      true: \"bg-secondary [&:focus-visible_[slot=label]]:text-accent-fg [&:focus-visible_[slot=description]]:text-accent-fg/70 text-secondary-fg\"\n    },\n    isHovered: {\n      true: \"bg-accent [&:hover_[slot=label]]:text-accent-fg [&:hover_[slot=description]]:text-accent-fg/70 text-accent-fg [&_.text-muted-fg]:text-accent-fg/80\"\n    },\n    isFocused: {\n      true: \"[&_[data-slot=icon]]:text-accent-fg [&_[data-slot=label]]:text-accent-fg [&_.text-muted-fg]:text-accent-fg/80 bg-accent text-accent-fg\"\n    },\n    isSelected: {\n      true: \"[&_[data-slot=icon]]:text-accent-fg [&_[data-slot=label]]:text-accent-fg [&_.text-muted-fg]:text-accent-fg/80 bg-accent text-accent-fg\"\n    },\n    isDragging: { true: \"cursor-grabbing bg-secondary text-secondary-fg\" },\n    isDisabled: {\n      true: \"opacity-70 cursor-default text-muted-fg\"\n    }\n  }\n})\n\ninterface ListBoxItemProps<T extends object> extends ListBoxItemPrimitiveProps<T> {\n  className?: string\n}\n\nconst ListBoxItem = <T extends object>({ children, className, ...props }: ListBoxItemProps<T>) => {\n  const textValue = typeof children === \"string\" ? children : undefined\n\n  return (\n    <ListBoxItemPrimitive\n      textValue={textValue}\n      {...props}\n      className={cr(className, (className, renderProps) =>\n        listBoxItemStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    >\n      {(values) => (\n        <div className=\"flex items-center gap-2\">\n          <>\n            {values.allowsDragging && (\n              <IconHamburger\n                className={cn(\n                  \"size-4 shrink-0 text-muted-fg transition\",\n                  values.isFocused && \"text-fg\",\n                  values.isDragging && \"text-fg\",\n                  values.isSelected && \"text-accent-fg/70\"\n                )}\n              />\n            )}\n            <div className=\"flex flex-col\">\n              {typeof children === \"function\" ? children(values) : children}\n\n              {values.isSelected && (\n                <span className=\"animate-in absolute right-2 top-3 lg:top-2.5\">\n                  <IconCheck />\n                </span>\n              )}\n            </div>\n          </>\n        </div>\n      )}\n    </ListBoxItemPrimitive>\n  )\n}\n\ntype ListBoxPickerProps<T> = ListBoxProps<T>\n\nconst ListBoxPicker = <T extends object>({ className, ...props }: ListBoxPickerProps<T>) => {\n  return (\n    <ListBoxPrimitive\n      className={cn(\"max-h-72 overflow-auto p-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}\n\nconst Section = ({ className, ...props }: React.ComponentProps<typeof DropdownSection>) => {\n  return (\n    <DropdownSection className={cn(className, \"[&_.lbi:last-child]:-mb-1.5 gap-y-1\")} {...props} />\n  )\n}\n\nListBox.Section = Section\nListBox.ItemDetails = DropdownItemDetails\nListBox.Item = ListBoxItem\nListBox.Picker = ListBoxPicker\n\nexport { ListBox, listBoxStyles, type ListBoxPickerProps }\n",
    "type": "ui"
  },
  "pagination": {
    "component": "@/components/ui/pagination",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport {\n  IconChevronLgLeft,\n  IconChevronLgRight,\n  IconChevronsLgLeft,\n  IconChevronsLgRight,\n  IconDotsHorizontal\n} from \"justd-icons\"\nimport {\n  ListBox,\n  ListBoxItem,\n  type ListBoxItemProps,\n  type ListBoxProps,\n  ListBoxSection,\n  type SectionProps,\n  Separator\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { buttonStyles } from \"./button\"\nimport { cn, cr } from \"./primitive\"\n\nconst paginationStyles = tv({\n  slots: {\n    pagination: \"mx-auto flex w-full justify-center gap-[5px]\",\n    section: \"flex h-9 gap-[5px]\",\n    list: \"flex flex-row items-center gap-[5px]\",\n    itemButton:\n      \"focus-visible:border-primary text-fg font-normal cursor-pointer focus-visible:bg-primary/10 focus-visible:ring-4 focus-visible:ring-primary/20\",\n    itemLabel: \"h-9 px-3.5 tabular-nums grid place-content-center\",\n    itemSeparator: \"h-9 grid place-content-center\",\n    itemEllipsis:\n      \"flex items-center justify-center focus-visible:border-primary rounded-lg border border-transparent focus:outline-none size-9 focus-visible:bg-primary/10 focus-visible:ring-4 focus-visible:ring-primary/20\",\n    itemEllipsisIcon: \"flex size-9 items-center justify-center\",\n    defaultItem:\n      \"focus-visible:border-primary tabular-nums font-normal cursor-pointer disabled:cursor-default focus-visible:bg-primary/10 focus-visible:ring-4 focus-visible:ring-primary/20 disabled:opacity-100\",\n    itemSeparatorLine: \"h-5 w-[1.5px] bg-secondary-fg/40 rotate-[14deg] shrink-0\"\n  }\n})\n\nconst {\n  pagination,\n  section,\n  list,\n  itemButton,\n  itemLabel,\n  itemSeparator,\n  itemEllipsis,\n  itemEllipsisIcon,\n  defaultItem,\n  itemSeparatorLine\n} = paginationStyles()\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav role=\"navigation\" aria-label=\"pagination\" className={pagination({ className })} {...props} />\n)\n\nconst PaginationSection = <T extends object>({ className, ...props }: SectionProps<T>) => (\n  <ListBoxSection {...props} className={section({ className })} />\n)\n\nconst List = <T extends object>({ className, ...props }: ListBoxProps<T>) => {\n  return (\n    <ListBox\n      orientation=\"horizontal\"\n      aria-label={props[\"aria-label\"] || \"Pagination\"}\n      layout=\"grid\"\n      className={cr(className, (className) => list({ className }))}\n      {...props}\n    />\n  )\n}\n\nconst renderListItem = (\n  props: ListBoxItemProps & {\n    textValue?: string\n    \"aria-current\"?: string | undefined\n    isDisabled?: boolean\n    className?: string\n  },\n  children: React.ReactNode\n) => <ListBoxItem {...props}>{children}</ListBoxItem>\n\ninterface PaginationItemProps extends ListBoxItemProps {\n  children?: React.ReactNode\n  className?: string\n  intent?: \"primary\" | \"secondary\"\n  size?: \"medium\" | \"large\" | \"square-petite\" | \"extra-small\" | \"small\"\n  shape?: \"square\" | \"circle\"\n  appearance?: \"solid\" | \"outline\" | \"plain\"\n  isCurrent?: boolean\n  variant?: \"label\" | \"separator\" | \"ellipsis\" | \"default\" | \"last\" | \"first\" | \"previous\" | \"next\"\n}\n\nconst Item = ({\n  variant = \"default\",\n  size = \"small\",\n  appearance = \"outline\",\n  intent,\n  className,\n  isCurrent,\n  children,\n  ...props\n}: PaginationItemProps) => {\n  const textValue =\n    typeof children === \"string\"\n      ? children\n      : typeof children === \"number\"\n        ? children.toString()\n        : undefined\n\n  const renderPaginationIndicator = (indicator: React.ReactNode) =>\n    renderListItem(\n      {\n        textValue: variant,\n        \"aria-current\": isCurrent ? \"page\" : undefined,\n        isDisabled: isCurrent,\n        className: cn(\n          buttonStyles({\n            appearance: \"outline\",\n            size: \"small\",\n            className: itemButton()\n          }),\n          className\n        ),\n        ...props\n      },\n      indicator\n    )\n\n  switch (variant) {\n    case \"label\":\n      return renderListItem(\n        {\n          textValue: textValue,\n          className: itemLabel({ className }),\n          ...props\n        },\n        children\n      )\n    case \"separator\":\n      return renderListItem(\n        {\n          textValue: \"Separator\",\n          className: itemSeparator({ className }),\n          ...props\n        },\n        <Separator orientation=\"vertical\" className={itemSeparatorLine()} />\n      )\n    case \"ellipsis\":\n      return renderListItem(\n        {\n          textValue: \"More pages\",\n          className: itemEllipsis({ className }),\n          ...props\n        },\n        <span aria-hidden className={itemEllipsisIcon({ className })}>\n          <IconDotsHorizontal />\n        </span>\n      )\n    case \"previous\":\n      return renderPaginationIndicator(<IconChevronLgLeft />)\n    case \"next\":\n      return renderPaginationIndicator(<IconChevronLgRight />)\n    case \"first\":\n      return renderPaginationIndicator(<IconChevronsLgLeft />)\n    case \"last\":\n      return renderPaginationIndicator(<IconChevronsLgRight />)\n    default:\n      return renderListItem(\n        {\n          textValue: textValue,\n          \"aria-current\": isCurrent ? \"page\" : undefined,\n          isDisabled: isCurrent,\n          className: cn(\n            buttonStyles({\n              intent: isCurrent ? \"primary\" : intent,\n              appearance: isCurrent ? \"solid\" : appearance,\n              size,\n              className: defaultItem({ className })\n            }),\n            className\n          ),\n          ...props\n        },\n        children\n      )\n  }\n}\n\nPagination.Item = Item\nPagination.List = List\nPagination.Section = PaginationSection\n\nexport { Pagination }\n",
    "type": "ui"
  },
  "link": {
    "component": "@/components/ui/link",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { Link as LinkPrimitive, type LinkProps as LinkPrimitiveProps } from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { cr } from \"./primitive\"\n\nconst linkStyles = tv({\n  base: [\n    \"relative focus-visible:outline-2 outline-offset-2 outline-0 focus:outline-none outline-primary transition-colors\",\n    \"forced-colors:outline-[Highlight] forced-colors:disabled:text-[GrayText] disabled:focus-visible:outline-0\",\n    \"disabled:cursor-default disabled:opacity-60\"\n  ],\n  variants: {\n    intent: {\n      unstyled: \"text-current\",\n      primary: \"text-primary hover:text-primary/80 forced-colors:disabled:text-[GrayText]\",\n      danger: \"text-danger hover:text-danger/80 forced-colors:disabled:text-[GrayText]\",\n      \"lad/primary\":\n        \"text-fg hover:text-primary dark:hover:text-primary/80 forced-colors:disabled:text-[GrayText]\",\n      secondary: \"text-secondary-fg hover:text-secondary-fg/80\"\n    }\n  },\n  defaultVariants: {\n    intent: \"unstyled\"\n  }\n})\n\ninterface LinkProps extends LinkPrimitiveProps {\n  intent?: \"primary\" | \"secondary\" | \"danger\" | \"lad/primary\" | \"unstyled\"\n}\n\nconst Link = ({ className, ...props }: LinkProps) => {\n  return (\n    <LinkPrimitive\n      {...props}\n      className={cr(className, (className, ...renderProps) =>\n        linkStyles({ ...renderProps, intent: props.intent, className })\n      )}\n    >\n      {(values) => (\n        <>{typeof props.children === \"function\" ? props.children(values) : props.children}</>\n      )}\n    </LinkPrimitive>\n  )\n}\n\nexport { Link, LinkPrimitive, type LinkPrimitiveProps, type LinkProps }\n",
    "type": "ui"
  },
  "tabs": {
    "component": "@/components/ui/tabs",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { LayoutGroup, motion } from \"framer-motion\"\nimport {\n  Tab as TabPrimitive,\n  TabList,\n  type TabListProps,\n  TabPanel,\n  type TabPanelProps,\n  type TabProps,\n  Tabs as TabsPrimitive,\n  type TabsProps\n} from \"react-aria-components\"\nimport { twJoin } from \"tailwind-merge\"\nimport { tv } from \"tailwind-variants\"\n\nimport { cn, cr } from \"./primitive\"\n\nconst tabsStyles = tv({\n  base: \"group flex gap-4 forced-color-adjust-none\",\n  variants: {\n    orientation: {\n      horizontal: \"flex-col\",\n      vertical: \"w-[800px] flex-row\"\n    }\n  }\n})\n\nconst Tabs = (props: TabsProps) => {\n  return (\n    <TabsPrimitive\n      {...props}\n      className={cr(props.className, (className, renderProps) =>\n        tabsStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    />\n  )\n}\n\nconst tabListStyles = tv({\n  base: \"flex forced-color-adjust-none\",\n  variants: {\n    orientation: {\n      horizontal: \"flex-row gap-x-5 border-b border-border\",\n      vertical: \"flex-col items-start gap-y-4 border-l\"\n    }\n  }\n})\n\nconst List = <T extends object>(props: TabListProps<T>) => {\n  const id = React.useId()\n  return (\n    <LayoutGroup id={id}>\n      <TabList\n        {...props}\n        className={cr(props.className, (className, renderProps) =>\n          tabListStyles({ ...renderProps, className })\n        )}\n      />\n    </LayoutGroup>\n  )\n}\n\nconst tabStyles = tv({\n  base: [\n    \"relative flex whitespace-nowrap cursor-default items-center rounded-full text-sm font-medium outline-none transition hover:text-fg [&>[data-slot=icon]]:size-4 [&>[data-slot=icon]]:mr-2\",\n    // hor\n    \"group-orientation-vertical:w-full group-orientation-vertical:py-0 group-orientation-vertical:pl-4 group-orientation-vertical:pr-2\",\n    // ver\n    \"group-orientation-horizontal:pb-3\"\n  ],\n  variants: {\n    isSelected: {\n      false: \"text-muted-fg\",\n      true: \"text-fg\"\n    },\n    isFocused: { false: \"ring-0\", true: \"text-fg\" },\n    isDisabled: {\n      true: \"text-muted-fg/50\"\n    }\n  }\n})\n\nconst Tab = ({ children, ...props }: TabProps) => {\n  return (\n    <TabPrimitive\n      {...props}\n      className={cr(props.className, (_className, renderProps) =>\n        tabStyles({\n          ...renderProps,\n          className: twJoin(\"href\" in props && \"cursor-pointer\", _className)\n        })\n      )}\n    >\n      {({ isSelected }) => (\n        <>\n          {children as React.ReactNode}\n          {isSelected && (\n            <motion.span\n              className={cn(\n                \"absolute rounded bg-fg\",\n                // horizontal\n                \"group-orientation-horizontal:inset-x-0 group-orientation-horizontal:-bottom-px group-orientation-horizontal:h-0.5 group-orientation-horizontal:w-full\",\n                // vertical\n                \"group-orientation-vertical:left-0 group-orientation-vertical:h-[calc(100%-10%)] group-orientation-vertical:w-0.5 group-orientation-vertical:transform\"\n              )}\n              layoutId=\"current-selected\"\n              transition={{ type: \"spring\", stiffness: 500, damping: 40 }}\n            />\n          )}\n        </>\n      )}\n    </TabPrimitive>\n  )\n}\n\nconst tabPanelStyles = tv({\n  base: \"flex-1 text-sm text-fg\",\n  variants: {\n    isFocusVisible: {\n      true: \"outline-none\"\n    }\n  }\n})\n\nconst Panel = (props: TabPanelProps) => {\n  return (\n    <TabPanel\n      {...props}\n      className={cr(props.className, (className, renderProps) =>\n        tabPanelStyles({ ...renderProps, className })\n      )}\n    />\n  )\n}\n\nTabs.List = List\nTabs.Tab = Tab\nTabs.Panel = Panel\n\nexport { Tabs }\n",
    "type": "ui"
  },
  "card": {
    "component": "@/components/ui/card",
    "raw": "import * as React from \"react\"\n\nimport { cn } from \"@/utils/classes\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Heading } from \"./heading\"\n\nconst card = tv({\n  slots: {\n    root: [\n      \"xrkr bg-bg rounded-xl xkd2 [&:has(table)_.ccvgs8x]:border-t [&:has(table)_.x32]:bg-tertiary [&:has(table)]:overflow-hidden border text-fg shadow-sm [&:has(.larhy3):not(:has(.yahnba))>.ccvgs8x]:pt-6 [&:has(.larhy3)]:overflow-hidden [&_table]:overflow-hidden\"\n    ],\n    header: \"flex xlw32 flex-col space-y-1.5 px-6 py-5\",\n    title: \"sm:leading-6 leading-none klda font-semibold tracking-tight\",\n    description: \"text-base dl2 text-muted-fg sm:text-sm\",\n    content:\n      \"yahnba px-6 pb-6 has-[.t-hea]:bg-secondary/40 has-[table]:p-0 [&:has(table)+.ccvgs8x]:py-5 [&:has(table)]:border-t [&_.t-cel]:px-6 [&_.t-col]:px-6\",\n    footer: \"ccvgs8x flex items-center p-6 pt-0\"\n  }\n})\n\nconst { root, header, title, description, content, footer } = card()\n\nconst Card = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n  return <div className={root({ className })} {...props} />\n}\n\ninterface HeaderProps extends React.HTMLAttributes<HTMLDivElement> {\n  title?: string\n  description?: string\n  withoutPadding?: boolean\n}\n\nconst Header = ({\n  withoutPadding = false,\n  className,\n  title,\n  description,\n  children,\n  ...props\n}: HeaderProps) => (\n  <div className={header({ className: cn(className, withoutPadding && \"px-0 pt-0\") })} {...props}>\n    {title && <Title>{title}</Title>}\n    {description && <Description>{description}</Description>}\n    {!title && typeof children === \"string\" ? <Title>{children}</Title> : children}\n  </div>\n)\n\nconst Title = ({ className, level = 3, ...props }: React.ComponentProps<typeof Heading>) => {\n  return <Heading level={level} className={title({ className })} {...props} />\n}\n\nconst Description = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n  return <div {...props} slot=\"description\" className={description({ className })} {...props} />\n}\n\nconst Content = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n  return <div className={content({ className })} {...props} />\n}\n\nconst Footer = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n  return <div className={footer({ className })} {...props} />\n}\n\nCard.Content = Content\nCard.Description = Description\nCard.Footer = Footer\nCard.Header = Header\nCard.Title = Title\n\nexport { Card }\n",
    "type": "ui"
  },
  "slider": {
    "component": "@/components/ui/slider",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { useSlotId } from \"@react-aria/utils\"\nimport type {\n  LabelProps,\n  SliderOutputProps,\n  SliderProps as SliderPrimitiveProps,\n  SliderThumbProps,\n  SliderTrackProps,\n  TextProps\n} from \"react-aria-components\"\nimport {\n  Slider as SliderPrimitive,\n  SliderOutput,\n  SliderStateContext,\n  SliderThumb,\n  SliderTrack,\n  TextContext\n} from \"react-aria-components\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { Description, Label } from \"./field\"\nimport { cr } from \"./primitive\"\n\nconst sliderStyles = tv({\n  slots: {\n    root: \"flex disabled:opacity-50 flex-col gap-2 orientation-horizontal:w-full orientation-vertical:h-56 orientation-vertical:items-center\",\n    track: [\n      \"relative group/track rounded-full bg-zinc-200 dark:bg-zinc-800 cursor-pointer disabled:cursor-default disabled:bg-bg-disabled\",\n      \"grow orientation-vertical:flex-1 orientation-vertical:w-1.5 orientation-horizontal:w-full orientation-horizontal:h-1.5\"\n    ],\n    filler: [\n      \"rounded-full bg-primary group-disabled/track:bg-bg-disabled\",\n      \"pointer-events-none absolute group-orientation-horizontal/top-0 group-orientation-vertical/track:w-full group-orientation-vertical/track:bottom-0 group-orientation-horizontal/track:h-full\"\n    ],\n    thumb: [\n      \"outline-none dragging:cursor-grabbing focus:ring-4 border border-zinc-200 focus:ring-primary/20 focus:border-primary focus:outline-none forced-colors:outline-[Highlight]\",\n      \"rounded-full bg-white transition-[width,height]\",\n      \"absolute left-[50%] top-[50%] block !-translate-x-1/2 !-translate-y-1/2\",\n      \"disabled:bg-bg-disabled disabled:border disabled:border-bg\",\n      \"orientation-vertical:w-2 orientation-horizontal:h-2\",\n      \"size-[1.15rem] dragging:size-[1.30rem] dragging:border-primary\"\n    ],\n    valueLabel: \"text-muted-fg tabular-nums text-sm\"\n  }\n})\n\nconst { track, filler, thumb, root, valueLabel } = sliderStyles()\n\ntype SliderRootProps = SliderPrimitiveProps\n\nconst Root = (props: SliderPrimitiveProps) => {\n  const descriptionId = useSlotId()\n  return (\n    <TextContext.Provider value={{ slots: { description: { id: descriptionId } } }}>\n      <SliderPrimitive\n        data-slot=\"root\"\n        aria-describedby={descriptionId}\n        {...props}\n        className={cr(props.className, (className) => root({ className }))}\n      />\n    </TextContext.Provider>\n  )\n}\n\ninterface SliderProps extends SliderRootProps, VariantProps<typeof sliderStyles> {\n  label?: LabelProps[\"children\"]\n  description?: TextProps[\"children\"]\n  showValue?: boolean | ((value: number[]) => string)\n}\n\nconst Slider = ({ label, description, showValue = true, ...props }: SliderProps) => (\n  <Root {...props}>\n    <div className=\"flex items-center justify-between gap-2\">\n      {label && <Label>{label}</Label>}\n      {(showValue || typeof showValue === \"function\") && (\n        <Output>\n          {({ state }) => (typeof showValue === \"function\" ? showValue(state.values) : undefined)}\n        </Output>\n      )}\n    </div>\n    <Controls />\n    {description && <Description>{description}</Description>}\n  </Root>\n)\n\nconst Controls = (props: SliderTrackProps) => {\n  const state = React.useContext(SliderStateContext)\n  return (\n    <Track {...props}>\n      <Filler />\n      {state?.values.map((_, i) => <Thumb key={i} index={i} />)}\n    </Track>\n  )\n}\n\nconst Track = (props: SliderTrackProps) => {\n  return (\n    <SliderTrack {...props} className={cr(props.className, (className) => track({ className }))} />\n  )\n}\n\nconst Filler = (props: React.HTMLAttributes<HTMLDivElement>) => {\n  const state = React.useContext(SliderStateContext)\n  const { orientation, getThumbPercent, values } = state || {}\n\n  const getStyle = () => {\n    const percent0 = getThumbPercent ? getThumbPercent(0) * 100 : 0\n    const percent1 = getThumbPercent ? getThumbPercent(1) * 100 : 0\n\n    if (values?.length === 1) {\n      return orientation === \"horizontal\" ? { width: `${percent0}%` } : { height: `${percent0}%` }\n    }\n\n    return orientation === \"horizontal\"\n      ? { left: `${percent0}%`, width: `${Math.abs(percent0 - percent1)}%` }\n      : { bottom: `${percent0}%`, height: `${Math.abs(percent0 - percent1)}%` }\n  }\n\n  return <div {...props} style={getStyle()} className={filler({ className: props.className })} />\n}\n\nconst Thumb = ({ className, ...props }: SliderThumbProps) => {\n  return <SliderThumb {...props} className={cr(className, (className) => thumb({ className }))} />\n}\n\nconst Output = ({ className, ...props }: SliderOutputProps) => {\n  return (\n    <SliderOutput {...props} className={cr(className, (className) => valueLabel({ className }))}>\n      {cr(\n        props.children,\n        (children, { state }) =>\n          children ?? state.values.map((_, i) => state.getThumbValueLabel(i)).join(\" - \")\n      )}\n    </SliderOutput>\n  )\n}\n\nSlider.Controls = Controls\nSlider.Filler = Filler\nSlider.Root = Root\nSlider.Thumb = Thumb\nSlider.Track = Track\nSlider.Output = Output\nexport { Slider }\n",
    "type": "ui"
  },
  "popover": {
    "component": "@/components/ui/popover",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type {\n  DialogTriggerProps,\n  ModalOverlayProps,\n  PopoverProps as PopoverPrimitiveProps\n} from \"react-aria-components\"\nimport {\n  type DialogProps,\n  DialogTrigger,\n  Modal,\n  ModalOverlay,\n  OverlayArrow,\n  Popover as PopoverPrimitive,\n  PopoverContext,\n  useSlottedContext\n} from \"react-aria-components\"\nimport { twJoin } from \"tailwind-merge\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Dialog } from \"./dialog\"\nimport { cn, cr, useMediaQuery } from \"./primitive\"\n\nconst Popover = ({ children, ...props }: DialogTriggerProps) => {\n  return <DialogTrigger {...props}>{children}</DialogTrigger>\n}\n\nconst Title = ({ level = 2, className, ...props }: React.ComponentProps<typeof Dialog.Title>) => (\n  <Dialog.Title\n    className={cn(\"sm:leading-none\", level === 2 && \"sm:text-lg\", className)}\n    {...props}\n  />\n)\n\nconst Header = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <Dialog.Header className={cn(\"p-0 sm:pt-0\", className)} {...props} />\n)\n\nconst Footer = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <Dialog.Footer className={cn(\"pb-0 pt-4 sm:pb-0\", className)} {...props} />\n)\n\nconst Body = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <Dialog.Body className={cn(\"sm:p-0\", className)} {...props} />\n)\n\nconst popoverContentStyles = tv({\n  base: [\n    \"max-w-xs min-w-80 p-4 rounded-xl border bg-overlay bg-clip-padding text-overlay-fg shadow-sm dark:backdrop-saturate-200 lg:text-sm sm:max-w-3xl forced-colors:bg-[Canvas] [&::-webkit-scrollbar]:size-0.5 [scrollbar-width:thin]\"\n  ],\n  variants: {\n    isMenu: {\n      true: {\n        true: \"p-0\"\n      }\n    },\n    isEntering: {\n      true: [\n        \"duration-50 ease-out animate-in fade-in placement-left:slide-in-from-right-1 placement-right:slide-in-from-left-1 placement-top:slide-in-from-bottom-1 placement-bottom:slide-in-from-top-1\"\n      ]\n    },\n    isExiting: {\n      true: \"duration-50 ease-in animate-out fade-out placement-left:slide-out-to-right-1 placement-right:slide-out-to-left-1 placement-top:slide-out-to-bottom-1 placement-bottom:slide-out-to-top-1\"\n    }\n  }\n})\n\nconst drawerStyles = tv({\n  base: [\n    \"fixed max-h-full bottom-0 top-auto z-50 w-full bg-overlay max-w-2xl border border-b-transparent outline-none\"\n  ],\n  variants: {\n    isMenu: {\n      true: \"p-0 [&_[role=dialog]]:px-0 rounded-t-xl\",\n      false: \"py-4 rounded-t-2xl\"\n    },\n    isEntering: {\n      true: [\n        \"[will-change:transform] [transition:transform_0.5s_cubic-bezier(0.32,_0.72,_0,_1)]\",\n        \"animate-in duration-200 fade-in-0 slide-in-from-bottom-56\",\n        \"[transition:translate3d(0,_100%,_0)]\",\n        \"sm:slide-in-from-bottom-auto sm:slide-in-from-top-[20%]\"\n      ]\n    },\n    isExiting: {\n      true: \"duration-200 ease-in animate-out slide-out-to-bottom-56\"\n    }\n  }\n})\n\ninterface PopoverProps\n  extends Omit<React.ComponentProps<typeof Modal>, \"children\">,\n    Omit<PopoverPrimitiveProps, \"children\" | \"className\">,\n    Omit<ModalOverlayProps, \"className\"> {\n  children: React.ReactNode\n  showArrow?: boolean\n  style?: React.CSSProperties\n  respectScreen?: boolean\n  \"aria-label\"?: DialogProps[\"aria-label\"]\n  \"aria-labelledby\"?: DialogProps[\"aria-labelledby\"]\n  className?: string | ((values: { defaultClassName?: string }) => string)\n}\n\nconst Content = ({\n  respectScreen = true,\n  children,\n  showArrow = true,\n  className,\n  ...props\n}: PopoverProps) => {\n  const isMobile = useMediaQuery(\"(max-width: 600px)\")\n  const popoverContext = useSlottedContext(PopoverContext)!\n  const isMenuTrigger = popoverContext?.trigger === \"MenuTrigger\"\n  const isSubmenuTrigger = popoverContext?.trigger === \"SubmenuTrigger\"\n  const isMenu = isMenuTrigger || isSubmenuTrigger\n  const offset = showArrow ? 12 : 8\n  const effectiveOffset = isSubmenuTrigger ? offset - 5 : offset\n  return isMobile && respectScreen ? (\n    <ModalOverlay\n      className={twJoin(\n        \"fixed left-0 top-0 isolate z-50 h-[--visual-viewport-height] w-full bg-overlay/10 [--visual-viewport-vertical-padding:16px]\",\n        isSubmenuTrigger ? \"bg-overlay/10\" : \"\"\n      )}\n      {...props}\n      isDismissable\n    >\n      <Modal\n        className={cr(className, (className, renderProps) =>\n          drawerStyles({ ...renderProps, isMenu, className })\n        )}\n      >\n        <Dialog\n          aria-label={isMenu ? \"Menu\" : props[\"aria-label\"]}\n          className=\"touch-none focus:outline-none\"\n        >\n          {children}\n        </Dialog>\n      </Modal>\n    </ModalOverlay>\n  ) : (\n    <PopoverPrimitive\n      offset={effectiveOffset}\n      {...props}\n      className={cr(className, (className, renderProps) =>\n        popoverContentStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    >\n      {showArrow && (\n        <OverlayArrow className=\"group\">\n          <svg\n            width={12}\n            height={12}\n            viewBox=\"0 0 12 12\"\n            className=\"block fill-overlay stroke-border group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180 forced-colors:fill-[Canvas] forced-colors:stroke-[ButtonBorder]\"\n          >\n            <path d=\"M0 0 L6 6 L12 0\" />\n          </svg>\n        </OverlayArrow>\n      )}\n      {children}\n    </PopoverPrimitive>\n  )\n}\n\nconst Picker = ({ children, className, ...props }: PopoverProps) => {\n  return (\n    <PopoverPrimitive\n      {...props}\n      className={cr(className as PopoverPrimitiveProps[\"className\"], (className, renderProps) =>\n        popoverContentStyles({\n          ...renderProps,\n          className: cn(\"max-h-72 min-w-[--trigger-width] overflow-y-auto p-0\", className)\n        })\n      )}\n    >\n      {children}\n    </PopoverPrimitive>\n  )\n}\n\nPopover.Primitive = PopoverPrimitive\nPopover.Trigger = Dialog.Trigger\nPopover.Close = Dialog.Close\nPopover.Content = Content\nPopover.Description = Dialog.Description\nPopover.Body = Body\nPopover.Footer = Footer\nPopover.Header = Header\nPopover.Picker = Picker\nPopover.Title = Title\n\nexport { Popover, drawerStyles, popoverContentStyles }\n",
    "type": "ui"
  },
  "text-field": {
    "component": "@/components/ui/text-field",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type { TextInputDOMProps } from \"@react-types/shared\"\nimport { IconEye, IconEyeClosed } from \"justd-icons\"\nimport {\n  Button as ButtonPrimitive,\n  TextField as TextFieldPrimitive,\n  type TextFieldProps as TextFieldPrimitiveProps\n} from \"react-aria-components\"\n\nimport type { FieldProps } from \"./field\"\nimport { Description, FieldError, FieldGroup, Input, Label } from \"./field\"\nimport { Loader } from \"./loader\"\nimport { ctr } from \"./primitive\"\n\ntype InputType = Exclude<TextInputDOMProps[\"type\"], \"password\">\n\ninterface BaseTextFieldProps extends TextFieldPrimitiveProps, FieldProps {\n  prefix?: React.ReactNode\n  suffix?: React.ReactNode\n  isPending?: boolean\n  className?: string\n}\n\ninterface RevealableTextFieldProps extends BaseTextFieldProps {\n  isRevealable: true\n  type: \"password\"\n}\n\ninterface NonRevealableTextFieldProps extends BaseTextFieldProps {\n  isRevealable?: never\n  type?: InputType\n}\n\ntype TextFieldProps = RevealableTextFieldProps | NonRevealableTextFieldProps\n\nconst TextField = ({\n  placeholder,\n  label,\n  description,\n  errorMessage,\n  prefix,\n  suffix,\n  isPending,\n  className,\n  isRevealable,\n  type,\n  ...props\n}: TextFieldProps) => {\n  const [isPasswordVisible, setIsPasswordVisible] = React.useState(false)\n  const inputType = isRevealable ? (isPasswordVisible ? \"text\" : \"password\") : type\n\n  const handleTogglePasswordVisibility = () => {\n    setIsPasswordVisible((prev) => !prev)\n  }\n  return (\n    <TextFieldPrimitive\n      type={inputType}\n      {...props}\n      className={ctr(className, \"group flex flex-col gap-y-1.5\")}\n    >\n      {label && <Label>{label}</Label>}\n      <FieldGroup data-loading={isPending ? \"true\" : undefined}>\n        {prefix ? (\n          <span data-slot=\"prefix\" className=\"atrs x2e2\">\n            {prefix}\n          </span>\n        ) : null}\n        <Input placeholder={placeholder} />\n        {isRevealable ? (\n          <ButtonPrimitive\n            type=\"button\"\n            aria-label=\"Toggle password visibility\"\n            onPress={handleTogglePasswordVisibility}\n            className=\"mr-2.5 relative [&>[data-slot=icon]]:text-muted-fg focus:outline-none focus-visible:ring-1 focus-visible:ring-primary rounded\"\n          >\n            <>{isPasswordVisible ? <IconEyeClosed /> : <IconEye />}</>\n          </ButtonPrimitive>\n        ) : isPending ? (\n          <Loader variant=\"spin\" data-slot=\"suffix\" />\n        ) : suffix ? (\n          <span data-slot=\"suffix\">{suffix}</span>\n        ) : null}\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </TextFieldPrimitive>\n  )\n}\n\nexport { TextField, TextFieldPrimitive, type TextFieldProps }\n",
    "type": "ui"
  },
  "loader": {
    "component": "@/components/ui/loader",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconLoader } from \"justd-icons\"\nimport { ProgressBar } from \"react-aria-components\"\nimport type { VariantProps } from \"tailwind-variants\"\nimport { tv } from \"tailwind-variants\"\n\nimport { cn } from \"./primitive\"\n\nconst loaderStyles = tv({\n  base: \"relative\",\n  variants: {\n    intent: {\n      current: \"text-current\",\n      primary: \"text-primary\",\n      secondary: \"text-muted-fg\",\n      success: \"text-success\",\n      warning: \"text-warning\",\n      danger: \"text-danger\"\n    },\n    size: {\n      small: \"size-4\",\n      medium: \"size-6\",\n      large: \"size-8\",\n      \"extra-large\": \"size-10\"\n    }\n  },\n  defaultVariants: {\n    intent: \"current\",\n    size: \"small\"\n  }\n})\n\ntype LoaderVariantProps = VariantProps<typeof loaderStyles>\n\nconst Bars = ({ className, ...props }: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    className={cn(\"size-4\", className)}\n    data-slot=\"icon\"\n    viewBox=\"0 0 135 140\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"currentColor\"\n    {...props}\n  >\n    <rect y=\"10\" width=\"15\" height=\"120\" rx=\"6\">\n      <animate\n        attributeName=\"height\"\n        begin=\"0.5s\"\n        dur=\"1s\"\n        values=\"120;110;100;90;80;70;60;50;40;140;120\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n      <animate\n        attributeName=\"y\"\n        begin=\"0.5s\"\n        dur=\"1s\"\n        values=\"10;15;20;25;30;35;40;45;50;0;10\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n    </rect>\n    <rect x=\"30\" y=\"10\" width=\"15\" height=\"120\" rx=\"6\">\n      <animate\n        attributeName=\"height\"\n        begin=\"0.25s\"\n        dur=\"1s\"\n        values=\"120;110;100;90;80;70;60;50;40;140;120\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n      <animate\n        attributeName=\"y\"\n        begin=\"0.25s\"\n        dur=\"1s\"\n        values=\"10;15;20;25;30;35;40;45;50;0;10\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n    </rect>\n    <rect x=\"60\" width=\"15\" height=\"140\" rx=\"6\">\n      <animate\n        attributeName=\"height\"\n        begin=\"0s\"\n        dur=\"1s\"\n        values=\"120;110;100;90;80;70;60;50;40;140;120\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n      <animate\n        attributeName=\"y\"\n        begin=\"0s\"\n        dur=\"1s\"\n        values=\"10;15;20;25;30;35;40;45;50;0;10\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n    </rect>\n    <rect x=\"90\" y=\"10\" width=\"15\" height=\"120\" rx=\"6\">\n      <animate\n        attributeName=\"height\"\n        begin=\"0.25s\"\n        dur=\"1s\"\n        values=\"120;110;100;90;80;70;60;50;40;140;120\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n      <animate\n        attributeName=\"y\"\n        begin=\"0.25s\"\n        dur=\"1s\"\n        values=\"10;15;20;25;30;35;40;45;50;0;10\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n    </rect>\n    <rect x=\"120\" y=\"10\" width=\"15\" height=\"120\" rx=\"6\">\n      <animate\n        attributeName=\"height\"\n        begin=\"0.5s\"\n        dur=\"1s\"\n        values=\"120;110;100;90;80;70;60;50;40;140;120\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n      <animate\n        attributeName=\"y\"\n        begin=\"0.5s\"\n        dur=\"1s\"\n        values=\"10;15;20;25;30;35;40;45;50;0;10\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n    </rect>\n  </svg>\n)\nconst Ring = (props: React.SVGProps<SVGSVGElement>) => <IconLoader {...props} />\nconst Spin = ({ className, ...props }: React.SVGProps<SVGSVGElement>) => (\n  <svg className={cn(\"size-4\", className)} data-slot=\"icon\" viewBox=\"0 0 2400 2400\" {...props}>\n    <g strokeWidth=\"200\" strokeLinecap=\"round\" fill=\"none\">\n      <line x1=\"1200\" y1=\"600\" x2=\"1200\" y2=\"100\" />\n      <line opacity=\"0.5\" x1=\"1200\" y1=\"2300\" x2=\"1200\" y2=\"1800\" />\n      <line opacity=\"0.917\" x1=\"900\" y1=\"680.4\" x2=\"650\" y2=\"247.4\" />\n      <line opacity=\"0.417\" x1=\"1750\" y1=\"2152.6\" x2=\"1500\" y2=\"1719.6\" />\n      <line opacity=\"0.833\" x1=\"680.4\" y1=\"900\" x2=\"247.4\" y2=\"650\" />\n      <line opacity=\"0.333\" x1=\"2152.6\" y1=\"1750\" x2=\"1719.6\" y2=\"1500\" />\n      <line opacity=\"0.75\" x1=\"600\" y1=\"1200\" x2=\"100\" y2=\"1200\" />\n      <line opacity=\"0.25\" x1=\"2300\" y1=\"1200\" x2=\"1800\" y2=\"1200\" />\n      <line opacity=\"0.667\" x1=\"680.4\" y1=\"1500\" x2=\"247.4\" y2=\"1750\" />\n      <line opacity=\"0.167\" x1=\"2152.6\" y1=\"650\" x2=\"1719.6\" y2=\"900\" />\n      <line opacity=\"0.583\" x1=\"900\" y1=\"1719.6\" x2=\"650\" y2=\"2152.6\" />\n      <line opacity=\"0.083\" x1=\"1750\" y1=\"247.4\" x2=\"1500\" y2=\"680.4\" />\n      <animateTransform\n        attributeName=\"transform\"\n        attributeType=\"XML\"\n        type=\"rotate\"\n        keyTimes=\"0;0.08333;0.16667;0.25;0.33333;0.41667;0.5;0.58333;0.66667;0.75;0.83333;0.91667\"\n        values=\"0 1199 1199;30 1199 1199;60 1199 1199;90 1199 1199;120 1199 1199;150 1199 1199;180 1199 1199;210 1199 1199;240 1199 1199;270 1199 1199;300 1199 1199;330 1199 1199\"\n        dur=\"0.83333s\"\n        begin=\"0.08333s\"\n        repeatCount=\"indefinite\"\n        calcMode=\"discrete\"\n      />\n    </g>\n  </svg>\n)\n\nconst LOADERS = {\n  bars: Bars,\n  ring: Ring,\n  spin: Spin\n}\n\nconst DEFAULT_SPINNER = \"ring\"\n\ninterface LoaderProps\n  extends Omit<React.ComponentPropsWithoutRef<\"svg\">, \"display\" | \"opacity\" | \"intent\">,\n    LoaderVariantProps {\n  variant?: keyof typeof LOADERS\n  percentage?: number\n  isIndeterminate?: boolean\n  formatOptions?: Intl.NumberFormatOptions\n}\n\nconst Loader = React.forwardRef<SVGSVGElement, LoaderProps>(\n  ({ isIndeterminate = true, ...props }, ref) => {\n    const { className, variant = DEFAULT_SPINNER, intent, size, ...spinnerProps } = props\n    const LoaderPrimitive = LOADERS[variant in LOADERS ? variant : DEFAULT_SPINNER]\n\n    return (\n      <ProgressBar\n        aria-label={props[\"aria-label\"] ?? \"Loading...\"}\n        formatOptions={props.formatOptions}\n        isIndeterminate={isIndeterminate}\n      >\n        <LoaderPrimitive\n          role=\"presentation\"\n          className={loaderStyles({\n            intent,\n            size,\n            className: cn([\n              [\"ring\"].includes(variant) && \"animate-spin\",\n              variant === \"spin\" && \"stroke-current\",\n              className\n            ])\n          })}\n          ref={ref}\n          {...spinnerProps}\n        />\n      </ProgressBar>\n    )\n  }\n)\nLoader.displayName = \"Loader\"\n\nexport { Loader }\n",
    "type": "ui"
  },
  "radio": {
    "component": "@/components/ui/radio",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type {\n  RadioGroupProps as RadioGroupPrimitiveProps,\n  RadioProps as RadioPrimitiveProps,\n  ValidationResult\n} from \"react-aria-components\"\nimport { Radio as RadioPrimitive, RadioGroup as RadioGroupPrimitive } from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Description, FieldError, Label } from \"./field\"\nimport { ctr } from \"./primitive\"\n\ninterface RadioGroupProps extends Omit<RadioGroupPrimitiveProps, \"children\"> {\n  label?: string\n  children?: React.ReactNode\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst RadioGroup = ({ label, description, errorMessage, children, ...props }: RadioGroupProps) => {\n  return (\n    <RadioGroupPrimitive {...props} className={ctr(props.className, \"group flex flex-col gap-2\")}>\n      {label && <Label>{label}</Label>}\n      <div className=\"flex select-none gap-2 group-orientation-horizontal:flex-wrap group-orientation-horizontal:gap-2 sm:group-orientation-horizontal:gap-4 group-orientation-vertical:flex-col\">\n        {children}\n      </div>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </RadioGroupPrimitive>\n  )\n}\n\nconst radioStyles = tv({\n  base: \"size-4 shrink-0 rounded-full border bg-secondary transition\",\n  variants: {\n    isSelected: {\n      false: \"border-toggle\",\n      true: \"border-[4.5px] border-primary\"\n    },\n    isFocused: {\n      true: [\n        \"border-primary bg-primary/20 ring-4 ring-primary/20\",\n        \"group-invalid:border-danger/70 group-invalid:bg-danger/20 group-invalid:ring-danger/20\"\n      ]\n    },\n    isInvalid: {\n      true: \"border-danger/70 bg-danger/20\"\n    },\n    isDisabled: {\n      true: \"opacity-50\"\n    }\n  }\n})\n\ninterface RadioProps extends RadioPrimitiveProps {\n  description?: string\n}\n\nconst Radio = ({ description, ...props }: RadioProps) => {\n  return (\n    <>\n      <RadioPrimitive\n        {...props}\n        className={ctr(\n          props.className,\n          \"group flex items-center gap-2 text-sm text-fg transition disabled:text-fg/50 forced-colors:disabled:text-[GrayText]\"\n        )}\n      >\n        {(renderProps) => (\n          <div className=\"flex gap-2\">\n            <div\n              className={radioStyles({\n                ...renderProps,\n                className: \"description\" in props ? \"mt-1\" : \"mt-0.5\"\n              })}\n            />\n            <div className=\"flex flex-col gap-1\">\n              {props.children as React.ReactNode}\n              {description && <Description className=\"block\">{description}</Description>}\n            </div>\n          </div>\n        )}\n      </RadioPrimitive>\n    </>\n  )\n}\n\nexport { Radio, RadioGroup, radioStyles }\n",
    "type": "ui"
  },
  "date-field": {
    "component": "@/components/ui/date-field",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport {\n  DateField as DateFieldPrimitive,\n  type DateFieldProps as DateFieldPrimitiveProps,\n  DateInput as DateInputPrimitive,\n  type DateInputProps,\n  DateSegment,\n  type DateValue,\n  type ValidationResult\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Description, FieldError, FieldGroup, Label } from \"./field\"\nimport { cn, ctr } from \"./primitive\"\n\ninterface DateFieldProps<T extends DateValue> extends DateFieldPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  prefix?: React.ReactNode\n  suffix?: React.ReactNode\n}\n\nconst DateField = <T extends DateValue>({\n  prefix,\n  suffix,\n  label,\n  description,\n  errorMessage,\n  ...props\n}: DateFieldProps<T>) => {\n  return (\n    <DateFieldPrimitive\n      {...props}\n      className={ctr(props.className, \"flex group flex-col gap-y-1.5\")}\n    >\n      {label && <Label>{label}</Label>}\n      <FieldGroup>\n        {prefix ? <span data-slot=\"prefix\">{prefix}</span> : null}\n        <DateInput />\n        {suffix ? <span data-slot=\"suffix\">{suffix}</span> : null}\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </DateFieldPrimitive>\n  )\n}\n\nconst segmentStyles = tv({\n  base: \"inline shrink-0 sm:uppercase tabular-nums rounded p-0.5 tracking-wider text-fg caret-transparent outline outline-0 forced-color-adjust-none type-literal:px-0 lg:text-sm forced-colors:text-[ButtonText]\",\n  variants: {\n    isPlaceholder: {\n      true: \"text-muted-fg\"\n    },\n    isDisabled: {\n      true: \"text-fg/50 forced-colors:text-[GrayText]\"\n    },\n    isFocused: {\n      true: [\n        \"bg-primary text-primary-fg forced-colors:bg-[Highlight] forced-colors:text-[HighlightText]\",\n        \"invalid:bg-danger invalid:text-danger-fg\"\n      ]\n    }\n  }\n})\n\nconst DateInput = ({ className, ...props }: Omit<DateInputProps, \"children\">) => {\n  return (\n    <DateInputPrimitive\n      className={cn(\n        \"bg-transparent p-2 text-base text-fg placeholder-muted-fg lg:text-sm\",\n        className\n      )}\n      {...props}\n    >\n      {(segment) => <DateSegment segment={segment} className={segmentStyles} />}\n    </DateInputPrimitive>\n  )\n}\n\nexport { DateField, DateInput, segmentStyles, type DateFieldProps }\n",
    "type": "ui"
  },
  "primitive": {
    "component": "@/components/ui/primitive",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { type ClassValue, clsx } from \"clsx\"\nimport { composeRenderProps } from \"react-aria-components\"\nimport { twMerge } from \"tailwind-merge\"\nimport { tv } from \"tailwind-variants\"\n\nconst cn = (...inputs: ClassValue[]) => twMerge(clsx(inputs))\n\nfunction composeTailwindRenderProps<T>(\n  className: string | ((v: T) => string) | undefined,\n  tw: string | Array<string | undefined>\n): string | ((v: T) => string) {\n  return composeRenderProps(className, (className) => twMerge(tw, className))\n}\n\nconst focusRing = tv({\n  base: \"outline-none focus:outline-none forced-colors:outline-1 forced-colors:outline-[Highlight]\",\n  variants: {\n    isFocused: { true: \"ring-4 ring-ring/20\" },\n    isInvalid: { true: \"ring-4 ring-danger/20\" }\n  }\n})\n\nconst focusStyles = tv({\n  extend: focusRing,\n  variants: {\n    isFocused: { true: \"border-ring/85\" },\n    isInvalid: { true: \"border-danger\" }\n  }\n})\n\nconst focusButtonStyles = tv({\n  base: \"outline outline-ring forced-colors:outline-[Highlight] outline-offset-2\",\n  variants: {\n    isFocusVisible: {\n      false: \"outline-0\",\n      true: \"outline-2\"\n    }\n  }\n})\n\nconst useMediaQuery = (query: string) => {\n  const [value, setValue] = React.useState(false)\n\n  React.useEffect(() => {\n    const onChange = (event: MediaQueryListEvent) => {\n      setValue(event.matches)\n    }\n\n    const result = matchMedia(query)\n    result.addEventListener(\"change\", onChange)\n    setValue(result.matches)\n\n    return () => result.removeEventListener(\"change\", onChange)\n  }, [query])\n\n  return value\n}\n\nexport {\n  cn,\n  composeTailwindRenderProps,\n  composeTailwindRenderProps as ctr,\n  composeRenderProps as cr,\n  focusRing,\n  focusStyles,\n  focusButtonStyles,\n  useMediaQuery\n}\n",
    "type": "ui"
  },
  "visually-hidden": {
    "component": "@/components/ui/visually-hidden",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { useVisuallyHidden } from \"react-aria\"\n\ntype VisuallyHiddenSpanProps = {\n  children: React.ReactNode\n}\n\nconst VisuallyHidden = ({ children }: VisuallyHiddenSpanProps) => {\n  const { visuallyHiddenProps } = useVisuallyHidden()\n\n  return <span {...visuallyHiddenProps}>{children}</span>\n}\n\nexport { VisuallyHidden }\n",
    "type": "ui"
  },
  "date-picker": {
    "component": "@/components/ui/date-picker",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconCalendarDays } from \"justd-icons\"\nimport {\n  DatePicker as DatePickerPrimitive,\n  type DatePickerProps as DatePickerPrimitiveProps,\n  type DateValue,\n  type DialogProps,\n  type PopoverProps,\n  type ValidationResult\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Button } from \"./button\"\nimport { Calendar } from \"./calendar\"\nimport { DateInput } from \"./date-field\"\nimport { Description, FieldError, FieldGroup, Label } from \"./field\"\nimport { Popover } from \"./popover\"\nimport { ctr } from \"./primitive\"\nimport { RangeCalendar } from \"./range-calendar\"\n\nconst datePickerStyles = tv({\n  slots: {\n    base: \"group flex flex-col gap-y-1.5\",\n    datePickerIcon:\n      \"group mr-1 h-7 [&_[data-slot=icon]]:text-muted-fg w-8 rounded outline-offset-0 hover:bg-transparent pressed:bg-transparent\",\n    calendarIcon: \"group-open:text-fg\",\n    datePickerInput: \"w-full px-2 text-base lg:text-sm\",\n    dateRangePickerInputStart: \"px-2 lg:text-sm text-base\",\n    dateRangePickerInputEnd: \"flex-1 px-2 py-1.5 lg:text-sm text-base\",\n    dateRangePickerDash:\n      \"text-fg group-disabled:opacity-50 forced-colors:text-[ButtonText] group-disabled:forced-colors:text-[GrayText]\"\n  }\n})\n\nconst { base, datePickerIcon, calendarIcon, datePickerInput } = datePickerStyles()\n\ninterface DatePickerOverlayProps\n  extends Omit<DialogProps, \"children\" | \"className\" | \"style\">,\n    Omit<PopoverProps, \"children\" | \"className\" | \"style\"> {\n  className?: string | ((values: { defaultClassName?: string }) => string)\n  children?: React.ReactNode\n  closeButton?: boolean\n  range?: boolean\n}\n\nconst DatePickerOverlay = ({ closeButton = true, range, ...props }: DatePickerOverlayProps) => {\n  return (\n    <Popover.Content\n      showArrow={false}\n      className=\"flex justify-center p-4 sm:p-2 sm:pt-3 sm:max-w-[17.2rem] sm:min-w-[17rem]\"\n      {...props}\n    >\n      {range ? <RangeCalendar /> : <Calendar />}\n      {closeButton && (\n        <div className=\"sm:hidden py-2.5 flex justify-center mx-auto w-full max-w-[inherit]\">\n          <Popover.Close shape=\"circle\" className=\"w-full\">\n            Close\n          </Popover.Close>\n        </div>\n      )}\n    </Popover.Content>\n  )\n}\n\nconst DatePickerIcon = () => (\n  <Button size=\"square-petite\" appearance=\"plain\" className={datePickerIcon()}>\n    <IconCalendarDays aria-hidden className={calendarIcon()} />\n  </Button>\n)\n\ninterface DatePickerProps<T extends DateValue> extends DatePickerPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst DatePicker = <T extends DateValue>({\n  label,\n  className,\n  description,\n  errorMessage,\n  ...props\n}: DatePickerProps<T>) => {\n  return (\n    <DatePickerPrimitive {...props} className={ctr(className, base())}>\n      {label && <Label>{label}</Label>}\n      <FieldGroup className=\"min-w-40\">\n        <DateInput className={datePickerInput()} />\n        <DatePickerIcon />\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n      <DatePickerOverlay />\n    </DatePickerPrimitive>\n  )\n}\n\nexport {\n  DatePicker,\n  DatePickerIcon,\n  DatePickerOverlay,\n  type DatePickerProps,\n  type DateValue,\n  type ValidationResult\n}\n",
    "type": "ui"
  },
  "disclosure": {
    "component": "@/components/ui/disclosure",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconChevronLeft } from \"justd-icons\"\nimport type {\n  ButtonProps,\n  DisclosureGroupProps as DisclosureGroupPrimitiveProps,\n  DisclosurePanelProps,\n  DisclosureProps\n} from \"react-aria-components\"\nimport {\n  Button,\n  Disclosure as DisclosurePrimitive,\n  DisclosureGroup as DisclosureGroupPrimitive,\n  DisclosurePanel\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { cn, cr } from \"./primitive\"\n\ninterface DisclosureGroupProps extends DisclosureGroupPrimitiveProps {\n  hideBorder?: boolean\n  hideIndicator?: boolean\n  className?: string\n}\n\nconst DisclosureGroupContext = React.createContext<DisclosureGroupProps>({})\n\nconst DisclosureGroup = ({\n  children,\n  hideIndicator,\n  hideBorder,\n  className,\n  ...props\n}: DisclosureGroupProps) => {\n  return (\n    <DisclosureGroupPrimitive\n      {...props}\n      className={({ isDisabled }) =>\n        cn([\n          isDisabled ? \"cursor-not-allowed opacity-75\" : \"cursor-pointer\",\n          hideBorder\n            ? \"[&_[data-slot=accordion-item]]:border-none\"\n            : \"[&_[data-slot=accordion-item]]:border-b\"\n        ])\n      }\n    >\n      {(values) => (\n        <div data-slot=\"accordion-item-content\" className={className}>\n          <DisclosureGroupContext.Provider value={{ hideIndicator, hideBorder }}>\n            {typeof children === \"function\" ? children(values) : children}\n          </DisclosureGroupContext.Provider>\n        </div>\n      )}\n    </DisclosureGroupPrimitive>\n  )\n}\n\nconst disclosureStyles = tv({\n  base: \"flex group relative w-full flex-col\",\n  variants: {\n    isDisabled: {\n      true: \"cursor-not-allowed opacity-75\"\n    },\n    isExpanded: {\n      true: \"pb-3\"\n    }\n  },\n  compoundVariants: [\n    {\n      hideBorder: true,\n      isExpanded: true,\n      className: \"pb-2\"\n    }\n  ]\n})\n\nconst Disclosure = ({ className, ...props }: DisclosureProps) => {\n  return (\n    <DisclosurePrimitive\n      data-slot=\"accordion-item\"\n      {...props}\n      className={cr(className, (className, renderProps) =>\n        disclosureStyles({ ...renderProps, className })\n      )}\n    >\n      {props.children}\n    </DisclosurePrimitive>\n  )\n}\n\nconst accordionTriggerStyles = tv({\n  base: [\n    \"flex flex-1 group rounded-lg aria-expanded:text-fg text-muted-fg sm:text-sm items-center gap-x-2 font-medium\"\n  ],\n  variants: {\n    hideBorder: {\n      true: \"py-2\",\n      false: \"py-3\"\n    },\n    isFocused: {\n      true: \"outline-none text-fg\"\n    },\n    isOpen: {\n      true: \"text-fg\"\n    },\n    isDisabled: {\n      true: \"opacity-50 cursor-default\"\n    }\n  }\n})\n\nconst Trigger = ({ className, ...props }: ButtonProps) => {\n  const { hideIndicator, hideBorder } = React.useContext(DisclosureGroupContext)\n  return (\n    <Button\n      {...props}\n      slot=\"trigger\"\n      className={cr(className, (className, renderProps) =>\n        accordionTriggerStyles({\n          ...renderProps,\n          hideBorder,\n          className\n        })\n      )}\n    >\n      {(values) => (\n        <>\n          {typeof props.children === \"function\" ? props.children(values) : props.children}\n          {!hideIndicator && (\n            <IconChevronLeft\n              className={cn(\n                \"ml-auto transition shrink-0 duration-300 group-aria-expanded:-rotate-90\"\n              )}\n            />\n          )}\n        </>\n      )}\n    </Button>\n  )\n}\n\nconst Panel = ({ className, ...props }: DisclosurePanelProps) => {\n  return (\n    <DisclosurePanel {...props} className={cn(\"sm:text-sm\", className)}>\n      {props.children}\n    </DisclosurePanel>\n  )\n}\n\nDisclosure.Trigger = Trigger\nDisclosure.Panel = Panel\n\nexport { DisclosureGroup, Disclosure }\n",
    "type": "ui"
  },
  "container": {
    "component": "@/components/ui/container",
    "raw": "import React from \"react\"\n\nimport { tv } from \"tailwind-variants\"\n\nconst containerStyles = tv({\n  base: \"mx-auto w-full max-w-7xl lg:max-w-screen-xl 2xl:max-w-screen-2xl\",\n  variants: {\n    intent: {\n      constrained: \"sm:px-6 lg:px-8\",\n      \"padded-content\": \"px-4 sm:px-6 lg:px-8\"\n    }\n  },\n  defaultVariants: {\n    intent: \"padded-content\"\n  }\n})\n\ninterface ContainerProps extends React.HTMLAttributes<HTMLDivElement> {\n  intent?: \"constrained\" | \"padded-content\"\n}\n\nconst Container = React.forwardRef<HTMLDivElement, ContainerProps>(\n  ({ className, intent, ...props }, ref) => (\n    <div className={containerStyles({ intent, className })} {...props} ref={ref} />\n  )\n)\n\nContainer.displayName = \"Container\"\n\nexport { Container }\n",
    "type": "ui"
  },
  "input-otp": {
    "component": "@/components/ui/input-otp",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { IconBulletFill } from \"justd-icons\"\n\nimport { cn } from \"./primitive\"\n\ninterface InputOTPType\n  extends React.ForwardRefExoticComponent<\n    React.ComponentPropsWithoutRef<typeof OTPInput> & React.RefAttributes<HTMLInputElement>\n  > {\n  Group: typeof InputOTPGroup\n  Slot: typeof InputOTPSlot\n  Separator: typeof InputOTPSeparator\n}\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    data-1p-ignore\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n)) as InputOTPType\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center gap-x-1.5\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex tabular-nums size-10 items-center justify-center rounded-md border border-input text-sm transition-all\",\n        isActive && \"z-10 border-ring/70 ring-4 ring-ring/20\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-fg duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <IconBulletFill className=\"size-2\" />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nInputOTP.Group = InputOTPGroup\nInputOTP.Slot = InputOTPSlot\nInputOTP.Separator = InputOTPSeparator\n\nexport { InputOTP }\n",
    "type": "ui"
  },
  "chart": {
    "component": "@/components/ui/chart",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { Legend, type LegendProps, ResponsiveContainer as Container, Tooltip } from \"recharts\"\n\nimport { cn } from \"./primitive\"\n\ninterface Theme {\n  readonly light: string\n  readonly dark: string\n}\n\nconst Themes: Theme = { light: \"\", dark: \".dark\" }\n\ninterface ChartConfig {\n  [key: string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n    color?: string\n    theme?: Record<keyof Theme, string>\n  }\n}\n\nconst ChartContext = React.createContext<{ config: ChartConfig } | null>(null)\n\nconst useChart = () => {\n  const context = React.useContext(ChartContext)\n  if (!context) {\n    throw new Error(\"useChart must be used within a <Chart />\")\n  }\n  return context\n}\n\ntype ChartProps = React.ComponentProps<\"div\"> & {\n  config: ChartConfig\n  children: React.ReactElement\n}\n\nconst Chart = React.forwardRef<HTMLDivElement, ChartProps>(\n  ({ id, className, children, config, ...props }, ref) => {\n    const uniqueId = React.useId()\n    const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n    return (\n      <ChartContext.Provider value={{ config }}>\n        <div\n          data-chart={chartId}\n          ref={ref}\n          className={cn(\n            \"flex cks aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-fg [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n            className\n          )}\n          {...props}\n        >\n          <Style id={chartId} config={config} />\n          <Container>{children}</Container>\n        </div>\n      </ChartContext.Provider>\n    )\n  }\n)\nChart.displayName = \"Chart\"\n\ninterface StyleProps {\n  id: string\n  config: ChartConfig\n}\n\nconst Style = ({ id, config }: StyleProps) => {\n  const colorConfig = Object.entries(config).filter(([, config]) => config.theme || config.color)\n  if (!colorConfig.length) return null\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(Themes)\n          .map(\n            ([theme, prefix]) => `\n            ${prefix} [data-chart=${id}] {\n              ${colorConfig\n                .map(([key, itemConfig]) => {\n                  const color =\n                    itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color\n                  return color ? `--color-${key}: ${color};` : null\n                })\n                .filter(Boolean)\n                .join(\"\\n\")}\n            }\n          `\n          )\n          .join(\"\\n\")\n      }}\n    />\n  )\n}\n\nconst TooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) return null\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = resolvePayloadConfig(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>{labelFormatter(value, payload)}</div>\n        )\n      }\n\n      return value ? <div className={cn(\"font-medium\", labelClassName)}>{value}</div> : null\n    }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey])\n\n    if (!active || !payload?.length) return null\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[10rem] items-start gap-1.5 rounded-lg border border-border/60 bg-overlay text-overlay-fg px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = resolvePayloadConfig(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>[data-slot=icon]]:size-2.5 [&>[data-slot=icon]]:text-muted-fg\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"size-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\"\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-fg\">{itemConfig?.label || item.name}</span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-fg\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nTooltipContent.displayName = \"ChartTooltipContent\"\n\ninterface LegendContentProps\n  extends React.ComponentProps<\"div\">,\n    Pick<LegendProps, \"payload\" | \"verticalAlign\"> {\n  hideIcon?: boolean\n  nameKey?: string\n}\n\nconst LegendContent = ({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = \"bottom\",\n  nameKey\n}: LegendContentProps) => {\n  const { config } = useChart()\n\n  if (!payload?.length) return null\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center justify-center gap-4\",\n        verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n        className\n      )}\n    >\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || \"value\"}`\n        const itemConfig = resolvePayloadConfig(config, item, key)\n\n        return (\n          <div\n            key={item.value}\n            className={cn(\n              \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-fg\"\n            )}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{ backgroundColor: item.color }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nconst resolvePayloadConfig = (config: ChartConfig, payload: unknown, key: string) => {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const nestedPayload =\n    \"payload\" in payload && typeof payload.payload === \"object\" && payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (key in payload && typeof payload[key as keyof typeof payload] === \"string\") {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    nestedPayload &&\n    key in nestedPayload &&\n    typeof nestedPayload[key as keyof typeof nestedPayload] === \"string\"\n  ) {\n    configLabelKey = nestedPayload[key as keyof typeof nestedPayload] as string\n  }\n\n  return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config]\n}\n\nconst EnhancedChart = Object.assign(Chart, {\n  Tooltip,\n  TooltipContent,\n  Legend,\n  LegendContent,\n  Style\n})\n\nexport { EnhancedChart as Chart, type ChartConfig }\n",
    "type": "ui"
  },
  "tag-group": {
    "component": "@/components/ui/tag-group",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconX } from \"justd-icons\"\nimport type {\n  TagGroupProps as TagGroupPrimitiveProps,\n  TagListProps,\n  TagProps as TagPrimitiveProps\n} from \"react-aria-components\"\nimport {\n  Button,\n  Tag as TagPrimitive,\n  TagGroup as TagGroupPrimitive,\n  TagList as TagListPrimitive\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { badgeIntents, badgeShapes, badgeStyles } from \"./badge\"\nimport { Description, Label } from \"./field\"\nimport { cn, cr, ctr, focusStyles } from \"./primitive\"\n\nconst intents = {\n  primary: {\n    base: [\n      badgeIntents.primary,\n      \"[&_[slot=remove]:hover]:bg-primary [&_[slot=remove]:hover]:text-primary-fg\"\n    ],\n    selected: [\n      \"bg-primary dark:hover:bg-primary dark:bg-primary hover:bg-primary ring-primary ring-inset text-primary-fg dark:text-primary-fg hover:text-primary-fg\",\n      \"[&_[slot=remove]:hover]:bg-primary-fg/80 [&_[slot=remove]:hover]:text-primary\"\n    ]\n  },\n  secondary: {\n    base: [badgeIntents.secondary, \"[&_[slot=remove]:hover]:bg-fg [&_[slot=remove]:hover]:text-bg\"],\n    selected: [\n      \"bg-fg ring-fg/50 text-bg dark:bg-fg/90 dark:text-secondary ring-inset\",\n      \"[&_[slot=remove]:hover]:bg-bg [&_[slot=remove]:hover]:text-secondary-fg\"\n    ]\n  },\n  success: {\n    base: [\n      badgeIntents.success,\n      \"[&_[slot=remove]:hover]:bg-success [&_[slot=remove]:hover]:text-success-fg\"\n    ],\n    selected: [\n      \"bg-success dark:bg-success ring-success ring-inset dark:text-success-fg dark:hover:bg-success hover:bg-success text-success-fg hover:text-success-fg\",\n      \"[&_[slot=remove]:hover]:bg-success-fg/80 [&_[slot=remove]:hover]:text-success\"\n    ]\n  },\n  warning: {\n    base: [\n      badgeIntents.warning,\n      \"[&_[slot=remove]:hover]:bg-warning [&_[slot=remove]:hover]:text-warning-fg\"\n    ],\n    selected: [\n      \"bg-warning dark:hover:bg-warning dark:bg-warning dark:text-bg hover:bg-warning text-warning-fg hover:text-warning-fg\",\n      \"[&_[slot=remove]:hover]:bg-warning-fg/80 [&_[slot=remove]:hover]:text-warning\"\n    ]\n  },\n  danger: {\n    base: [\n      badgeIntents.danger,\n      \"[&_[slot=remove]:hover]:bg-danger [&_[slot=remove]:hover]:text-danger-fg\"\n    ],\n    selected: [\n      \"bg-danger dark:bg-danger dark:hover:bg-danger/90 hover:bg-danger text-danger-fg ring-danger hover:text-danger-fg\",\n      \"[&_[slot=remove]:hover]:bg-danger-fg/80 [&_[slot=remove]:hover]:text-danger\"\n    ]\n  }\n}\n\ntype RestrictedIntent = \"primary\" | \"secondary\"\n\ntype Intent = \"primary\" | \"secondary\" | \"warning\" | \"danger\" | \"success\"\n\ntype Shape = keyof typeof badgeShapes\n\ntype TagGroupContextValue = {\n  intent: Intent\n  shape: Shape\n}\n\nconst TagGroupContext = React.createContext<TagGroupContextValue>({\n  intent: \"primary\",\n  shape: \"square\"\n})\n\nexport interface TagGroupProps extends TagGroupPrimitiveProps {\n  intent?: Intent\n  shape?: \"square\" | \"circle\"\n  errorMessage?: string\n  label?: string\n  description?: string\n}\n\nconst TagGroup = ({ children, ...props }: TagGroupProps) => {\n  return (\n    <TagGroupPrimitive {...props} className={cn(\"flex flex-wrap flex-col\", props.className)}>\n      <TagGroupContext.Provider\n        value={{\n          intent: props.intent || \"primary\",\n          shape: props.shape || \"square\"\n        }}\n      >\n        {props.label && <Label className=\"mb-1\">{props.label}</Label>}\n        {children}\n        {props.description && <Description>{props.description}</Description>}\n      </TagGroupContext.Provider>\n    </TagGroupPrimitive>\n  )\n}\n\nconst TagList = <T extends object>({ className, ...props }: TagListProps<T>) => {\n  return <TagListPrimitive {...props} className={ctr(className, \"flex flex-wrap gap-2\")} />\n}\n\nconst tagStyles = tv({\n  extend: focusStyles,\n  base: [badgeStyles.base, \"cursor-pointer jdt3lr2x\"],\n  variants: {\n    isFocused: { true: \"ring-1\" },\n    isDisabled: { true: \"opacity-50 cursor-default\" },\n    allowsRemoving: { true: \"pr-1\" }\n  }\n})\n\ninterface TagProps extends TagPrimitiveProps {\n  intent?: Intent\n  shape?: Shape\n}\n\nconst TagItem = ({ className, intent, shape, ...props }: TagProps) => {\n  const textValue = typeof props.children === \"string\" ? props.children : undefined\n  const groupContext = React.useContext(TagGroupContext)\n\n  return (\n    <TagPrimitive\n      textValue={textValue}\n      {...props}\n      className={cr(className, (_, renderProps) => {\n        const finalIntent = intent || groupContext.intent\n        const finalShape = shape || groupContext.shape\n\n        return tagStyles({\n          ...renderProps,\n          className: cn([\n            intents[finalIntent]?.base,\n            badgeShapes[finalShape],\n            renderProps.isSelected ? intents[finalIntent].selected : undefined\n          ])\n        })\n      })}\n    >\n      {({ allowsRemoving }) => {\n        return (\n          <>\n            {props.children as React.ReactNode}\n            {allowsRemoving && (\n              <Button\n                slot=\"remove\"\n                className={cr(\"\", (className) => {\n                  return cn(\n                    \"rounded [&>[data-slot=icon]]:size-3 [&>[data-slot=icon]]:shrink-0 focus:outline-none size-3.5 grid place-content-center -mr-0.5 focus-visible:ring-1 focus-visible:ring-primary\",\n                    className\n                  )\n                })}\n              >\n                <IconX />\n              </Button>\n            )}\n          </>\n        )\n      }}\n    </TagPrimitive>\n  )\n}\n\nconst Tag = {\n  Group: TagGroup,\n  Item: TagItem,\n  List: TagList\n}\n\nexport { Tag, type RestrictedIntent }\n",
    "type": "ui"
  },
  "sheet": {
    "component": "@/components/ui/sheet",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type { DialogTriggerProps, Modal } from \"react-aria-components\"\nimport {\n  type DialogProps,\n  DialogTrigger as DialogTriggerPrimitive,\n  Modal as ModalPrimitive,\n  ModalOverlay,\n  type ModalOverlayProps as ModalOverlayPrimitiveProps\n} from \"react-aria-components\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { Dialog } from \"./dialog\"\nimport { cr } from \"./primitive\"\n\nconst sheetOverlayStyles = tv({\n  base: [\n    \"fixed top-0 left-0 w-full h-[--visual-viewport-height] isolate z-50 flex items-center justify-center p-4\"\n  ],\n  variants: {\n    isBlurred: {\n      true: \"backdrop-blur\",\n      false: \"bg-dark/15 dark:bg-dark/40\"\n    },\n    isEntering: {\n      true: \"animate-in fade-in duration-200 ease-out\"\n    },\n    isExiting: {\n      true: \"animate-out fade-out duration-200 ease-in\"\n    }\n  }\n})\n\ntype Sides = \"top\" | \"bottom\" | \"left\" | \"right\"\nconst generateCompoundVariants = (sides: Array<Sides>) => {\n  return sides.map((side) => ({\n    side,\n    isStack: true,\n    className:\n      side === \"top\"\n        ? \"top-2 inset-x-2 rounded-xl ring-1 border-b-0 ring-dark/5 dark:ring-border\"\n        : side === \"bottom\"\n          ? \"bottom-2 inset-x-2 rounded-xl ring-1 border-t-0 ring-dark/5 dark:ring-border\"\n          : side === \"left\"\n            ? \"left-2 inset-y-2 rounded-xl ring-1 border-r-0 ring-dark/5 dark:ring-border\"\n            : \"right-2 inset-y-2 rounded-xl ring-1 border-l-0 ring-dark/5 dark:ring-border\"\n  }))\n}\n\nconst sheetContentStyles = tv({\n  base: \"fixed z-50 grid gap-4 bg-overlay border-dark/5 dark:border-border text-overlay-fg shadow-lg transition ease-in-out\",\n  variants: {\n    isEntering: {\n      true: \"duration-300 animate-in \"\n    },\n    isExiting: {\n      true: \"duration-200 animate-out\"\n    },\n    side: {\n      top: \"inset-x-0 top-0 rounded-b-2xl border-b entering:slide-in-from-top exiting:slide-out-to-top\",\n      bottom:\n        \"inset-x-0 bottom-0 rounded-t-2xl border-t entering:slide-in-from-bottom exiting:slide-out-to-bottom\",\n      left: \"inset-y-0 left-0 h-auto w-[19rem] sm:w-3/4 overflow-y-auto border-r entering:slide-in-from-left exiting:slide-out-to-left sm:max-w-xs\",\n      right:\n        \"inset-y-0 right-0 h-auto w-[19rem] sm:w-3/4 overflow-y-auto border-l entering:slide-in-from-right exiting:slide-out-to-right sm:max-w-xs\"\n    },\n    isStack: {\n      true: \"\",\n      false: \"\"\n    }\n  },\n  compoundVariants: generateCompoundVariants([\"top\", \"bottom\", \"left\", \"right\"])\n})\n\nconst Sheet = ({ children, ...props }: DialogTriggerProps) => {\n  return <DialogTriggerPrimitive {...props}>{children}</DialogTriggerPrimitive>\n}\n\ninterface SheetContentProps\n  extends Omit<React.ComponentProps<typeof Modal>, \"children\" | \"className\">,\n    Omit<ModalOverlayPrimitiveProps, \"className\">,\n    VariantProps<typeof sheetOverlayStyles> {\n  \"aria-label\"?: DialogProps[\"aria-label\"]\n  \"aria-labelledby\"?: DialogProps[\"aria-labelledby\"]\n  role?: DialogProps[\"role\"]\n  closeButton?: boolean\n  isBlurred?: boolean\n  isStack?: boolean\n  side?: Sides\n  classNames?: {\n    overlay?: ModalOverlayPrimitiveProps[\"className\"]\n    content?: ModalOverlayPrimitiveProps[\"className\"]\n  }\n}\n\nconst SheetContent = ({\n  classNames,\n  isBlurred = false,\n  isDismissable = true,\n  side = \"right\",\n  role = \"dialog\",\n  closeButton = true,\n  isStack = true,\n  ...props\n}: SheetContentProps) => {\n  const _isDismissable = role === \"alertdialog\" ? false : isDismissable\n  return (\n    <ModalOverlay\n      isDismissable={_isDismissable}\n      className={cr(classNames?.overlay, (className, renderProps) => {\n        return sheetOverlayStyles({\n          ...renderProps,\n          isBlurred,\n          className\n        })\n      })}\n      {...props}\n    >\n      <ModalPrimitive\n        className={cr(classNames?.content, (className, renderProps) =>\n          sheetContentStyles({\n            ...renderProps,\n            side,\n            isStack,\n            className\n          })\n        )}\n        {...props}\n      >\n        <Dialog role={role} aria-label={props[\"aria-label\"] ?? undefined} className=\"h-full\">\n          {(values) => (\n            <>\n              {props.children as React.ReactNode}\n              {closeButton && (\n                <Dialog.CloseIndicator\n                  className=\"top-2.5 right-2.5\"\n                  close={values.close}\n                  isDismissable={_isDismissable}\n                />\n              )}\n            </>\n          )}\n        </Dialog>\n      </ModalPrimitive>\n    </ModalOverlay>\n  )\n}\n\nSheet.Trigger = Dialog.Trigger\nSheet.Footer = Dialog.Footer\nSheet.Content = SheetContent\nSheet.Header = Dialog.Header\nSheet.Title = Dialog.Title\nSheet.Description = Dialog.Description\nSheet.Body = Dialog.Body\nSheet.Close = Dialog.Close\n\nexport { Sheet }\n",
    "type": "ui"
  },
  "field": {
    "component": "@/components/ui/field",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type {\n  FieldErrorProps,\n  GroupProps,\n  InputProps,\n  LabelProps,\n  TextFieldProps as TextFieldPrimitiveProps,\n  TextProps,\n  ValidationResult\n} from \"react-aria-components\"\nimport {\n  FieldError as FieldErrorPrimitive,\n  Group,\n  Input as InputPrimitive,\n  Label as LabelPrimitive,\n  Text\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { cn, ctr } from \"./primitive\"\n\ninterface FieldProps {\n  label?: string\n  placeholder?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  \"aria-label\"?: TextFieldPrimitiveProps[\"aria-label\"]\n  \"aria-labelledby\"?: TextFieldPrimitiveProps[\"aria-labelledby\"]\n}\n\nconst fieldStyles = tv({\n  slots: {\n    description: \"text-pretty text-base/6 text-muted-fg sm:text-sm/6\",\n    label: \"w-fit cursor-default font-medium text-secondary-fg text-sm\",\n    fieldError: \"text-sm/6 text-danger forced-colors:text-[Mark]\",\n    input: [\n      \"w-full min-w-0 [&::-ms-reveal]:hidden bg-transparent py-2 px-2.5 text-base text-fg placeholder-muted-fg outline-none focus:outline-none lg:text-sm\"\n    ]\n  }\n})\n\nconst { description, label, fieldError, input } = fieldStyles()\n\nconst Label = ({ className, ...props }: LabelProps) => {\n  return <LabelPrimitive {...props} className={label({ className })} />\n}\n\ninterface DescriptionProps extends TextProps {\n  isWarning?: boolean\n}\n\nconst Description = ({ className, ...props }: DescriptionProps) => {\n  const isWarning = props.isWarning ?? false\n  return (\n    <Text\n      {...props}\n      slot=\"description\"\n      className={description({ className: isWarning ? \"text-warning\" : className })}\n    />\n  )\n}\n\nconst FieldError = ({ className, ...props }: FieldErrorProps) => {\n  return <FieldErrorPrimitive {...props} className={ctr(className, fieldError())} />\n}\n\nconst FieldGroup = ({ className, ...props }: GroupProps) => {\n  return (\n    <Group\n      {...props}\n      className={cn([\n        \"border border-input transition duration-200 ease-out rounded-lg flex items-center\",\n        \"focus-within:border-primary/70 focus-within:ring-4 focus-within:ring-primary/20\",\n        \"group-invalid:focus-within:border-danger focus-within:ring-4 group-invalid:focus-within:ring-danger/20\",\n        \"[&>[role=progressbar]]:mr-2.5\",\n        \"[&_[data-slot=icon]]:size-4 [&_[data-slot=icon]]:shrink-0\",\n        \"[&>[data-slot=suffix]]:mr-2.5 [&>[data-slot=suffix]]:text-muted-fg\",\n        \"[&>[data-slot=prefix]]:ml-2.5 [&>[data-slot=prefix]]:text-muted-fg\",\n        \"group-disabled:opacity-50\",\n        className\n      ])}\n    />\n  )\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(({ className, ...props }, ref) => {\n  return <InputPrimitive ref={ref} {...props} className={ctr(className, input())} />\n})\n\nInput.displayName = \"Input\"\n\nexport { Description, FieldError, FieldGroup, Input, Label, type FieldProps }\n",
    "type": "ui"
  },
  "drop-zone": {
    "component": "@/components/ui/drop-zone",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { DropZone as DropPrimitiveZone, type DropZoneProps } from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { cr, focusStyles } from \"./primitive\"\n\nconst dropZoneStyles = tv({\n  extend: focusStyles,\n  base: \"group has-[slot=description]:text-center flex max-h-[200px] p-6 max-w-xl flex-col items-center justify-center gap-2 rounded-md border border-dashed text-sm\",\n  variants: {\n    isDropTarget: {\n      true: \"bg-primary/10 ring-4 ring-primary/20 [&_.text-muted-fg]:text-primary-fg border-solid border-primary\"\n    }\n  }\n})\n\nconst DropZone = ({ className, ...props }: DropZoneProps) => (\n  <DropPrimitiveZone\n    className={cr(className, (className, renderProps) =>\n      dropZoneStyles({ ...renderProps, className })\n    )}\n    {...props}\n  />\n)\nexport { DropZone }\n",
    "type": "ui"
  },
  "toolbar": {
    "component": "@/components/ui/toolbar",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type { GroupProps, SeparatorProps, ToolbarProps } from \"react-aria-components\"\nimport { Group, Toolbar as ToolbarPrimitive } from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { cn, cr } from \"./primitive\"\nimport { Separator } from \"./separator\"\nimport { Toggle } from \"./toggle\"\n\nconst toolbarStyles = tv({\n  base: \"flex gap-2 group\",\n  variants: {\n    orientation: {\n      horizontal:\n        \"flex-row [&::-webkit-scrollbar]:hidden [scrollbar-width:none] [-ms-overflow-style:none]\",\n      vertical: \"flex-col items-start\"\n    }\n  }\n})\n\nconst ToolbarSeparator = ({ className, ...props }: SeparatorProps) => {\n  const { orientation } = React.useContext(ToolbarContext)\n  const effectiveOrientation = orientation === \"vertical\" ? \"horizontal\" : \"vertical\"\n  return (\n    <Separator\n      orientation={effectiveOrientation}\n      className={cn(effectiveOrientation === \"vertical\" ? \"mx-1.5\" : \"my-1.5 w-9\", className)}\n      {...props}\n    />\n  )\n}\n\nconst ToolbarContext = React.createContext<{ orientation?: ToolbarProps[\"orientation\"] }>({\n  orientation: \"horizontal\"\n})\n\nconst Toolbar = ({ orientation = \"horizontal\", ...props }: ToolbarProps) => {\n  return (\n    <ToolbarContext.Provider value={{ orientation }}>\n      <ToolbarPrimitive\n        orientation={orientation}\n        {...props}\n        className={cr(props.className, (className, renderProps) =>\n          toolbarStyles({ ...renderProps, className })\n        )}\n      />\n    </ToolbarContext.Provider>\n  )\n}\n\nconst toolbarGroupStyles = tv({\n  base: [\"flex gap-2\", \"group-orientation-vertical:flex-col group-orientation-vertical:items-start\"]\n})\n\nconst ToolbarGroupContext = React.createContext<{ isDisabled?: boolean }>({})\n\nconst ToolbarGroup = ({ isDisabled, ...props }: GroupProps) => {\n  return (\n    <ToolbarGroupContext.Provider value={{ isDisabled }}>\n      <Group className={toolbarGroupStyles()} {...props}>\n        {props.children}\n      </Group>\n    </ToolbarGroupContext.Provider>\n  )\n}\n\nconst Item = ({ isDisabled, ...props }: React.ComponentProps<typeof Toggle>) => {\n  const context = React.useContext(ToolbarGroupContext)\n  const effectiveIsDisabled = isDisabled || context.isDisabled\n\n  return <Toggle isDisabled={effectiveIsDisabled} {...props} />\n}\n\nToolbar.Group = ToolbarGroup\nToolbar.Separator = ToolbarSeparator\nToolbar.Item = Item\n\nexport { Toolbar }\n",
    "type": "ui"
  },
  "grid": {
    "component": "@/components/ui/grid",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { Collection } from \"react-aria-components\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cn } from \"./primitive\"\n\nconst gridStyles = tv(\n  {\n    base: \"grid\",\n    variants: {\n      // Columns\n      columns: {\n        1: \"grid-cols-1\",\n        2: \"grid-cols-2\",\n        3: \"grid-cols-3\",\n        4: \"grid-cols-4\",\n        5: \"grid-cols-5\",\n        6: \"grid-cols-6\",\n        7: \"grid-cols-7\",\n        8: \"grid-cols-8\",\n        9: \"grid-cols-9\",\n        10: \"grid-cols-10\",\n        11: \"grid-cols-11\",\n        12: \"grid-cols-12\"\n      },\n\n      // Rows\n      rows: {\n        1: \"grid-rows-1\",\n        2: \"grid-rows-2\",\n        3: \"grid-rows-3\",\n        4: \"grid-rows-4\",\n        5: \"grid-rows-5\",\n        6: \"grid-rows-6\",\n        7: \"grid-rows-7\",\n        8: \"grid-rows-8\",\n        9: \"grid-rows-9\",\n        10: \"grid-rows-10\",\n        11: \"grid-rows-11\",\n        12: \"grid-rows-12\"\n      },\n\n      // Flow\n      flow: {\n        row: \"grid-flow-row\",\n        col: \"grid-flow-col\",\n        rowDense: \"grid-flow-row-dense\",\n        colDense: \"grid-flow-col-dense\",\n        dense: \"grid-flow-dense\"\n      },\n\n      // Gap\n      gap: {\n        0: \"gap-0\",\n        0.5: \"gap-0.5\",\n        1: \"gap-1\",\n        1.5: \"gap-1.5\",\n        2: \"gap-2\",\n        2.5: \"gap-2.5\",\n        3: \"gap-3\",\n        3.5: \"gap-3.5\",\n        4: \"gap-4\",\n        5: \"gap-5\",\n        6: \"gap-6\",\n        7: \"gap-7\",\n        8: \"gap-8\",\n        9: \"gap-9\",\n        10: \"gap-10\",\n        11: \"gap-11\",\n        12: \"gap-12\",\n        14: \"gap-14\",\n        16: \"gap-16\",\n        20: \"gap-20\",\n        24: \"gap-24\"\n      },\n      gapX: {\n        0: \"gap-x-0\",\n        0.5: \"gap-x-0.5\",\n        1: \"gap-x-1\",\n        1.5: \"gap-x-1.5\",\n        2: \"gap-x-2\",\n        2.5: \"gap-x-2.5\",\n        3: \"gap-x-3\",\n        3.5: \"gap-x-3.5\",\n        4: \"gap-x-4\",\n        5: \"gap-x-5\",\n        6: \"gap-x-6\",\n        7: \"gap-x-7\",\n        8: \"gap-x-8\",\n        9: \"gap-x-9\",\n        10: \"gap-x-10\",\n        11: \"gap-x-11\",\n        12: \"gap-x-12\",\n        14: \"gap-x-14\",\n        16: \"gap-x-16\",\n        20: \"gap-x-20\",\n        24: \"gap-x-24\"\n      },\n      gapY: {\n        0: \"gap-y-0\",\n        0.5: \"gap-y-0.5\",\n        1: \"gap-y-1\",\n        1.5: \"gap-y-1.5\",\n        2: \"gap-y-2\",\n        2.5: \"gap-y-2.5\",\n        3: \"gap-y-3\",\n        3.5: \"gap-y-3.5\",\n        4: \"gap-y-4\",\n        5: \"gap-y-5\",\n        6: \"gap-y-6\",\n        7: \"gap-y-7\",\n        8: \"gap-y-8\",\n        9: \"gap-y-9\",\n        10: \"gap-y-10\",\n        11: \"gap-y-11\",\n        12: \"gap-y-12\",\n        14: \"gap-y-14\",\n        16: \"gap-y-16\",\n        20: \"gap-y-20\",\n        24: \"gap-y-24\"\n      }\n    },\n    defaultVariants: {\n      columns: 1\n    }\n  },\n  {\n    responsiveVariants: true\n  }\n)\n\ninterface GridProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof gridStyles> {\n  className?: string\n  debug?: boolean\n}\n\nconst Grid = ({ className, gap, gapX, gapY, flow, columns, rows, ...props }: GridProps) => {\n  return (\n    <div\n      aria-label={props[\"aria-label\"] || \"grid\"}\n      className={gridStyles({\n        gap: gap ?? gapX ?? gapY,\n        gapX: gapX ?? gap,\n        gapY: gapY ?? gap,\n        flow: flow ?? \"row\",\n        columns: columns ?? 1,\n        rows: rows ?? 1,\n        className:\n          \"debug\" in props\n            ? cn(\"[&>.grid-cell]:border [&>.grid-cell]:border-warning\", className)\n            : className\n      })}\n      {...props}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nconst gridItemStyles = tv(\n  {\n    base: \"grid-cell focus:outline-none\",\n    variants: {\n      colSpan: {\n        auto: \"col-auto\",\n        1: \"col-span-1\",\n        2: \"col-span-2\",\n        3: \"col-span-3\",\n        4: \"col-span-4\",\n        5: \"col-span-5\",\n        6: \"col-span-6\",\n        7: \"col-span-7\",\n        8: \"col-span-8\",\n        9: \"col-span-9\",\n        10: \"col-span-10\",\n        11: \"col-span-11\",\n        12: \"col-span-12\",\n        full: \"col-span-full\"\n      },\n      colStart: {\n        1: \"col-start-1\",\n        2: \"col-start-2\",\n        3: \"col-start-3\",\n        4: \"col-start-4\",\n        5: \"col-start-5\",\n        6: \"col-start-6\",\n        7: \"col-start-7\",\n        8: \"col-start-8\",\n        9: \"col-start-9\",\n        10: \"col-start-10\",\n        11: \"col-start-11\",\n        12: \"col-start-12\",\n        13: \"col-start-13\",\n        auto: \"col-start-auto\"\n      },\n      colEnd: {\n        1: \"col-end-1\",\n        2: \"col-end-2\",\n        3: \"col-end-3\",\n        4: \"col-end-4\",\n        5: \"col-end-5\",\n        6: \"col-end-6\",\n        7: \"col-end-7\",\n        8: \"col-end-8\",\n        9: \"col-end-9\",\n        10: \"col-end-10\",\n        11: \"col-end-11\",\n        12: \"col-end-12\",\n        13: \"col-end-13\",\n        auto: \"col-end-auto\"\n      },\n      rowSpan: {\n        auto: \"row-auto\",\n        1: \"row-span-1\",\n        2: \"row-span-2\",\n        3: \"row-span-3\",\n        4: \"row-span-4\",\n        5: \"row-span-5\",\n        6: \"row-span-6\",\n        7: \"row-span-7\",\n        8: \"row-span-8\",\n        9: \"row-span-9\",\n        10: \"row-span-10\",\n        11: \"row-span-11\",\n        12: \"row-span-12\",\n        full: \"row-span-full\"\n      },\n      rowStart: {\n        1: \"row-start-1\",\n        2: \"row-start-2\",\n        3: \"row-start-3\",\n        4: \"row-start-4\",\n        5: \"row-start-5\",\n        6: \"row-start-6\",\n        7: \"row-start-7\",\n        8: \"row-start-8\",\n        9: \"row-start-9\",\n        10: \"row-start-10\",\n        11: \"row-start-11\",\n        12: \"row-start-12\",\n        13: \"row-start-13\",\n        auto: \"row-start-auto\"\n      },\n      rowEnd: {\n        1: \"row-end-1\",\n        2: \"row-end-2\",\n        3: \"row-end-3\",\n        4: \"row-end-4\",\n        5: \"row-end-5\",\n        6: \"row-end-6\",\n        7: \"row-end-7\",\n        8: \"row-end-8\",\n        9: \"row-end-9\",\n        10: \"row-end-10\",\n        11: \"row-end-11\",\n        12: \"row-end-12\",\n        13: \"row-end-13\",\n        auto: \"row-end-auto\"\n      }\n    }\n  },\n  {\n    responsiveVariants: [\"sm\", \"md\", \"lg\", \"xl\", \"2xl\"]\n  }\n)\n\ninterface GridItemProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof gridItemStyles> {\n  className?: string\n}\n\nconst GridItem = ({\n  children,\n  className,\n  colSpan,\n  rowSpan,\n  colStart,\n  colEnd,\n  rowStart,\n  rowEnd,\n  ...props\n}: GridItemProps) => {\n  return (\n    <div\n      className={gridItemStyles({\n        colSpan,\n        rowSpan,\n        colStart,\n        colEnd,\n        rowStart,\n        rowEnd,\n        className\n      })}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n}\n\nGrid.Collection = Collection\nGrid.Item = GridItem\n\nexport { Grid, gridStyles, gridItemStyles }\n",
    "type": "ui"
  },
  "meter": {
    "component": "@/components/ui/meter",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { motion } from \"framer-motion\"\nimport { IconTriangleExclamation } from \"justd-icons\"\nimport {\n  Meter as MeterPrimitive,\n  type MeterProps as MeterPrimitiveProps\n} from \"react-aria-components\"\n\nimport { Label } from \"./field\"\nimport { ctr } from \"./primitive\"\n\nexport interface MeterProps extends MeterPrimitiveProps {\n  label?: string\n}\n\nconst Meter = ({ label, ...props }: MeterProps) => {\n  return (\n    <MeterPrimitive {...props} className={ctr(props.className, \"flex flex-col gap-1\")}>\n      {({ percentage, valueText }) => (\n        <>\n          <div className=\"flex w-full justify-between gap-2\">\n            <Label>{label}</Label>\n            <span\n              className={`text-sm tabular-nums ${percentage >= 80 ? \"text-danger\" : \"text-muted-fg\"}`}\n            >\n              {percentage >= 80 && (\n                <IconTriangleExclamation\n                  aria-label=\"Alert\"\n                  className=\"inline-block fill-danger/20 text-danger size-4 align-text-bottom\"\n                />\n              )}\n              {\" \" + valueText}\n            </span>\n          </div>\n          <div className=\"relative h-2 min-w-64 rounded-full bg-muted outline outline-1 -outline-offset-1 outline-transparent\">\n            <motion.div\n              className=\"absolute left-0 top-0 h-full rounded-full forced-colors:bg-[Highlight]\"\n              initial={{ width: \"0%\", backgroundColor: getColor(0) }}\n              animate={{\n                width: `${percentage}%`,\n                backgroundColor: getColor(percentage)\n              }}\n              transition={{ duration: 0.5 }}\n            />\n          </div>\n        </>\n      )}\n    </MeterPrimitive>\n  )\n}\n\nconst getColor = (percentage: number) => {\n  if (percentage < 30) {\n    return \"hsl(var(--primary))\" // Blue\n  }\n\n  if (percentage < 50) {\n    return \"hsl(var(--success))\" // Green\n  }\n\n  if (percentage < 70) {\n    return \"#eab308\" // Yellow\n  }\n\n  if (percentage < 80) {\n    return \"hsl(var(--warning))\" // Orange\n  }\n\n  return \"hsl(var(--danger))\" // Red\n}\n\nexport { Meter }\n",
    "type": "ui"
  },
  "color-slider": {
    "component": "@/components/ui/color-slider",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport {\n  ColorSlider as ColorSliderPrimitive,\n  type ColorSliderProps as ColorSliderPrimitiveProps,\n  SliderOutput,\n  SliderTrack\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { ColorThumb } from \"./color-thumb\"\nimport { Label } from \"./field\"\nimport { ctr } from \"./primitive\"\n\nconst trackStyles = tv({\n  base: \"group col-span-2 orientation-horizontal:h-6 rounded-lg\",\n  variants: {\n    orientation: {\n      horizontal: \"w-full h-6\",\n      vertical: \"w-6 h-56 ml-[50%] -translate-x-[50%]\"\n    },\n    isDisabled: {\n      true: \"opacity-75 bg-muted forced-colors:bg-[GrayText]\"\n    }\n  }\n})\n\ninterface ColorSliderProps extends ColorSliderPrimitiveProps {\n  label?: string\n  showOutput?: boolean\n}\n\nconst ColorSlider = ({ showOutput = true, label, className, ...props }: ColorSliderProps) => {\n  return (\n    <ColorSliderPrimitive\n      {...props}\n      data-slot=\"color-slider\"\n      className={ctr(\n        className,\n        \"group orientation-horizontal:grid orientation-vertical:flex relative orientation-horizontal:grid-cols-[1fr_auto] orientation-vertical:flex-col orientation-vertical:justify-center orientation-vertical:items-center gap-2 orientation-horizontal:w-56\"\n      )}\n    >\n      <div className=\"flex items-center\">\n        {label && <Label className=\"text-sm [grid-area:label]\">{label}</Label>}\n        {showOutput && <SliderOutput className=\"text-sm ml-auto [grid-area:output]\" />}\n      </div>\n      <SliderTrack\n        className={trackStyles}\n        style={({ defaultStyle, isDisabled }) => ({\n          ...defaultStyle,\n          background: isDisabled\n            ? undefined\n            : `${defaultStyle.background}, repeating-conic-gradient(#CCC 0% 25%, white 0% 50%) 50% / 16px 16px`\n        })}\n      >\n        <ColorThumb />\n      </SliderTrack>\n    </ColorSliderPrimitive>\n  )\n}\n\nexport { ColorSlider }\n",
    "type": "ui"
  },
  "time-field": {
    "component": "@/components/ui/time-field",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport {\n  TimeField as TimeFieldPrimitive,\n  type TimeFieldProps as TimeFieldPrimitiveProps,\n  type TimeValue,\n  type ValidationResult\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { DateInput } from \"./date-field\"\nimport { Description, FieldError, FieldGroup, Label } from \"./field\"\nimport { ctr } from \"./primitive\"\n\nexport interface TimeFieldProps<T extends TimeValue> extends TimeFieldPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  prefix?: React.ReactNode\n  suffix?: React.ReactNode\n}\n\nconst timeFieldStyles = tv({\n  base: \"flex w-fit min-w-28 justify-around whitespace-nowrap p-2 lg:text-sm\"\n})\n\nconst TimeField = <T extends TimeValue>({\n  prefix,\n  suffix,\n  label,\n  className,\n  description,\n  errorMessage,\n  ...props\n}: TimeFieldProps<T>) => {\n  return (\n    <TimeFieldPrimitive {...props} className={ctr(className, \"group flex flex-col gap-y-1.5\")}>\n      {label && <Label>{label}</Label>}\n      <FieldGroup>\n        {prefix ? <span data-slot=\"prefix\">{prefix}</span> : null}\n        <DateInput className={timeFieldStyles} />\n        {suffix ? <span data-slot=\"suffix\">{suffix}</span> : null}\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </TimeFieldPrimitive>\n  )\n}\n\nexport { TimeField }\n",
    "type": "ui"
  },
  "breadcrumbs": {
    "component": "@/components/ui/breadcrumbs",
    "raw": "\"use client\"\n\nimport { IconChevronLgRight } from \"justd-icons\"\nimport type { BreadcrumbProps, BreadcrumbsProps } from \"react-aria-components\"\nimport {\n  Breadcrumb,\n  Breadcrumbs as BreadcrumbsPrimitive,\n  type LinkProps\n} from \"react-aria-components\"\n\nimport { Link } from \"./link\"\nimport { cn, ctr } from \"./primitive\"\n\nconst Breadcrumbs = <T extends object>({ className, ...props }: BreadcrumbsProps<T>) => {\n  return <BreadcrumbsPrimitive {...props} className={cn(\"flex items-center gap-2\", className)} />\n}\n\ninterface ItemProps extends BreadcrumbProps {\n  href?: string\n  separator?: \"slash\" | \"chevron\" | boolean\n}\n\nconst Item = ({\n  href,\n  separator = true,\n  className,\n  ...props\n}: ItemProps & Partial<Omit<LinkProps, \"className\">>) => {\n  const separatorValue = separator === true ? \"chevron\" : separator\n\n  return (\n    <Breadcrumb {...props} className={ctr(className, \"flex text-sm items-center gap-2\")}>\n      {({ isCurrent }) => (\n        <>\n          {<Link href={href} {...props} />}\n          {!isCurrent && separator !== false && <Separator separator={separatorValue} />}\n        </>\n      )}\n    </Breadcrumb>\n  )\n}\n\nconst Separator = ({ separator = \"chevron\" }: { separator?: ItemProps[\"separator\"] }) => {\n  return (\n    <span className={cn(\"[&>*]:shrink-0 [&>[data-slot=icon]]:size-3.5 [&>*]:text-muted-fg\")}>\n      {separator === \"chevron\" && <IconChevronLgRight />}\n      {separator === \"slash\" && <span className=\"text-muted-fg\">/</span>}\n    </span>\n  )\n}\n\nBreadcrumbs.Item = Item\n\nexport { Breadcrumbs }\n",
    "type": "ui"
  },
  "color-thumb": {
    "component": "@/components/ui/color-thumb",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { ColorThumb as ColorThumbPrimitive, type ColorThumbProps } from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nconst thumbStyles = tv({\n  base: \"size-6 top-[50%] left-[50%] rounded-full border-2 border-white [box-shadow:0_0_0_1px_black,_inset_0_0_0_1px_black]\",\n  variants: {\n    isFocusVisible: {\n      true: \"size-8\"\n    },\n    isDragging: {\n      true: \"bg-gray-700 dark:bg-gray-300 forced-colors:bg-[ButtonBorder]\"\n    },\n    isDisabled: {\n      true: \"opacity-50 forced-colors:border-[GrayText] forced-colors:bg-[GrayText]\"\n    }\n  }\n})\n\nconst ColorThumb = (props: ColorThumbProps) => {\n  return (\n    <ColorThumbPrimitive\n      {...props}\n      style={({ defaultStyle, isDisabled }) => ({\n        ...defaultStyle,\n        backgroundColor: isDisabled ? undefined : defaultStyle.backgroundColor\n      })}\n      className={thumbStyles}\n    />\n  )\n}\n\nexport { ColorThumb }\n",
    "type": "ui"
  },
  "drawer": {
    "component": "@/components/ui/drawer",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { PanInfo } from \"framer-motion\"\nimport {\n  animate,\n  AnimatePresence,\n  type Inertia,\n  motion,\n  useMotionTemplate,\n  useMotionValue,\n  useMotionValueEvent,\n  useTransform\n} from \"framer-motion\"\nimport type { DialogProps } from \"react-aria-components\"\nimport { type ButtonProps, Modal, ModalOverlay } from \"react-aria-components\"\nimport { twJoin } from \"tailwind-merge\"\n\nimport { Dialog } from \"./dialog\"\nimport { cn } from \"./primitive\"\n\nconst inertiaTransition: Inertia = {\n  type: \"inertia\",\n  bounceStiffness: 300,\n  bounceDamping: 60,\n  timeConstant: 300\n}\nconst staticTransition = {\n  duration: 0.4,\n  ease: [0.32, 0.72, 0, 1]\n}\nconst drawerMargin = 60\nconst drawerRadius = 32\n\ninterface DrawerContextType {\n  isOpen: boolean\n  openDrawer: () => void\n  closeDrawer: () => void\n  withNotch?: boolean\n}\n\nconst DrawerContext = React.createContext<DrawerContextType | undefined>(undefined)\n\nconst useDrawerContext = () => {\n  const context = React.useContext(DrawerContext)\n  if (context === undefined) {\n    throw new Error(\"useDrawerContext must be used within a Drawer\")\n  }\n  return context\n}\n\nconst ModalWrapper = React.forwardRef<HTMLDivElement, React.ComponentProps<typeof Modal>>(\n  (props, ref) => <Modal ref={ref} {...props} />\n)\nModalWrapper.displayName = \"ModalWrapper\"\n\nconst ModalOverlayWrapper = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof ModalOverlay>\n>((props, ref) => <ModalOverlay ref={ref} {...props} />)\nModalOverlayWrapper.displayName = \"ModalOverlayWrapper\"\n\nconst ModalPrimitive = motion.create(ModalWrapper)\nconst ModalOverlayPrimitive = motion.create(ModalOverlayWrapper)\n\ninterface DrawerOverlayPrimitiveProps\n  extends Omit<\n    React.ComponentProps<typeof ModalOverlayPrimitive>,\n    \"isOpen\" | \"onOpenChange\" | \"style\"\n  > {\n  \"aria-label\"?: DialogProps[\"aria-label\"]\n  \"aria-labelledby\"?: DialogProps[\"aria-labelledby\"]\n  role?: DialogProps[\"role\"]\n  children?: React.ReactNode\n}\n\nconst DrawerContentPrimitive = ({ children, ...props }: DrawerOverlayPrimitiveProps) => {\n  const { closeDrawer, withNotch } = useDrawerContext()\n  const [contentHeight, setContentHeight] = React.useState(0)\n\n  const h = Math.min(contentHeight + drawerMargin, window.innerHeight - drawerMargin)\n  const y = useMotionValue(h)\n  const bgOpacity = useTransform(y, [0, h], [0.15, 0])\n  const bg = useMotionTemplate`rgba(0, 0, 0, ${bgOpacity})`\n\n  const root = document.getElementsByTagName(\"main\")[0] as HTMLElement\n\n  const bodyBorderRadius = useTransform(y, [0, h], [drawerRadius, 0])\n\n  useMotionValueEvent(bodyBorderRadius, \"change\", (v) => (root.style.borderRadius = `${v}px`))\n\n  const onDragEnd = (_: any, { offset, velocity }: PanInfo) => {\n    if (offset.y > h * 0.4 || velocity.y > 10) {\n      closeDrawer()\n    } else {\n      animate(y, 0, { ...inertiaTransition, min: 0, max: 0 })\n    }\n  }\n\n  return (\n    <>\n      <ModalOverlayPrimitive\n        isDismissable\n        isOpen\n        onOpenChange={closeDrawer}\n        className={twJoin([\n          \"fixed touch-none will-change-transform left-0 top-0 isolate z-50 h-[--visual-viewport-height] w-full\",\n          \"flex items-end [--visual-viewport-vertical-padding:100px]\"\n        ])}\n        style={{\n          backgroundColor: bg as any\n        }}\n      >\n        <ModalPrimitive\n          className={cn(\n            \"max-h-full flex flex-col w-full rounded-t-2xl sm:rounded-lg overflow-hidden bg-overlay text-overlay-fg text-left align-middle shadow-lg\",\n            \"ring-1 ring-dark/5 dark:ring-light/15\"\n          )}\n          initial={{ y: h }}\n          animate={{ y: 0 }}\n          exit={{ y: h }}\n          transition={staticTransition}\n          style={{\n            y,\n            top: \"auto\",\n            height: contentHeight > 0 ? `${contentHeight + drawerMargin}px` : \"auto\",\n            maxHeight: `calc(100% - ${drawerMargin}px)`\n          }}\n          drag=\"y\"\n          dragConstraints={{ top: 0, bottom: h }}\n          onDragEnd={onDragEnd}\n          {...props}\n        >\n          <div className=\"overflow-hidden\">\n            {withNotch && (\n              <div className=\"notch touch-pan-y sticky top-0 mx-auto shrink-0 mt-2.5 h-1.5 w-10 rounded-full bg-fg/20\" />\n            )}\n            <div\n              className=\"overflow-y-auto mt-3\"\n              ref={(el) => {\n                if (el) {\n                  const resizeObserver = new ResizeObserver((entries) => {\n                    for (const entry of entries) {\n                      setContentHeight(entry.contentRect.height)\n                    }\n                  })\n                  resizeObserver.observe(el)\n                  return () => resizeObserver.disconnect()\n                }\n              }}\n            >\n              <>{children}</>\n            </div>\n          </div>\n        </ModalPrimitive>\n      </ModalOverlayPrimitive>\n    </>\n  )\n}\n\ninterface DrawerPrimitiveProps extends Omit<React.ComponentProps<typeof Modal>, \"children\"> {\n  \"aria-label\"?: DialogProps[\"aria-label\"]\n  \"aria-labelledby\"?: DialogProps[\"aria-labelledby\"]\n  role?: DialogProps[\"role\"]\n  children?: DialogProps[\"children\"]\n}\n\nconst DrawerPrimitive = (props: DrawerPrimitiveProps) => {\n  const { isOpen } = useDrawerContext()\n\n  const h = window.innerHeight - drawerMargin\n  const y = useMotionValue(h)\n  const bodyBorderRadius = useTransform(y, [0, h], [drawerRadius, 0])\n  return (\n    <motion.div\n      style={{\n        borderRadius: bodyBorderRadius,\n        transformOrigin: \"center 0\"\n      }}\n    >\n      <AnimatePresence>{isOpen && <>{props.children as React.ReactNode}</>}</AnimatePresence>\n    </motion.div>\n  )\n}\n\nconst DrawerTrigger = (props: ButtonProps) => {\n  const { openDrawer } = useDrawerContext()\n\n  return <Dialog.Trigger onPress={openDrawer} {...props} />\n}\n\ninterface DrawerProps {\n  children: React.ReactNode\n  isOpen?: boolean\n  withNotch?: boolean\n  onOpenChange?: (isOpen: boolean) => void\n}\n\nconst Drawer = ({\n  children,\n  withNotch = true,\n  isOpen: controlledIsOpen,\n  onOpenChange\n}: DrawerProps) => {\n  const [internalIsOpen, setInternalIsOpen] = React.useState(false)\n\n  const isControlled = controlledIsOpen !== undefined\n  const isOpen = isControlled ? controlledIsOpen : internalIsOpen\n\n  const openDrawer = () => {\n    if (isControlled && onOpenChange) {\n      onOpenChange(true)\n    } else {\n      setInternalIsOpen(true)\n    }\n  }\n\n  const closeDrawer = () => {\n    if (isControlled && onOpenChange) {\n      onOpenChange(false)\n    } else {\n      setInternalIsOpen(false)\n    }\n  }\n\n  if (typeof window === \"undefined\") {\n    return null\n  }\n\n  return (\n    <DrawerContext.Provider value={{ isOpen, openDrawer, closeDrawer, withNotch }}>\n      {children}\n    </DrawerContext.Provider>\n  )\n}\n\nconst Content = ({ children, ...props }: React.ComponentProps<typeof DrawerPrimitive>) => {\n  return (\n    <DrawerPrimitive>\n      <DrawerContentPrimitive {...props}>\n        <Dialog\n          role={props.role ?? \"dialog\"}\n          aria-label={props[\"aria-label\"] ?? undefined}\n          aria-labelledby={props[\"aria-labelledby\"] ?? undefined}\n          className=\"sm:max-w-lg mx-auto\"\n        >\n          {(values) => <>{typeof children === \"function\" ? children(values) : children}</>}\n        </Dialog>\n      </DrawerContentPrimitive>\n    </DrawerPrimitive>\n  )\n}\n\nconst DrawerHeader = ({ className, ...props }: React.ComponentProps<typeof Dialog.Header>) => (\n  <Dialog.Header className={cn(\"pt-2\", className)} {...props} />\n)\n\nconst DrawerBody = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<typeof Dialog.Body>) => (\n  <Dialog.Body {...props} className={cn(\"px-4\", className)}>\n    {children}\n  </Dialog.Body>\n)\n\nconst DrawerFooter = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<typeof Dialog.Footer>) => (\n  <Dialog.Footer {...props} className={cn(\"pb-2\", className)}>\n    {children}\n  </Dialog.Footer>\n)\n\nDrawer.Body = DrawerBody\nDrawer.Close = Dialog.Close\nDrawer.Content = Content\nDrawer.Description = Dialog.Description\nDrawer.Footer = DrawerFooter\nDrawer.Header = DrawerHeader\nDrawer.Title = Dialog.Title\nDrawer.Trigger = DrawerTrigger\n\nexport { Drawer }\n",
    "type": "ui"
  },
  "tooltip": {
    "component": "@/components/ui/tooltip",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport {\n  Button,\n  OverlayArrow,\n  Tooltip as TooltipPrimitive,\n  type TooltipProps as TooltipPrimitiveProps,\n  TooltipTrigger\n} from \"react-aria-components\"\nimport type { VariantProps } from \"tailwind-variants\"\nimport { tv } from \"tailwind-variants\"\n\nimport { cr } from \"./primitive\"\n\nconst tooltipStyles = tv({\n  base: [\n    \"group rounded-lg [&_strong]:font-medium border px-3 py-1.5 text-sm will-change-transform dark:shadow-none\",\n    \"placement-left:slide-in-from-right-1 placement-right:slide-in-from-left-1 placement-top:slide-in-from-bottom-1 placement-bottom:slide-in-from-top-1\"\n  ],\n  variants: {\n    intent: {\n      default: \"bg-overlay text-overlay-fg [&_.arx]:fill-overlay [&_.arx]:stroke-border\",\n      inverse:\n        \"border-transparent bg-dark dark:[&_.text-muted-fg]:text-dark/70 [&_.text-muted-fg]:text-light/70 text-light dark:bg-light dark:text-dark dark:[&_.arx]:fill-light [&_.arx]:fill-dark [&_.arx]:stroke-transparent\"\n    },\n    isEntering: {\n      true: \"animate-in fade-in\"\n    },\n    isExiting: {\n      true: \"animate-in fade-in direction-reverse\"\n    }\n  },\n  defaultVariants: {\n    intent: \"default\"\n  }\n})\n\nconst Tooltip = (props: React.ComponentProps<typeof TooltipTrigger>) => (\n  <TooltipTrigger {...props}>{props.children}</TooltipTrigger>\n)\n\ninterface ContentProps\n  extends Omit<TooltipPrimitiveProps, \"children\">,\n    VariantProps<typeof tooltipStyles> {\n  showArrow?: boolean\n  children: React.ReactNode\n}\n\nconst Content = ({ showArrow = true, intent = \"default\", children, ...props }: ContentProps) => {\n  return (\n    <TooltipPrimitive\n      {...props}\n      offset={10}\n      className={cr(props.className, (className, renderProps) =>\n        tooltipStyles({\n          ...renderProps,\n          intent,\n          className\n        })\n      )}\n    >\n      {showArrow && (\n        <OverlayArrow>\n          <svg\n            width={12}\n            height={12}\n            viewBox=\"0 0 12 12\"\n            className=\"arx group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180 forced-colors:fill-[Canvas] forced-colors:stroke-[ButtonBorder]\"\n          >\n            <path d=\"M0 0 L6 6 L12 0\" />\n          </svg>\n        </OverlayArrow>\n      )}\n      {children}\n    </TooltipPrimitive>\n  )\n}\n\nTooltip.Trigger = Button\nTooltip.Content = Content\n\nexport { Tooltip }\n",
    "type": "ui"
  },
  "file-trigger": {
    "component": "@/components/ui/file-trigger",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconCamera, IconFolder, IconPaperclip } from \"justd-icons\"\nimport {\n  FileTrigger as FileTriggerPrimitive,\n  type FileTriggerProps as FileTriggerPrimitiveProps\n} from \"react-aria-components\"\n\nimport { Button } from \"./button\"\n\ninterface FileTriggerProps extends FileTriggerPrimitiveProps {\n  withIcon?: boolean\n  isDisabled?: boolean\n  intent?: \"primary\" | \"secondary\" | \"danger\" | \"warning\"\n  size?: \"medium\" | \"large\" | \"square-petite\" | \"extra-small\" | \"small\"\n  shape?: \"square\" | \"circle\"\n  appearance?: \"solid\" | \"outline\" | \"plain\"\n}\n\nconst FileTrigger = ({\n  intent = \"primary\",\n  appearance = \"outline\",\n  size = \"medium\",\n  shape = \"square\",\n  withIcon = true,\n  ...props\n}: FileTriggerProps) => {\n  return (\n    <>\n      <FileTriggerPrimitive {...props}>\n        <Button\n          isDisabled={props.isDisabled}\n          intent={intent}\n          size={size}\n          shape={shape}\n          appearance={appearance}\n        >\n          {withIcon && (\n            <>\n              {props.defaultCamera ? (\n                <IconCamera />\n              ) : props.acceptDirectory ? (\n                <IconFolder />\n              ) : (\n                <IconPaperclip className=\"rotate-45\" />\n              )}\n            </>\n          )}\n          {props.children ? (\n            props.children\n          ) : (\n            <>\n              {props.allowsMultiple\n                ? \"Browse a files\"\n                : props.acceptDirectory\n                  ? \"Browse\"\n                  : \"Browse a file\"}\n              ...\n            </>\n          )}\n        </Button>\n      </FileTriggerPrimitive>\n    </>\n  )\n}\n\nexport { FileTrigger }\n",
    "type": "ui"
  },
  "heading": {
    "component": "@/components/ui/heading",
    "raw": "import * as React from \"react\"\n\nimport { tv } from \"tailwind-variants\"\n\nconst headingStyles = tv({\n  base: \"font-sans tracking-tight text-fg\",\n  variants: {\n    level: {\n      1: \"font-bold text-xl sm:text-2xl\",\n      2: \"font-semibold text-lg sm:text-xl\",\n      3: \"font-semibold text-base sm:text-lg\",\n      4: \"font-semibold text-base\"\n    },\n    tracking: {\n      tighter: \"tracking-tighter\",\n      tight: \"tracking-tight\",\n      normal: \"tracking-normal\",\n      wide: \"tracking-wide\",\n      wider: \"tracking-wider\",\n      widest: \"tracking-widest\"\n    }\n  }\n})\ntype HeadingType = { level?: 1 | 2 | 3 | 4 } & React.ComponentPropsWithoutRef<\n  \"h1\" | \"h2\" | \"h3\" | \"h4\"\n>\n\ninterface HeadingProps extends HeadingType {\n  tracking?: \"tighter\" | \"tight\" | \"normal\" | \"wide\" | \"wider\" | \"widest\"\n  className?: string | undefined\n}\n\nconst Heading = ({ className, tracking = \"normal\", level = 1, ...props }: HeadingProps) => {\n  const Element: `h${typeof level}` = `h${level}`\n  return (\n    <Element\n      className={headingStyles({\n        level,\n        tracking,\n        className\n      })}\n      {...props}\n    />\n  )\n}\n\nexport { Heading }\n",
    "type": "ui"
  },
  "color-swatch-picker": {
    "component": "@/components/ui/color-swatch-picker",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { ColorSwatchPickerItemProps, ColorSwatchPickerProps } from \"react-aria-components\"\nimport {\n  ColorSwatchPicker as ColorSwatchPickerPrimitive,\n  ColorSwatchPickerItem\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { ColorSwatch } from \"./color-swatch\"\nimport { ctr, focusRing } from \"./primitive\"\n\nconst ColorSwatchPicker = ({\n  children,\n  className,\n  layout = \"grid\",\n  ...props\n}: ColorSwatchPickerProps) => {\n  return (\n    <ColorSwatchPickerPrimitive layout={layout} {...props} className={ctr(className, \"flex gap-1\")}>\n      {children}\n    </ColorSwatchPickerPrimitive>\n  )\n}\n\nconst itemStyles = tv({\n  extend: focusRing,\n  base: \"relative rounded disabled:opacity-50\"\n})\n\nconst SwatchPickerItem = (props: ColorSwatchPickerItemProps) => {\n  return (\n    <ColorSwatchPickerItem {...props} className={itemStyles}>\n      {({ isSelected }) => (\n        <>\n          <ColorSwatch />\n          {isSelected && (\n            <div className=\"absolute top-0 left-0 w-full h-full ring-1 ring-fg/30 outline-none rounded-[calc(var(--radius)-3.9px)] ring-inset forced-color-adjust-none\" />\n          )}\n        </>\n      )}\n    </ColorSwatchPickerItem>\n  )\n}\n\nColorSwatchPicker.Item = SwatchPickerItem\n\nexport { ColorSwatchPicker }\n",
    "type": "ui"
  },
  "choicebox": {
    "component": "@/components/ui/choicebox",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type { GridListItemProps, GridListProps } from \"react-aria-components\"\nimport { GridList, GridListItem } from \"react-aria-components\"\nimport type { VariantProps } from \"tailwind-variants\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Checkbox } from \"./checkbox\"\nimport { Description, Label } from \"./field\"\nimport { cr, focusStyles } from \"./primitive\"\n\nconst choiceboxStyles = tv({\n  base: \"grid\",\n  variants: {\n    columns: {\n      1: \"sm:grid-cols-1\",\n      2: \"sm:grid-cols-2\",\n      3: \"sm:grid-cols-3\",\n      4: \"sm:grid-cols-4\",\n      5: \"sm:grid-cols-5\",\n      6: \"sm:grid-cols-6\"\n    },\n    gap: {\n      2: \"gap-2\",\n      4: \"gap-4\",\n      6: \"gap-6\"\n    }\n  },\n  defaultVariants: {\n    columns: 2,\n    gap: 6\n  }\n})\n\ninterface ChoiceboxProps<T extends object>\n  extends GridListProps<T>,\n    VariantProps<typeof choiceboxStyles> {\n  className?: string\n}\n\nconst Choicebox = <T extends object>({\n  columns,\n  gap,\n  className,\n  selectionMode = \"multiple\",\n  ...props\n}: ChoiceboxProps<T>) => {\n  return (\n    <GridList\n      layout={columns === 1 ? \"stack\" : \"grid\"}\n      selectionMode={selectionMode}\n      className={choiceboxStyles({\n        columns,\n        gap,\n        className\n      })}\n      {...props}\n    />\n  )\n}\n\nconst choiceboxItemStyles = tv({\n  extend: focusStyles,\n  base: \"rounded-lg cursor-pointer border p-4 [&_[slot=title]]:font-medium\",\n  variants: {\n    isSelected: {\n      true: [\n        \"z-20 bg-accent-subtle hover:bg-accent-subtle hover:border-ring border-ring/75\",\n        \"[&_[slot=title]]:text-accent-subtle-fg\",\n        \"[&_[slot=description]]:text-accent-subtle-fg/70\"\n      ]\n    },\n    isFocused: {\n      true: \"border-ring/80\"\n    },\n    isHovered: {\n      true: \"bg-secondary/50\"\n    },\n    isDisabled: {\n      true: \"z-10 cursor-default opacity-80 [&_[slot=title]]:text-muted-fg forced-colors:text-[GrayText]\"\n    }\n  }\n})\n\ninterface ChoiceboxItemProps extends GridListItemProps, VariantProps<typeof choiceboxItemStyles> {\n  title: string\n  description?: string\n}\n\nconst ChoiceboxItem = ({ children, className, ...props }: ChoiceboxItemProps) => {\n  const textValue = typeof children === \"string\" ? children : undefined\n  return (\n    <GridListItem\n      textValue={textValue}\n      {...props}\n      className={cr(className, (className, renderProps) =>\n        choiceboxItemStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    >\n      {(values) => (\n        <div className=\"flex items-center w-full justify-between gap-2\">\n          <div className=\"pr-8 flex flex-col\">\n            <Label slot=\"title\" htmlFor={textValue}>\n              {props.title}\n            </Label>\n            {props.description && <Description>{props.description}</Description>}\n          </div>\n          <>\n            {values.selectionMode === \"multiple\" && values.selectionBehavior === \"toggle\" && (\n              <Checkbox slot=\"selection\" />\n            )}\n          </>\n        </div>\n      )}\n    </GridListItem>\n  )\n}\n\nChoicebox.Item = ChoiceboxItem\nexport { Choicebox }\n",
    "type": "ui"
  },
  "switch": {
    "component": "@/components/ui/switch",
    "raw": "\"use client\"\n\nimport {\n  Switch as SwitchPrimitive,\n  type SwitchProps as SwitchPrimitiveProps\n} from \"react-aria-components\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nconst trackStyles = tv({\n  base: [\n    \"mr-2 h-5 w-8 bg-toggle cursor-pointer rounded-full border-2 border-transparent transition duration-200\",\n    \"group-focus:ring-4\",\n    \"group-focus:ring-4 group-invalid:ring-danger/20\",\n    \"group-disabled:cursor-default group-disabled:opacity-50\"\n  ],\n  variants: {\n    intent: {\n      primary: \"group-selected:bg-primary group-focus:ring-primary/20\",\n      secondary: \"group-selected:bg-muted-fg group-focus:ring-muted-fg/20\",\n      success: \"group-selected:bg-success group-focus:ring-success/20\",\n      danger: \"group-selected:bg-danger group-focus:ring-danger/20\",\n      warning: \"group-selected:bg-warning group-focus:ring-warning/20\"\n    }\n  },\n  defaultVariants: {\n    intent: \"primary\"\n  }\n})\n\nconst switchStyles = tv({\n  slots: {\n    base: \"group inline-flex touch-none lg:text-sm items-center\",\n    ball: \"forced-colors:disabled:outline-[GrayText] group-selected:ml-3 group-selected:group-data-[pressed]:ml-2 group-pressed:w-5 block size-4 origin-right rounded-full bg-primary-fg shadow transition-all duration-200\"\n  }\n})\n\nconst { base, ball } = switchStyles()\n\ninterface SwitchProps extends SwitchPrimitiveProps, VariantProps<typeof trackStyles> {}\n\nconst Switch = ({ children, intent, className, ...props }: SwitchProps) => {\n  return (\n    <SwitchPrimitive\n      {...props}\n      className={(values) =>\n        base({ className: typeof className === \"function\" ? className(values) : className })\n      }\n      style={{ WebkitTapHighlightColor: \"transparent\" }}\n    >\n      {(values) => (\n        <>\n          <span className={trackStyles({ intent })}>\n            <span className={ball()} />\n          </span>\n          {typeof children === \"function\" ? children(values) : children}\n        </>\n      )}\n    </SwitchPrimitive>\n  )\n}\n\nexport { Switch }\n",
    "type": "ui"
  },
  "description-list": {
    "component": "@/components/ui/description-list",
    "raw": "import * as React from \"react\"\n\nimport { tv } from \"tailwind-variants\"\n\nconst descriptionListStyles = tv({\n  slots: {\n    dl: \"grid grid-cols-1 text-base/6 sm:grid-cols-[min(50%,theme(spacing.80))_auto] sm:text-sm/6\",\n    dt: \"col-start-1 border-t pt-3 text-muted-fg first:border-none sm:py-3\",\n    dd: \"pb-3 pt-1 text-fg sm:border-t sm:py-3 sm:[&:nth-child(2)]:border-none\"\n  }\n})\n\nconst { dl, dt, dd } = descriptionListStyles()\n\nconst DescriptionList = ({ className, ...props }: React.ComponentPropsWithoutRef<\"dl\">) => {\n  return <dl {...props} className={dl({ className })} />\n}\n\nconst DescriptionTerm = ({ className, ...props }: React.ComponentPropsWithoutRef<\"dt\">) => {\n  return <dt {...props} className={dt({ className })} />\n}\n\nconst DescriptionDetails = ({ className, ...props }: React.ComponentPropsWithoutRef<\"dd\">) => {\n  return <dd {...props} className={dd({ className })} />\n}\n\nDescriptionList.Term = DescriptionTerm\nDescriptionList.Details = DescriptionDetails\nexport { DescriptionList }\n",
    "type": "ui"
  },
  "calendar": {
    "component": "@/components/ui/calendar",
    "raw": "\"use client\"\n\nimport { IconChevronLgLeft, IconChevronLgRight } from \"justd-icons\"\nimport {\n  Calendar as CalendarPrimitive,\n  CalendarCell,\n  CalendarGrid,\n  CalendarGridBody,\n  CalendarGridHeader as CalendarGridHeaderPrimitive,\n  CalendarHeaderCell,\n  type CalendarProps as CalendarPrimitiveProps,\n  type DateValue,\n  Heading,\n  Text,\n  useLocale\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Button } from \"./button\"\nimport { cr, ctr, focusRing } from \"./primitive\"\n\nconst cellStyles = tv({\n  extend: focusRing,\n  base: \"flex size-10 sm:size-9 cursor-default tabular-nums items-center justify-center rounded-full lg:text-sm forced-colors:outline-0\",\n  variants: {\n    isSelected: {\n      false:\n        \"text-fg forced-colors:text-[ButtonText] hover:bg-secondary-fg/15 pressed:bg-secondary-fg/20\",\n      true: \"bg-primary text-primary-fg invalid:bg-danger invalid:text-danger-fg forced-colors:bg-[Highlight] forced-colors:text-[Highlight] forced-colors:invalid:bg-[Mark]\"\n    },\n    isDisabled: {\n      true: \"text-muted-fg/70 forced-colors:text-[GrayText]\"\n    }\n  }\n})\n\ninterface CalendarProps<T extends DateValue>\n  extends Omit<CalendarPrimitiveProps<T>, \"visibleDuration\"> {\n  errorMessage?: string\n  className?: string\n}\n\nconst Calendar = <T extends DateValue>({ errorMessage, className, ...props }: CalendarProps<T>) => {\n  return (\n    <CalendarPrimitive className={ctr(className, \"max-w-[17.5rem] sm:max-w-[15.8rem]\")} {...props}>\n      <CalendarHeader />\n      <CalendarGrid className=\"[&_td]:border-collapse [&_td]:px-0\">\n        <CalendarGridHeader />\n        <CalendarGridBody>\n          {(date) => (\n            <CalendarCell\n              date={date}\n              className={cr(className, (className, renderProps) =>\n                cellStyles({\n                  ...renderProps,\n                  className\n                })\n              )}\n            />\n          )}\n        </CalendarGridBody>\n      </CalendarGrid>\n      {errorMessage && (\n        <Text slot=\"errorMessage\" className=\"text-sm text-red-600\">\n          {errorMessage}\n        </Text>\n      )}\n    </CalendarPrimitive>\n  )\n}\n\nconst calendarHeaderStyles = tv({\n  slots: {\n    header: \"flex w-full justify-center gap-1 px-1 pb-5 sm:pb-4\",\n    heading: \"mr-2 text-muted-fg tracking-tight flex-1 text-left font-medium\",\n    calendarGridHeaderCell: \"text-sm lg:text-xs font-semibold text-muted-fg\"\n  }\n})\n\nconst { header, heading, calendarGridHeaderCell } = calendarHeaderStyles()\n\nconst CalendarHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n  const { direction } = useLocale()\n\n  return (\n    <header className={header({ className })} {...props}>\n      <Heading className={heading()} />\n      <div className=\"flex items-center gap-1\">\n        <Button\n          size=\"square-petite\"\n          className=\"[&_[data-slot=icon]]:text-fg size-8 sm:size-7\"\n          shape=\"circle\"\n          appearance=\"plain\"\n          slot=\"previous\"\n        >\n          {direction === \"rtl\" ? <IconChevronLgRight /> : <IconChevronLgLeft aria-hidden />}\n        </Button>\n        <Button\n          size=\"square-petite\"\n          className=\"[&_[data-slot=icon]]:text-fg size-8 sm:size-7\"\n          shape=\"circle\"\n          appearance=\"plain\"\n          slot=\"next\"\n        >\n          {direction === \"rtl\" ? <IconChevronLgLeft /> : <IconChevronLgRight />}\n        </Button>\n      </div>\n    </header>\n  )\n}\n\nconst CalendarGridHeader = () => {\n  return (\n    <CalendarGridHeaderPrimitive>\n      {(day) => <CalendarHeaderCell className={calendarGridHeaderCell()}>{day}</CalendarHeaderCell>}\n    </CalendarGridHeaderPrimitive>\n  )\n}\n\nCalendar.Header = CalendarHeader\nCalendar.GridHeader = CalendarGridHeader\nexport { Calendar }\n",
    "type": "ui"
  },
  "tree": {
    "component": "@/components/ui/tree",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconChevronRight } from \"justd-icons\"\nimport type { TreeItemProps as TreeItemPrimitiveProps, TreeProps } from \"react-aria-components\"\nimport {\n  Button,\n  UNSTABLE_Tree as TreePrimitive,\n  UNSTABLE_TreeItem as TreeItemPrimitive,\n  UNSTABLE_TreeItemContent as TreeItemContent\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Checkbox } from \"./checkbox\"\nimport { cr } from \"./primitive\"\n\nconst treeStyles = tv({\n  base: \"flex border max-h-96 min-w-72 [&::-webkit-scrollbar]:size-0.5 [scrollbar-width:thin] py-2 rounded-lg bg-bg cursor-default lg:text-sm flex-col overflow-auto forced-color-adjust-none outline-none\",\n  variants: {\n    isFocusVisible: {\n      true: \"outline-offset-[-1px] outline-2 outline-primary\"\n    }\n  }\n})\n\nconst Tree = <T extends object>({ className, ...props }: TreeProps<T>) => {\n  return (\n    <TreePrimitive\n      className={cr(className, (className, renderProps) =>\n        treeStyles({\n          ...renderProps,\n          className\n        })\n      )}\n      {...props}\n    >\n      {props.children}\n    </TreePrimitive>\n  )\n}\n\nconst itemStyles = tv({\n  base: [\n    \"[&_[data-expanded]_[slot=chevron]_[data-slot=icon]]:rotate-90 outline-none [--padding:20px] p-[0.286rem_0.286rem_0.286rem_0.571rem] pl-[calc((var(--tree-item-level)-1)*20px+0.571rem+var(--padding))]\",\n    \"[&_[slot=chevron]]:outline-none [&_[slot=chevron]_[data-slot=icon]]:text-muted-fg\",\n    \"data-[has-child-rows]:[--padding:0px]\"\n  ],\n  variants: {\n    isExpanded: {\n      true: \"[&_[slot=chevron]_[data-slot=icon]]:text-fg [&_[slot=chevron]_[data-slot=icon]]:rotate-90 [&_[slot=chevron]_[data-slot=icon]]:transition [&_[slot=chevron]_[data-slot=icon]]:duration-200\"\n    },\n    isFocusVisible: {\n      true: \"[&_[slot=chevron]_[data-slot=icon]]:text-fg focus:outline-none focus-visible:ring-1 focus-visible:ring-primary\"\n    },\n    isDisabled: {\n      true: \"opacity-50 forced-colors:text-[GrayText]\"\n    }\n  }\n})\n\nconst TreeItem = <T extends object>({ className, ...props }: TreeItemPrimitiveProps<T>) => {\n  return (\n    <TreeItemPrimitive\n      className={cr(className, (className, renderProps) =>\n        itemStyles({\n          ...renderProps,\n          className\n        })\n      )}\n      {...props}\n    >\n      {props.children}\n    </TreeItemPrimitive>\n  )\n}\n\nconst ItemContent = (props: React.ComponentProps<typeof TreeItemContent>) => {\n  return (\n    <TreeItemContent {...props}>\n      <div className=\"flex items-center\">\n        <>{props.children as React.ReactNode}</>\n      </div>\n    </TreeItemContent>\n  )\n}\n\nconst Indicator = () => {\n  return (\n    <Button className=\"shrink-0 relative\" slot=\"chevron\">\n      <>\n        <IconChevronRight className=\"size-5\" />\n      </>\n    </Button>\n  )\n}\n\nconst ItemCheckbox = () => {\n  return <Checkbox slot=\"selection\" />\n}\n\nconst ItemLabel = (props: React.HtmlHTMLAttributes<HTMLSpanElement>) => {\n  return <span {...props} />\n}\n\nTreeItem.Label = ItemLabel\nTreeItem.Indicator = Indicator\nTreeItem.Checkbox = ItemCheckbox\nTreeItem.Content = ItemContent\n\nexport { Tree, TreeItem }\n",
    "type": "ui"
  },
  "grid-list": {
    "component": "@/components/ui/grid-list",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconHamburger } from \"justd-icons\"\nimport type { GridListItemProps, GridListProps } from \"react-aria-components\"\nimport { Button, GridList as GridListPrimitive, GridListItem } from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Checkbox } from \"./checkbox\"\nimport { cr, ctr } from \"./primitive\"\n\nconst gridListStyles = tv({\n  base: \"relative [&>[data-drop-target]]:border [&>[data-drop-target]]:border-primary [&::-webkit-scrollbar]:size-0.5 [scrollbar-width:thin] max-h-96 overflow-auto rounded-lg border\"\n})\n\nconst GridList = <T extends object>({ children, className, ...props }: GridListProps<T>) => (\n  <GridListPrimitive className={ctr(className, gridListStyles())} {...props}>\n    {children}\n  </GridListPrimitive>\n)\n\nconst itemStyles = tv({\n  base: \"relative group transition outline-none flex cursor-default select-none gap-3 border-y px-3 -mb-px py-2 lg:text-sm text-fg -outline-offset-2 first:rounded-t-md first:border-t-0 last:mb-0 last:rounded-b-md last:border-b-0\",\n  variants: {\n    isHovered: { true: \"bg-accent-subtle\" },\n    isSelected: {\n      true: \"bg-accent-subtle z-20 border-border/50 hover:bg-accent-subtle/50 dark:hover:bg-accent-subtle/60\"\n    },\n    isFocused: {\n      true: \"outline-none\"\n    },\n    isFocusVisible: {\n      true: \"ring-1 ring-primary outline-none bg-accent-subtle selected:bg-accent-subtle/80 hover:bg-accent-subtle/70\"\n    },\n    isDisabled: {\n      true: \"text-muted-fg forced-colors:text-[GrayText]\"\n    }\n  }\n})\n\nconst Item = ({ className, ...props }: GridListItemProps) => {\n  const textValue = typeof props.children === \"string\" ? props.children : undefined\n  return (\n    <GridListItem\n      textValue={textValue}\n      {...props}\n      className={cr(className, (className, renderProps) =>\n        itemStyles({ ...renderProps, className })\n      )}\n    >\n      {({ selectionMode, selectionBehavior, allowsDragging }) => (\n        <>\n          {allowsDragging && (\n            <Button\n              slot=\"drag\"\n              className=\"cursor-grab dragging:cursor-grabbing [&>[data-slot=icon]]:text-muted-fg\"\n            >\n              <IconHamburger />\n            </Button>\n          )}\n\n          <span\n            aria-hidden\n            className=\"absolute inset-y-0 left-0 hidden h-full w-0.5 bg-primary group-selected:block\"\n          />\n          {selectionMode === \"multiple\" && selectionBehavior === \"toggle\" && (\n            <Checkbox className=\"-mr-2\" slot=\"selection\" />\n          )}\n          {props.children as React.ReactNode}\n        </>\n      )}\n    </GridListItem>\n  )\n}\n\nconst EmptyState = (props: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className=\"p-6\" {...props} />\n)\n\nGridList.Item = Item\nGridList.EmptyState = EmptyState\n\nexport { GridList }\n",
    "type": "ui"
  },
  "multiple-select": {
    "component": "@/components/ui/multiple-select",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\nimport { useState } from \"react\"\n\nimport { IconChevronLgDown } from \"justd-icons\"\nimport { useFilter } from \"react-aria\"\nimport type {\n  ComboBoxProps as ComboBoxPrimitiveProps,\n  Key,\n  ValidationResult\n} from \"react-aria-components\"\nimport { ComboBox } from \"react-aria-components\"\nimport type { ListData } from \"react-stately\"\nimport { useListData } from \"react-stately\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Button } from \"./button\"\nimport type { FieldProps } from \"./field\"\nimport { Description, FieldError, Input, Label } from \"./field\"\nimport { ListBox } from \"./list-box\"\nimport { Popover } from \"./popover\"\nimport { cn } from \"./primitive\"\nimport type { RestrictedIntent, TagGroupProps } from \"./tag-group\"\nimport { Tag } from \"./tag-group\"\nimport { VisuallyHidden } from \"./visually-hidden\"\n\nconst multiSelectStyles = tv({\n  slots: {\n    multiSelectField: \"group flex w-full min-w-80 flex-col\",\n    multiSelect: [\n      \"relative px-1 flex min-h-10 flex-row flex-wrap items-center rounded-lg bg-bg shadow-sm border\",\n      \"has-[input[data-focused=true]]:border-ring/85\",\n      \"has-[input[data-invalid=true][data-focused=true]]:border-blue-500\",\n      \"has-[input[data-invalid=true]]:border-danger\",\n      \"has-[input[data-focused=true]]:ring-4 has-[input[data-focused=true]]:ring-ring/20\"\n    ],\n    chevronButton:\n      \"size-8 -mr-2 grid place-content-center rounded-sm hover:text-fg focus:text-fg text-muted-fg\",\n    input: \"flex-1 py-1 px-0.5 ml-1 shadow-none ring-0\",\n    comboBoxChild: \"inline-flex flex-1 flex-wrap items-center px-0\",\n    comboBox: \"group peer flex flex-1\"\n  }\n})\n\nconst { multiSelectField, multiSelect, chevronButton, input, comboBox, comboBoxChild } =\n  multiSelectStyles()\n\ninterface SelectedKey {\n  id: Key\n  name: string\n}\n\ninterface MultipleSelectProps<T extends object>\n  extends FieldProps,\n    Omit<\n      ComboBoxPrimitiveProps<T>,\n      | \"children\"\n      | \"validate\"\n      | \"allowsEmptyCollection\"\n      | \"inputValue\"\n      | \"selectedKey\"\n      | \"className\"\n      | \"value\"\n      | \"onSelectionChange\"\n      | \"onInputChange\"\n    >,\n    Pick<TagGroupProps, \"shape\"> {\n  intent?: RestrictedIntent\n  items: Array<T>\n  selectedItems: ListData<T>\n  className?: string\n  onItemInserted?: (key: Key) => void\n  onItemCleared?: (key: Key) => void\n  renderEmptyState?: (inputValue: string) => React.ReactNode\n  tag: (item: T) => React.ReactNode\n  children: React.ReactNode | ((item: T) => React.ReactNode)\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst MultipleSelect = <T extends SelectedKey>({\n  children,\n  items,\n  selectedItems,\n  onItemCleared,\n  onItemInserted,\n  className,\n  name,\n  renderEmptyState,\n  errorMessage,\n  ...props\n}: MultipleSelectProps<T>) => {\n  const tagGroupIdentifier = React.useId()\n  const triggerRef = React.useRef<HTMLDivElement | null>(null)\n  const [width, setWidth] = React.useState(0)\n\n  const { contains } = useFilter({ sensitivity: \"base\" })\n  const selectedKeys = selectedItems.items.map((i) => i.id)\n\n  const filter = React.useCallback(\n    (item: T, filterText: string) => {\n      return !selectedKeys.includes(item.id) && contains(item.name, filterText)\n    },\n    [contains, selectedKeys]\n  )\n\n  const accessibleList = useListData({\n    initialItems: items,\n    filter\n  })\n\n  const [fieldState, setFieldState] = useState<{\n    selectedKey: Key | null\n    inputValue: string\n  }>({\n    selectedKey: null,\n    inputValue: \"\"\n  })\n\n  const onRemove = React.useCallback(\n    (keys: Set<Key>) => {\n      const key = keys.values().next().value\n      if (key) {\n        selectedItems.remove(key)\n        setFieldState({\n          inputValue: \"\",\n          selectedKey: null\n        })\n        onItemCleared?.(key)\n      }\n    },\n    [selectedItems, onItemCleared]\n  )\n\n  const onSelectionChange = (id: Key | null) => {\n    if (!id) {\n      return\n    }\n\n    const item = accessibleList.getItem(id)\n\n    if (!item) {\n      return\n    }\n\n    if (!selectedKeys.includes(id)) {\n      selectedItems.append(item)\n      setFieldState({\n        inputValue: \"\",\n        selectedKey: id\n      })\n      onItemInserted?.(id)\n    }\n\n    accessibleList.setFilterText(\"\")\n  }\n\n  const onInputChange = (value: string) => {\n    setFieldState((prev) => ({\n      inputValue: value,\n      selectedKey: value === \"\" ? null : prev.selectedKey\n    }))\n\n    accessibleList.setFilterText(value)\n  }\n\n  const popLast = React.useCallback(() => {\n    if (selectedItems.items.length == 0) {\n      return\n    }\n\n    const endKey = selectedItems.items[selectedItems.items.length - 1]\n\n    if (endKey !== null) {\n      selectedItems.remove(endKey.id)\n      onItemCleared?.(endKey.id)\n    }\n\n    setFieldState({\n      inputValue: \"\",\n      selectedKey: null\n    })\n  }, [selectedItems, onItemCleared])\n\n  const onKeyDownCapture = React.useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === \"Backspace\" && fieldState.inputValue === \"\") {\n        popLast()\n      }\n    },\n    [popLast, fieldState.inputValue]\n  )\n\n  React.useEffect(() => {\n    const trigger = triggerRef.current\n    if (!trigger) return\n\n    const observer = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        setWidth(entry.target.clientWidth)\n      }\n    })\n\n    observer.observe(trigger)\n    return () => {\n      observer.unobserve(trigger)\n    }\n  }, [triggerRef])\n\n  const triggerButtonRef = React.useRef<HTMLButtonElement | null>(null)\n\n  return (\n    <div className={multiSelectField({ className })}>\n      {props.label && <Label className=\"mb-1\">{props.label}</Label>}\n      <div className={props.isDisabled ? \"opacity-50\" : \"\"}>\n        <div ref={triggerRef} className={multiSelect({ className })}>\n          <Tag.Group\n            shape={props.shape}\n            intent={props.intent}\n            aria-label=\"Selected items\"\n            id={tagGroupIdentifier}\n            onRemove={onRemove}\n          >\n            <Tag.List\n              items={selectedItems.items}\n              className={cn(\n                selectedItems.items.length !== 0 && \"px-1 py-1.5\",\n                \"last:[&_.jdt3lr2x]:-mr-1 outline-none gap-1.5\",\n                props.shape === \"square\" && \"[&_.jdt3lr2x]:rounded-[calc(var(--radius)-4px)]\"\n              )}\n            >\n              {props.tag}\n            </Tag.List>\n          </Tag.Group>\n          <ComboBox\n            {...props}\n            allowsEmptyCollection\n            aria-label=\"Available items\"\n            className={comboBox()}\n            items={accessibleList.items}\n            selectedKey={fieldState.selectedKey}\n            inputValue={fieldState.inputValue}\n            onSelectionChange={onSelectionChange}\n            onInputChange={onInputChange}\n          >\n            <div className={comboBoxChild({ className })}>\n              <Input\n                placeholder={props.placeholder}\n                className={input()}\n                onBlur={() => {\n                  setFieldState({\n                    inputValue: \"\",\n                    selectedKey: null\n                  })\n                  accessibleList.setFilterText(\"\")\n                }}\n                onKeyDownCapture={onKeyDownCapture}\n              />\n\n              <VisuallyHidden>\n                <Button\n                  slot=\"remove\"\n                  type=\"button\"\n                  aria-label=\"Remove\"\n                  appearance=\"plain\"\n                  size=\"square-petite\"\n                  ref={triggerButtonRef}\n                >\n                  <IconChevronLgDown />\n                </Button>\n              </VisuallyHidden>\n            </div>\n            <Popover.Picker\n              className=\"max-w-none\"\n              style={{ width: `${width}px` }}\n              triggerRef={triggerRef}\n              trigger=\"ComboBox\"\n            >\n              <ListBox.Picker\n                renderEmptyState={() =>\n                  renderEmptyState ? (\n                    renderEmptyState(fieldState.inputValue)\n                  ) : (\n                    <Description className=\"p-3 block\">\n                      {fieldState.inputValue ? (\n                        <>\n                          No results found for:{\" \"}\n                          <strong className=\"font-medium text-fg\">{fieldState.inputValue}</strong>\n                        </>\n                      ) : (\n                        `No options`\n                      )}\n                    </Description>\n                  )\n                }\n                selectionMode=\"multiple\"\n              >\n                {children}\n              </ListBox.Picker>\n            </Popover.Picker>\n          </ComboBox>\n          <div className=\"relative px-1 ml-auto flex items-center justify-center\" aria-hidden>\n            <button\n              type=\"button\"\n              className={chevronButton()}\n              onClick={() => triggerButtonRef.current?.click()}\n              tabIndex={-1}\n            >\n              <IconChevronLgDown className=\"peer/[data-open]:rotate-180 size-4\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      {props.description && <Description>{props.description}</Description>}\n      {<FieldError>{errorMessage}</FieldError>}\n      {name && <input hidden name={name} value={selectedKeys.join(\",\")} readOnly />}\n    </div>\n  )\n}\n\nMultipleSelect.Tag = Tag.Item\nMultipleSelect.Option = ListBox.Item\n\nexport { MultipleSelect, type SelectedKey }\n",
    "type": "ui"
  },
  "dropdown": {
    "component": "@/components/ui/dropdown",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconCheck } from \"justd-icons\"\nimport {\n  Collection,\n  Header,\n  ListBoxItem as ListBoxItemPrimitive,\n  type ListBoxItemProps,\n  ListBoxSection,\n  type SectionProps,\n  Text,\n  type TextProps\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { cn, cr } from \"./primitive\"\n\nconst dropdownItemStyles = tv({\n  base: [\n    \"group text-fg forced-colors:text-[LinkText] flex cursor-default forced-color-adjust-none select-none items-center gap-x-1.5 rounded-[calc(var(--radius)-1px)] py-2 px-2.5 relative text-base outline outline-0 forced-color:text-[Highlight] lg:text-sm\",\n    \"has-submenu:open:data-[danger=true]:bg-danger/20 has-submenu:open:data-[danger=true]:text-danger\",\n    \"has-submenu:open:bg-accent has-submenu:open:text-accent-fg [&[data-has-submenu][data-open]_[data-slot=icon]]:text-accent-fg [&[data-has-submenu][data-open]_.text-muted-fg]:text-accent-fg\",\n    \"[&_[data-slot=avatar]]:-mr-0.5 [&_[data-slot=avatar]]:size-6 sm:[&_[data-slot=avatar]]:size-5\",\n    \"[&_[data-slot=icon]]:size-4 [&_[data-slot=icon]]:shrink-0 [&_[data-slot=icon]]:text-muted-fg [&[data-hovered]_[data-slot=icon]]:text-accent-fg [&[data-focused]_[data-slot=icon]]:text-accent-fg [&[data-danger]_[data-slot=icon]]:text-danger/60 [&[data-focused][data-danger]_[data-slot=icon]]:text-danger-fg\",\n    \"[&_[data-slot=menu-radio]>[data-slot=icon]]:size-3\",\n    \"forced-colors:[&_[data-slot=icon]]:text-[CanvasText] forced-colors:[&_[data-slot=icon]]:group-data-[focus]:text-[Canvas] \"\n  ],\n  variants: {\n    isDisabled: {\n      true: \"text-muted-fg forced-colors:text-[GrayText]\"\n    },\n    isFocused: {\n      false: \"data-[danger=true]:text-danger\",\n      true: [\n        \"bg-accent text-accent-fg forced-colors:text-[HighlightText] forced-colors:bg-[Highlight]\",\n        \"data-[danger=true]:bg-danger data-[danger=true]:text-danger-fg\",\n        \"[&_.text-muted-fg]:text-accent-fg/80 [&[data-slot=label]]:text-accent-fg [&[data-slot=description]]:text-accent-fg\"\n      ]\n    }\n  },\n  compoundVariants: [\n    {\n      isFocused: false,\n      isOpen: true,\n      className: \"bg-secondary\"\n    }\n  ]\n})\n\nconst dropdownSectionStyles = tv({\n  slots: {\n    section:\n      \"first:-mt-[5px] xss3 flex flex-col gap-y-0.5 after:content-[''] after:block after:h-[5px]\",\n    header:\n      \"text-sm font-medium text-muted-fg px-4 py-2 truncate min-w-[--trigger-width] sticky -top-[5px] bg-tertiary -mb-0.5 -mx-1 z-10 supports-[-moz-appearance:none]:bg-tertiary border-y [&+*]:mt-1\"\n  }\n})\n\nconst { section, header } = dropdownSectionStyles()\n\ninterface DropdownSectionProps<T> extends SectionProps<T> {\n  title?: string\n}\n\nconst DropdownSection = <T extends object>({ className, ...props }: DropdownSectionProps<T>) => {\n  return (\n    <ListBoxSection className={section({ className })}>\n      {\"title\" in props && <Header className={header()}>{props.title}</Header>}\n      <Collection items={props.items}>{props.children}</Collection>\n    </ListBoxSection>\n  )\n}\n\nconst DropdownItem = ({ className, ...props }: ListBoxItemProps) => {\n  const textValue =\n    props.textValue || (typeof props.children === \"string\" ? props.children : undefined)\n  return (\n    <ListBoxItemPrimitive\n      textValue={textValue}\n      className={cr(className, (className, renderProps) =>\n        dropdownItemStyles({ ...renderProps, className })\n      )}\n      {...props}\n    >\n      {cr(props.children, (children, { isSelected }) => (\n        <>\n          <span className=\"flex flex-1 items-center gap-2 truncate font-normal group-selected:font-medium\">\n            {children}\n          </span>\n\n          {isSelected && (\n            <span className=\"absolute right-2 top-3 lg:top-2.5\">\n              <IconCheck />\n            </span>\n          )}\n        </>\n      ))}\n    </ListBoxItemPrimitive>\n  )\n}\n\ninterface DropdownItemSlot extends TextProps {\n  label?: TextProps[\"children\"]\n  description?: TextProps[\"children\"]\n  classNames?: {\n    label?: TextProps[\"className\"]\n    description?: TextProps[\"className\"]\n  }\n}\n\nconst DropdownItemDetails = ({ label, description, classNames, ...props }: DropdownItemSlot) => {\n  const { slot, children, title, ...restProps } = props\n\n  return (\n    <div className=\"flex flex-col gap-y-1\" {...restProps}>\n      {label && (\n        <Text\n          slot={slot ?? \"label\"}\n          className={cn(\"font-medium lg:text-sm\", classNames?.label)}\n          {...restProps}\n        >\n          {label}\n        </Text>\n      )}\n      {description && (\n        <Text\n          slot={slot ?? \"description\"}\n          className={cn(\"text-muted-fg text-xs\", classNames?.description)}\n          {...restProps}\n        >\n          {description}\n        </Text>\n      )}\n      {!title && children}\n    </div>\n  )\n}\n\n// Note: This is not exposed component, but it's used in other components to render dropdowns.\nexport {\n  DropdownItem,\n  dropdownItemStyles,\n  DropdownItemDetails,\n  DropdownSection,\n  dropdownSectionStyles\n}\n",
    "type": "ui"
  },
  "avatar": {
    "component": "@/components/ui/avatar",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { VisuallyHidden } from \"./visually-hidden\"\n\nconst avatarGroupStyles = tv({\n  base: \"flex items-center justify-center -space-x-2 [&_[data-slot=avatar]]:ring-2 [&_[data-slot=avatar]]:ring-bg\"\n})\n\ninterface AvatarGroupProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof avatarGroupStyles> {\n  children: React.ReactNode\n}\n\nconst AvatarGroup = ({ className, ...props }: AvatarGroupProps) => {\n  return <div className={avatarGroupStyles({ className })} {...props} />\n}\n\nconst avatarStyles = tv({\n  base: [\n    \"grid relative place-content-center shrink-0 bg-secondary align-middle [--avatar-radius:20%] [--ring-opacity:20%] *:col-start-1 *:row-start-1\",\n    \"loo2ppvkxrcah38e outline outline-1 -outline-offset-1 outline-fg/[--ring-opacity]\"\n  ],\n  variants: {\n    size: {\n      \"extra-small\": \"size-5\",\n      small: \"size-6\",\n      medium: \"size-8\",\n      large: \"size-10\"\n    },\n    shape: {\n      square:\n        \"rounded-[--avatar-radius] *:rounded-[--avatar-radius] [&_[data-slot=badge]]:rounded-full\",\n      circle: \"rounded-full *:rounded-full\"\n    }\n  },\n\n  defaultVariants: {\n    shape: \"circle\",\n    size: \"medium\"\n  }\n})\n\ntype Status = \"away\" | \"online\" | \"offline\" | \"dnd\" | \"idle\"\n\ninterface AvatarProps\n  extends React.ComponentPropsWithoutRef<\"span\">,\n    VariantProps<typeof avatarStyles> {\n  src?: string | null\n  initials?: string\n  alt?: string\n  status?: Status\n  className?: string\n}\n\nconst Avatar = ({\n  status,\n  src = null,\n  initials,\n  alt = \"\",\n  children,\n  className,\n  shape,\n  size,\n  ...props\n}: AvatarProps) => {\n  const badgeId = React.useId()\n  const ariaLabelledby = [badgeId, children ? badgeId : \"\"].join(\" \")\n  return (\n    <span\n      aria-labelledby={ariaLabelledby}\n      data-slot=\"avatar\"\n      {...props}\n      className={avatarStyles({ shape, size, className })}\n    >\n      {initials && (\n        <svg\n          className=\"select-none fill-current text-[48px] font-medium uppercase\"\n          viewBox=\"0 0 100 100\"\n          aria-hidden={alt ? undefined : \"true\"}\n        >\n          {alt && <title>{alt}</title>}\n          <text\n            x=\"50%\"\n            y=\"50%\"\n            alignmentBaseline=\"middle\"\n            dominantBaseline=\"middle\"\n            textAnchor=\"middle\"\n            dy=\".125em\"\n          >\n            {initials}\n          </text>\n        </svg>\n      )}\n      {src && <img src={src} alt={alt} />}\n      {status && <AvatarBadge size={size} status={status} aria-label={status} />}\n    </span>\n  )\n}\n\ntype AvatarBadgeProps = {\n  className?: string\n  status?: Status\n  fillBackground?: boolean\n  \"aria-label\": string\n  size?: AvatarProps[\"size\"]\n}\n\nconst avatarBadgeStyles = tv({\n  base: [\"size-3 z-10 absolute bottom-0 right-0 rounded-full ring-[1.5px] ring-bg bg-bg\"],\n  variants: {\n    size: {\n      \"extra-small\": \"size-[0.360rem] translate-x-[0%] translate-y-[0%]\",\n      small: \"size-1.5 translate-x-[0%] translate-y-[0%]\",\n      medium: \"size-2 translate-x-[5%] translate-y-[5%]\",\n      large: \"size-2.5 translate-x-[5%] translate-y-[5%]\"\n    },\n    status: {\n      away: \"bg-danger\",\n      online: \"bg-success\",\n      offline: \"bg-muted-fg\",\n      dnd: \"bg-warning\",\n      idle: \"bg-muted-fg\"\n    }\n  },\n  defaultVariants: {\n    size: \"medium\",\n    status: \"idle\"\n  }\n})\n\nconst AvatarBadge = ({ size, className, status, ...props }: AvatarBadgeProps) => {\n  return (\n    <span\n      data-slot=\"badge\"\n      {...props}\n      aria-hidden\n      className={avatarBadgeStyles({ size, status, className })}\n    >\n      <VisuallyHidden>{status}</VisuallyHidden>\n    </span>\n  )\n}\n\nexport { Avatar, AvatarGroup }\n",
    "type": "ui"
  },
  "color-swatch": {
    "component": "@/components/ui/color-swatch",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { parseColor } from \"@react-stately/color\"\nimport { ColorSwatch as ColorSwatchPrimitive, type ColorSwatchProps } from \"react-aria-components\"\n\nimport { cn } from \"./primitive\"\n\nconst hexToRgb = (hex: string): { r: number; g: number; b: number } | null => {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i\n  hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b)\n\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n      }\n    : null\n}\n\nconst hsbToRgb = (h: number, s: number, b: number): { r: number; g: number; b: number } => {\n  s /= 100\n  b /= 100\n  const k = (n: number) => (n + h / 60) % 6\n  const f = (n: number) => b * (1 - s * Math.max(0, Math.min(k(n), 4 - k(n), 1)))\n  return {\n    r: Math.round(255 * f(5)),\n    g: Math.round(255 * f(3)),\n    b: Math.round(255 * f(1))\n  }\n}\n\nconst luminance = (r: number, g: number, b: number): number => {\n  const a = [r, g, b].map((v) => {\n    v /= 255\n    return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4)\n  })\n  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722\n}\n\ntype HSBColor = {\n  hue: number\n  saturation: number\n  brightness: number\n}\n\nconst isBrightColor = (color: string | HSBColor): boolean => {\n  let r, g, b\n\n  if (typeof color === \"string\") {\n    if (color.startsWith(\"#\")) {\n      const rgb = hexToRgb(color)\n      if (rgb) {\n        r = rgb.r\n        g = rgb.g\n        b = rgb.b\n      } else {\n        return false\n      }\n    } else if (color.startsWith(\"rgb\")) {\n      const rgbValues = color.match(/\\d+/g)\n      if (rgbValues) {\n        r = parseInt(rgbValues[0], 10)\n        g = parseInt(rgbValues[1], 10)\n        b = parseInt(rgbValues[2], 10)\n      } else {\n        return false\n      }\n    } else {\n      const namedColors: Record<string, string> = {\n        white: \"#ffffff\",\n        black: \"#000000\"\n      }\n      const hex = namedColors[color.toLowerCase()]\n      if (hex) {\n        const rgb = hexToRgb(hex)\n        if (rgb) {\n          r = rgb.r\n          g = rgb.g\n          b = rgb.b\n        } else {\n          return false\n        }\n      } else {\n        return false\n      }\n    }\n  } else if (\n    typeof color === \"object\" &&\n    \"hue\" in color &&\n    \"saturation\" in color &&\n    \"brightness\" in color\n  ) {\n    const rgb = hsbToRgb(color.hue, color.saturation, color.brightness)\n    r = rgb.r\n    g = rgb.g\n    b = rgb.b\n  } else {\n    return false\n  }\n\n  const lum = luminance(r, g, b)\n  return lum > 0.75\n}\n\nconst defaultColor = parseColor(\"hsl(216, 98%, 52%)\")\n\nconst ColorSwatch = ({ className, ...props }: ColorSwatchProps) => {\n  const color = props.color?.toString() ?? \"\"\n  const needRing = color ? isBrightColor(color) : false\n  return (\n    <ColorSwatchPrimitive\n      data-slot=\"color-swatch\"\n      aria-label={props[\"aria-label\"] ?? \"Color swatch\"}\n      className={cn(\n        \"size-8 cs rounded-md shrink-0\",\n        needRing && \"ring-1 ring-inset ring-fg/10\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { ColorSwatch, isBrightColor, defaultColor }\n",
    "type": "ui"
  },
  "range-calendar": {
    "component": "@/components/ui/range-calendar",
    "raw": "\"use client\"\n\nimport type {\n  DateValue,\n  RangeCalendarProps as RangeCalendarPrimitiveProps\n} from \"react-aria-components\"\nimport {\n  CalendarCell,\n  CalendarGrid,\n  CalendarGridBody,\n  RangeCalendar as RangeCalendarPrimitive,\n  Text\n} from \"react-aria-components\"\nimport { twJoin } from \"tailwind-merge\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Calendar } from \"./calendar\"\nimport { ctr, focusRing } from \"./primitive\"\n\nconst cellRangeStyles = tv({\n  extend: focusRing,\n  base: \"flex h-full w-full items-center tabular-nums justify-center rounded-full forced-color-adjust-none\",\n  variants: {\n    selectionState: {\n      none: \"group-hover:bg-secondary-fg/15 group-pressed:bg-secondary-fg/20 forced-colors:group-pressed:bg-[Highlight]\",\n      middle: [\n        \"group-hover:bg-primary/20 forced-colors:group-hover:bg-[Highlight]\",\n        \"group-invalid:group-hover:bg-red-200 group-invalid:text-red-500 dark:group-invalid:group-hover:bg-red-900 forced-colors:group-invalid:group-hover:bg-[Mark]\",\n        \"group-pressed:bg-primary forced-colors:text-[HighlightText] forced-colors:group-pressed:bg-[Highlight]\",\n        \"group-invalid:group-pressed:bg-red-300 dark:group-invalid:group-pressed:bg-red-800 forced-colors:group-invalid:group-pressed:bg-[Mark]\"\n      ],\n      cap: \"bg-primary text-primary-fg group-invalid:bg-danger group-invalid:text-danger-fg forced-colors:bg-[Highlight] forced-colors:text-[HighlightText] forced-colors:group-invalid:bg-[Mark]\"\n    },\n    isDisabled: {\n      true: \"text-muted-fg/70 forced-colors:text-[GrayText]\"\n    }\n  }\n})\n\ninterface RangeCalendarProps<T extends DateValue>\n  extends Omit<RangeCalendarPrimitiveProps<T>, \"visibleDuration\"> {\n  errorMessage?: string\n}\n\nconst RangeCalendar = <T extends DateValue>({\n  errorMessage,\n  className,\n  ...props\n}: RangeCalendarProps<T>) => {\n  return (\n    <RangeCalendarPrimitive\n      className={ctr(className, \"max-w-[17.5rem] sm:max-w-[15.8rem]\")}\n      {...props}\n    >\n      <Calendar.Header />\n      <CalendarGrid className=\"[&_td]:border-collapse [&_td]:px-0\">\n        <Calendar.GridHeader />\n        <CalendarGridBody>\n          {(date) => (\n            <CalendarCell\n              date={date}\n              className={twJoin([\n                \"group size-10 lg:size-9 cursor-default lg:text-sm outline outline-0 outside-month:text-zinc-300 selection-start:rounded-s-full selection-end:rounded-e-full forced-colors:selected:bg-[Highlight] forced-colors:invalid:selected:bg-[Mark]\",\n                \"selected:bg-primary/10 dark:selected:bg-primary/15 selected:text-primary forced-colors:selected:text-[HighlightText]\",\n                \"[td:first-child_&]:rounded-s-full [td:last-child_&]:rounded-e-full\",\n                \"invalid:selected:bg-red-100 dark:invalid:selected:bg-red-700/30\"\n              ])}\n            >\n              {({\n                formattedDate,\n                isSelected,\n                isSelectionStart,\n                isSelectionEnd,\n                ...renderProps\n              }) => (\n                <span\n                  className={cellRangeStyles({\n                    ...renderProps,\n                    selectionState:\n                      isSelected && (isSelectionStart || isSelectionEnd)\n                        ? \"cap\"\n                        : isSelected\n                          ? \"middle\"\n                          : \"none\"\n                  })}\n                >\n                  {formattedDate}\n                </span>\n              )}\n            </CalendarCell>\n          )}\n        </CalendarGridBody>\n      </CalendarGrid>\n      {errorMessage && (\n        <Text slot=\"errorMessage\" className=\"text-sm text-danger\">\n          {errorMessage}\n        </Text>\n      )}\n    </RangeCalendarPrimitive>\n  )\n}\n\nexport { RangeCalendar }\n",
    "type": "ui"
  },
  "combo-box": {
    "component": "@/components/ui/combo-box",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconChevronLgDown, IconX } from \"justd-icons\"\nimport type { InputProps } from \"react-aria-components\"\nimport {\n  ComboBox as ComboboxPrimitive,\n  ComboBoxContext,\n  type ComboBoxProps as ComboboxPrimitiveProps,\n  ComboBoxStateContext,\n  type PopoverProps as PopoverPrimitiveProps,\n  useSlottedContext,\n  type ValidationResult\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Button, ButtonPrimitive } from \"./button\"\nimport { DropdownItem, DropdownSection } from \"./dropdown\"\nimport { Description, FieldError, FieldGroup, Input, Label } from \"./field\"\nimport { ListBox } from \"./list-box\"\nimport { Popover } from \"./popover\"\nimport { ctr } from \"./primitive\"\n\nconst comboboxStyles = tv({\n  slots: {\n    base: \"group w-full flex flex-col gap-y-1.5\",\n    chevronButton:\n      \"h-7 w-8 [&_[data-slot=icon]]:text-muted-fg hover:[&_[data-slot=icon]]:text-fg pressed:[&_[data-slot=icon]]:text-fg rounded outline-offset-0 active:bg-transparent hover:bg-transparent pressed:bg-transparent\",\n    chevronIcon: \"transition shrink-0 size-4 duration-200 group-open:rotate-180 group-open:text-fg\",\n    clearButton:\n      \"focus:outline-none absolute inset-y-0 right-0 flex items-center pr-2 text-muted-fg hover:text-fg\"\n  }\n})\n\nconst { base, chevronButton, chevronIcon, clearButton } = comboboxStyles()\n\ninterface ComboBoxProps<T extends object> extends Omit<ComboboxPrimitiveProps<T>, \"children\"> {\n  label?: string\n  placeholder?: string\n  description?: string | null\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  children: React.ReactNode\n}\n\nconst ComboBox = <T extends object>({\n  label,\n  description,\n  errorMessage,\n  children,\n  className,\n  ...props\n}: ComboBoxProps<T>) => {\n  return (\n    <ComboboxPrimitive {...props} className={ctr(className, base())}>\n      {label && <Label>{label}</Label>}\n      <>{children}</>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </ComboboxPrimitive>\n  )\n}\n\ntype ListBoxPickerProps<T extends object> = React.ComponentProps<typeof ListBox<T>>\n\ninterface ListProps<T extends object>\n  extends ListBoxPickerProps<T>,\n    Omit<PopoverPrimitiveProps, \"children\" | \"className\" | \"style\"> {}\n\nconst List = <T extends object>({ children, items, ...props }: ListProps<T>) => {\n  return (\n    <Popover.Picker trigger=\"ComboBox\" isNonModal placement={props.placement}>\n      <ListBox.Picker items={items} {...props}>\n        {children}\n      </ListBox.Picker>\n    </Popover.Picker>\n  )\n}\n\nconst ComboBoxInput = (props: InputProps) => {\n  const context = useSlottedContext(ComboBoxContext)!\n  return (\n    <FieldGroup className=\"pl-0 relative\">\n      <Input {...props} placeholder={props?.placeholder} />\n      <Button size=\"square-petite\" appearance=\"plain\" className={chevronButton()}>\n        {!context?.inputValue && <IconChevronLgDown className={chevronIcon()} />}\n      </Button>\n      {context?.inputValue && <ComboBoxClearButton />}\n    </FieldGroup>\n  )\n}\n\nconst ComboBoxClearButton = () => {\n  const state = React.useContext(ComboBoxStateContext)\n\n  return (\n    <ButtonPrimitive\n      className={clearButton()}\n      slot={null}\n      aria-label=\"Clear\"\n      onPress={() => {\n        state?.setSelectedKey(null)\n        state?.open()\n      }}\n    >\n      <IconX className=\"size-4 animate-in\" />\n    </ButtonPrimitive>\n  )\n}\n\nComboBox.Input = ComboBoxInput\nComboBox.List = List\nComboBox.Option = DropdownItem\nComboBox.Section = DropdownSection\n\nexport { ComboBox }\n",
    "type": "ui"
  },
  "search-field": {
    "component": "@/components/ui/search-field",
    "raw": "\"use client\"\n\nimport { IconSearch, IconX } from \"justd-icons\"\nimport {\n  SearchField as SearchFieldPrimitive,\n  type SearchFieldProps as SearchFieldPrimitiveProps,\n  type ValidationResult\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Button } from \"./button\"\nimport { Description, FieldError, FieldGroup, Input, Label } from \"./field\"\nimport { Loader } from \"./loader\"\nimport { ctr } from \"./primitive\"\n\nconst searchFieldStyles = tv({\n  slots: {\n    base: \"group flex min-w-10 flex-col gap-y-1.5\",\n    searchIcon:\n      \"ml-2.5 size-4 shrink-0 text-muted-fg group-disabled:text-muted-fg forced-colors:text-[ButtonText] forced-colors:group-disabled:text-[GrayText]\",\n    clearButton: [\n      \"mr-1 size-8 text-muted-fg group-empty:invisible pressed:bg-transparent hover:bg-transparent hover:text-fg pressed:text-fg\"\n    ],\n    input: \"[&::-webkit-search-cancel-button]:hidden\"\n  }\n})\n\nconst { base, searchIcon, clearButton, input } = searchFieldStyles()\n\ninterface SearchFieldProps extends SearchFieldPrimitiveProps {\n  label?: string\n  placeholder?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  isPending?: boolean\n}\n\nconst SearchField = ({\n  className,\n  placeholder,\n  label,\n  description,\n  errorMessage,\n  isPending,\n  ...props\n}: SearchFieldProps) => {\n  return (\n    <SearchFieldPrimitive\n      aria-label={placeholder ?? props[\"aria-label\"] ?? \"Search...\"}\n      {...props}\n      className={ctr(className, base())}\n    >\n      {label && <Label>{label}</Label>}\n      <FieldGroup>\n        <IconSearch aria-hidden className={searchIcon()} />\n        <Input placeholder={placeholder ?? \"Search...\"} className={input()} />\n        {isPending ? (\n          <Loader variant=\"spin\" className=\"mr-2.5\" />\n        ) : (\n          <Button size=\"square-petite\" appearance=\"plain\" className={clearButton()}>\n            <IconX aria-hidden />\n          </Button>\n        )}\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </SearchFieldPrimitive>\n  )\n}\n\nexport { SearchField, type SearchFieldProps }\n",
    "type": "ui"
  },
  "dialog": {
    "component": "@/components/ui/dialog",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconX } from \"justd-icons\"\nimport type {\n  ButtonProps as ButtonPrimitiveProps,\n  DialogProps,\n  HeadingProps\n} from \"react-aria-components\"\nimport {\n  Button as ButtonPrimitive,\n  Dialog as DialogPrimitive,\n  Heading,\n  OverlayTriggerStateContext\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Button, type ButtonProps } from \"./button\"\nimport { useMediaQuery } from \"./primitive\"\n\nconst dialogStyles = tv({\n  slots: {\n    root: [\n      \"dlc relative flex max-h-[inherit] [&::-webkit-scrollbar]:size-0.5 [scrollbar-width:thin] flex-col overflow-hidden outline-none\",\n      \"sm:[&:not(:has([data-slot=dialog-body]))]:px-6 sm:[&:has([data-slot=dialog-body])_[data-slot=dialog-header]]:px-6 sm:[&:has([data-slot=dialog-body])_[data-slot=dialog-footer]]:px-6\",\n      \"[&:not(:has([data-slot=dialog-body]))]:px-4 [&:has([data-slot=dialog-body])_[data-slot=dialog-header]]:px-4 [&:has([data-slot=dialog-body])_[data-slot=dialog-footer]]:px-4\"\n    ],\n    header: \"relative flex flex-col pb-3 pt-4 sm:pt-6\",\n    description: \"text-sm block text-muted-fg mt-0.5 sm:mt-1\",\n    body: [\n      \"flex flex-1 flex-col gap-2 overflow-auto px-4 sm:px-6 py-1\",\n      \"max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding)-var(--dialog-header-height,0px)-var(--dialog-footer-height,0px))]\"\n    ],\n    footer: \"mt-auto flex flex-col-reverse justify-between gap-3 pb-4 sm:pb-6 pt-4 sm:flex-row\",\n    closeIndicator:\n      \"close absolute right-1 top-1 sm:right-2 sm:top-2 focus:outline-none focus:bg-secondary hover:bg-secondary grid place-content-center rounded-xl sm:rounded-md focus-visible:ring-1 focus-visible:ring-primary size-8 sm:size-7 z-50\"\n  }\n})\n\nconst { root, header, description, body, footer, closeIndicator } = dialogStyles()\n\nconst Dialog = ({ role, className, ...props }: DialogProps) => {\n  return <DialogPrimitive role={role ?? \"dialog\"} className={root({ className })} {...props} />\n}\n\nconst Trigger = (props: ButtonPrimitiveProps) => (\n  <ButtonPrimitive {...props}>\n    {(values) => (\n      <>{typeof props.children === \"function\" ? props.children(values) : props.children}</>\n    )}\n  </ButtonPrimitive>\n)\n\ntype DialogHeaderProps = React.HTMLAttributes<HTMLDivElement> & {\n  title?: string\n  description?: string\n}\n\nconst Header = ({ className, ...props }: DialogHeaderProps) => {\n  const headerRef = React.useRef<HTMLHeadingElement>(null)\n\n  React.useEffect(() => {\n    const header = headerRef.current\n    if (!header) {\n      return\n    }\n\n    const observer = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        header.parentElement?.style.setProperty(\n          \"--dialog-header-height\",\n          `${entry.target.clientHeight}px`\n        )\n      }\n    })\n\n    observer.observe(header)\n    return () => observer.unobserve(header)\n  }, [])\n\n  return (\n    <div data-slot=\"dialog-header\" ref={headerRef} className={header({ className })}>\n      {props.title && <Title>{props.title}</Title>}\n      {props.description && <Description>{props.description}</Description>}\n      {!props.title && typeof props.children === \"string\" ? <Title {...props} /> : props.children}\n    </div>\n  )\n}\n\nconst titleStyles = tv({\n  base: \"flex flex-1 items-center text-fg\",\n  variants: {\n    level: {\n      1: \"font-semibold text-lg sm:text-xl\",\n      2: \"font-semibold text-lg sm:text-xl\",\n      3: \"font-semibold text-base sm:text-lg\",\n      4: \"font-semibold text-base\"\n    }\n  }\n})\n\ninterface TitleProps extends Omit<HeadingProps, \"level\"> {\n  level?: 1 | 2 | 3 | 4\n}\n\nconst Title = ({ level = 2, className, ...props }: TitleProps) => (\n  <Heading slot=\"title\" level={level} className={titleStyles({ level, className })} {...props} />\n)\n\nconst Description = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={description({ className })} {...props} />\n)\n\nconst Body = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div data-slot=\"dialog-body\" className={body({ className })} {...props} />\n)\n\nconst Footer = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n  const footerRef = React.useRef<HTMLDivElement>(null)\n\n  React.useEffect(() => {\n    const footer = footerRef.current\n\n    if (!footer) {\n      return\n    }\n\n    const observer = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        footer.parentElement?.style.setProperty(\n          \"--dialog-footer-height\",\n          `${entry.target.clientHeight}px`\n        )\n      }\n    })\n\n    observer.observe(footer)\n    return () => {\n      observer.unobserve(footer)\n    }\n  }, [])\n  return (\n    <div ref={footerRef} data-slot=\"dialog-footer\" className={footer({ className })} {...props} />\n  )\n}\n\nconst Close = ({ className, appearance = \"outline\", ...props }: ButtonProps) => {\n  const state = React.useContext(OverlayTriggerStateContext)!\n  return (\n    <Button\n      className={className}\n      appearance={appearance}\n      onPress={() => state.close()}\n      {...props}\n    />\n  )\n}\n\ninterface CloseButtonIndicatorProps {\n  className?: string\n  close: () => void\n  isDismissable?: boolean | undefined\n}\n\nconst CloseIndicator = ({ className, ...props }: CloseButtonIndicatorProps) => {\n  const isMobile = useMediaQuery(\"(max-width: 600px)\")\n  const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n  React.useEffect(() => {\n    if (isMobile && buttonRef.current) {\n      buttonRef.current.focus()\n    }\n  }, [isMobile])\n  return props.isDismissable ? (\n    <ButtonPrimitive\n      ref={buttonRef}\n      {...(isMobile ? { autoFocus: true } : {})}\n      aria-label=\"Close\"\n      onPress={props.close}\n      className={closeIndicator({ className })}\n    >\n      <IconX className=\"size-4\" />\n    </ButtonPrimitive>\n  ) : null\n}\n\nDialog.Trigger = Trigger\nDialog.Header = Header\nDialog.Title = Title\nDialog.Description = Description\nDialog.Body = Body\nDialog.Footer = Footer\nDialog.Close = Close\nDialog.CloseIndicator = CloseIndicator\n\nexport { Dialog }\n",
    "type": "ui"
  },
  "menu": {
    "component": "@/components/ui/menu",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconBulletFill, IconCheck, IconChevronLgRight } from \"justd-icons\"\nimport type {\n  ButtonProps,\n  MenuItemProps as MenuItemPrimitiveProps,\n  MenuProps as MenuPrimitiveProps,\n  MenuSectionProps,\n  MenuTriggerProps as MenuTriggerPrimitiveProps,\n  PopoverProps,\n  SeparatorProps\n} from \"react-aria-components\"\nimport {\n  Button,\n  Collection,\n  Header,\n  Menu as MenuPrimitive,\n  MenuItem,\n  MenuSection,\n  MenuTrigger as MenuTriggerPrimitive,\n  Separator,\n  SubmenuTrigger as SubmenuTriggerPrimitive\n} from \"react-aria-components\"\nimport type { VariantProps } from \"tailwind-variants\"\nimport { tv } from \"tailwind-variants\"\n\nimport { DropdownItemDetails, dropdownItemStyles, dropdownSectionStyles } from \"./dropdown\"\nimport { Keyboard } from \"./keyboard\"\nimport { Popover } from \"./popover\"\nimport { cn, cr } from \"./primitive\"\n\ninterface MenuContextProps {\n  respectScreen: boolean\n}\n\nconst MenuContext = React.createContext<MenuContextProps>({ respectScreen: true })\n\ninterface MenuProps extends MenuTriggerPrimitiveProps {\n  respectScreen?: boolean\n}\n\nconst Menu = ({ respectScreen = true, ...props }: MenuProps) => {\n  return (\n    <MenuContext.Provider value={{ respectScreen }}>\n      <MenuTriggerPrimitive {...props}>{props.children}</MenuTriggerPrimitive>\n    </MenuContext.Provider>\n  )\n}\n\nconst SubMenu = ({ delay = 0, ...props }) => (\n  <SubmenuTriggerPrimitive {...props} delay={delay}>\n    {props.children}\n  </SubmenuTriggerPrimitive>\n)\n\nconst menuStyles = tv({\n  slots: {\n    menu: \"z32kk max-h-[calc(var(--visual-viewport-height)-10rem)] sm:max-h-[inherit] overflow-auto rounded-xl p-1 outline outline-0 [clip-path:inset(0_0_0_0_round_calc(var(--radius)-2px))]\",\n    popover: \"z-50 min-w-40 p-0 outline-none shadow-sm\",\n    trigger: [\n      \"inline relative text-left focus:outline-none focus-visible:ring-1 focus-visible:ring-primary pressed:outline-none\"\n    ]\n  }\n})\n\nconst { menu, popover, trigger } = menuStyles()\n\ninterface MenuTriggerProps extends ButtonProps {\n  className?: string\n}\n\nconst Trigger = ({ className, ...props }: MenuTriggerProps) => (\n  <Button className={trigger({ className })} {...props}>\n    {(values) => (\n      <>{typeof props.children === \"function\" ? props.children(values) : props.children}</>\n    )}\n  </Button>\n)\n\ninterface MenuContentProps<T>\n  extends Omit<PopoverProps, \"children\" | \"style\">,\n    MenuPrimitiveProps<T> {\n  className?: string\n  popoverClassName?: string\n  showArrow?: boolean\n  respectScreen?: boolean\n}\n\nconst Content = <T extends object>({\n  className,\n  showArrow = false,\n  popoverClassName,\n  ...props\n}: MenuContentProps<T>) => {\n  const { respectScreen } = React.useContext(MenuContext)\n  return (\n    <Popover.Content\n      respectScreen={respectScreen}\n      showArrow={showArrow}\n      className={popover({\n        className: cn([\n          showArrow && \"placement-left:mt-[-0.38rem] placement-right:mt-[-0.38rem]\",\n          popoverClassName\n        ])\n      })}\n      {...props}\n    >\n      <MenuPrimitive className={menu({ className })} {...props} />\n    </Popover.Content>\n  )\n}\n\ninterface MenuItemProps\n  extends Omit<MenuItemPrimitiveProps, \"isDanger\">,\n    VariantProps<typeof dropdownItemStyles> {\n  isDanger?: boolean\n}\n\nconst Item = ({ className, isDanger = false, children, ...props }: MenuItemProps) => {\n  const textValue = props.textValue || (typeof children === \"string\" ? children : undefined)\n  return (\n    <MenuItem\n      className={cr(className, (className, renderProps) =>\n        dropdownItemStyles({\n          ...renderProps,\n          className\n        })\n      )}\n      textValue={textValue}\n      data-danger={isDanger ? \"true\" : undefined}\n      {...props}\n    >\n      {(values) => (\n        <>\n          {typeof children === \"function\" ? children(values) : children}\n          {values.hasSubmenu && <IconChevronLgRight className=\"gpfw ml-auto size-3.5\" />}\n        </>\n      )}\n    </MenuItem>\n  )\n}\n\nexport interface MenuHeaderProps extends React.ComponentProps<typeof Header> {\n  separator?: boolean\n}\n\nconst MenuHeader = ({ className, separator = false, ...props }: MenuHeaderProps) => (\n  <Header\n    className={cn(\n      \"p-2 text-base font-semibold sm:text-sm\",\n      separator && \"-mx-1 border-b px-3 pb-[0.625rem]\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst MenuSeparator = ({ className, ...props }: SeparatorProps) => (\n  <Separator className={cn(\"-mx-1 my-1 h-px border-b\", className)} {...props} />\n)\n\nconst Checkbox = ({ className, children, ...props }: MenuItemProps) => (\n  <Item className={cn(\"relative pr-8\", className)} {...props}>\n    {(values) => (\n      <>\n        {typeof children === \"function\" ? children(values) : children}\n        {values.isSelected && (\n          <span className=\"absolute right-2 flex size-4 shrink-0 items-center animate-in justify-center\">\n            <IconCheck />\n          </span>\n        )}\n      </>\n    )}\n  </Item>\n)\n\nconst Radio = ({ className, children, ...props }: MenuItemProps) => (\n  <Item className={cn(\"relative\", className)} {...props}>\n    {(values) => (\n      <>\n        {typeof children === \"function\" ? children(values) : children}\n\n        {values.isSelected && (\n          <span\n            data-slot=\"menu-radio\"\n            className=\"absolute right-3 flex items-center animate-in justify-center\"\n          >\n            <IconBulletFill />\n          </span>\n        )}\n      </>\n    )}\n  </Item>\n)\n\nconst { section, header } = dropdownSectionStyles()\n\ninterface SectionProps<T> extends MenuSectionProps<T> {\n  title?: string\n}\n\nconst Section = <T extends object>({ className, ...props }: SectionProps<T>) => {\n  return (\n    <MenuSection className={section({ className })} {...props}>\n      {\"title\" in props && <Header className={header()}>{props.title}</Header>}\n      <Collection items={props.items}>{props.children}</Collection>\n    </MenuSection>\n  )\n}\n\nMenu.Primitive = MenuPrimitive\nMenu.Content = Content\nMenu.Header = MenuHeader\nMenu.Item = Item\nMenu.Content = Content\nMenu.Keyboard = Keyboard\nMenu.Item = Checkbox\nMenu.Item = Radio\nMenu.Section = Section\nMenu.Separator = MenuSeparator\nMenu.Trigger = Trigger\nMenu.ItemDetails = DropdownItemDetails\nMenu.Submenu = SubMenu\n\nexport { Menu, type MenuContentProps }\n",
    "type": "ui"
  },
  "progress-bar": {
    "component": "@/components/ui/progress-bar",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { motion } from \"framer-motion\"\nimport {\n  ProgressBar as ProgressBarPrimitive,\n  type ProgressBarProps as ProgressBarPrimitiveProps\n} from \"react-aria-components\"\n\nimport { Label } from \"./field\"\nimport { ctr } from \"./primitive\"\n\ninterface ProgressBarProps extends ProgressBarPrimitiveProps {\n  label?: string\n}\n\nconst ProgressBar = ({ label, className, ...props }: ProgressBarProps) => {\n  return (\n    <ProgressBarPrimitive {...props} className={ctr(className, \"flex flex-col\")}>\n      {({ percentage, valueText, isIndeterminate }) => (\n        <>\n          <div className=\"flex justify-between gap-2\">\n            {label && <Label>{label}</Label>}\n            <span className=\"text-sm text-muted-fg tabular-nums\">{valueText}</span>\n          </div>\n          <div className=\"relative h-2 min-w-64 overflow-hidden rounded-full bg-secondary outline outline-1 -outline-offset-1 outline-transparent\">\n            {!isIndeterminate ? (\n              <motion.div\n                className=\"absolute left-0 top-0 h-full rounded-full bg-primary forced-colors:bg-[Highlight]\"\n                initial={{ width: \"0%\" }}\n                animate={{ width: `${percentage}%` }}\n                transition={{ duration: 0.5, ease: \"easeInOut\" }}\n              />\n            ) : (\n              <motion.div\n                className=\"absolute top-0 h-full rounded-full bg-primary forced-colors:bg-[Highlight]\"\n                initial={{ left: \"0%\", width: \"40%\" }}\n                animate={{ left: [\"0%\", \"100%\", \"0%\"] }}\n                transition={{\n                  repeat: Infinity,\n                  duration: 2,\n                  ease: \"easeInOut\"\n                }}\n              />\n            )}\n          </div>\n        </>\n      )}\n    </ProgressBarPrimitive>\n  )\n}\n\nexport { ProgressBar }\n",
    "type": "ui"
  },
  "badge": {
    "component": "@/components/ui/badge",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nconst badgeIntents = {\n  primary:\n    \"bg-primary/10 dark:bg-primary/15 text-primary dark:text-primary group-hover:bg-primary/15 dark:group-hover:bg-primary/20\",\n  secondary:\n    \"bg-secondary group-hover:bg-muted dark:bg-secondary dark:group-hover:bg-muted text-secondary-fg\",\n  success:\n    \"bg-emerald-500/15 text-emerald-700 group-hover:bg-emerald-500/25 dark:bg-emerald-500/10 dark:text-emerald-400 dark:group-hover:bg-emerald-500/20\",\n  info: \"bg-info/15 dark:bg-info/15 text-info group-hover:bg-info/20 dark:group-hover:bg-info/20\",\n  warning:\n    \"bg-warning/10 dark:bg-warning/15 text-warning-fg dark:text-warning group-hover:bg-warning/15 dark:group-hover:bg-warning/20\",\n  danger:\n    \"bg-danger/10 dark:bg-danger/15 text-danger group-hover:bg-danger/15 dark:group-hover:bg-danger/20\"\n}\nconst badgeShapes = {\n  square: \"rounded-md px-1.5\",\n  circle: \"px-2 rounded-full\"\n}\nconst badgeStyles = tv({\n  base: \"inline-flex items-center gap-x-1.5 py-0.5 text-xs/5 font-medium forced-colors:outline [&_[data-slot=icon]]:size-3\",\n  variants: {\n    intent: { ...badgeIntents },\n    shape: { ...badgeShapes }\n  },\n  defaultVariants: {\n    intent: \"primary\",\n    shape: \"square\"\n  }\n})\n\ninterface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeStyles> {\n  className?: string\n  children: React.ReactNode\n}\n\nconst Badge = ({ children, intent, shape, className, ...props }: BadgeProps) => {\n  return (\n    <span {...props} className={badgeStyles({ intent, shape, className })}>\n      {children}\n    </span>\n  )\n}\n\nexport { Badge, badgeIntents, badgeStyles, badgeShapes }\n",
    "type": "ui"
  },
  "color-picker": {
    "component": "@/components/ui/color-picker",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport type { Placement } from \"@react-types/overlays\"\nimport {\n  Button,\n  ColorPicker as ColorPickerPrimitive,\n  type ColorPickerProps as ColorPickerPrimitiveProps,\n  Dialog\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { ColorArea } from \"./color-area\"\nimport { ColorField } from \"./color-field\"\nimport { ColorSlider } from \"./color-slider\"\nimport { ColorSwatch } from \"./color-swatch\"\nimport { Description } from \"./field\"\nimport { Popover } from \"./popover\"\nimport { focusButtonStyles } from \"./primitive\"\n\nconst buttonStyles = tv({\n  extend: focusButtonStyles,\n  base: \"flex btn-trigger cursor-pointer disabled:cursor-default disabled:opacity-50 items-center rounded text-sm\"\n})\n\nexport interface ColorPickerProps extends ColorPickerPrimitiveProps {\n  label?: string\n  children?: React.ReactNode\n  showArrow?: boolean\n  isDisabled?: boolean\n  placement?: Placement\n  description?: string\n}\n\nconst ColorPicker = ({\n  showArrow = false,\n  placement = \"bottom start\",\n  label,\n  isDisabled,\n  children,\n  description,\n  ...props\n}: ColorPickerProps) => {\n  return (\n    <div className=\"flex gap-y-2 flex-col\">\n      <ColorPickerPrimitive {...props}>\n        <Popover>\n          <Button isDisabled={isDisabled} className={buttonStyles}>\n            <ColorSwatch className=\"size-6\" />\n            {label && <span className=\"ml-2\">{label}</span>}\n          </Button>\n          <Popover.Content\n            className=\"overflow-y-auto [&_[data-slot=color-slider]]:w-full [&_[data-slot=color-area]]:w-full sm:[&_[data-slot=color-area]]:size-56 sm:max-w-56 sm:min-w-min px-0 pt-4 pb-3 sm:p-3\"\n            showArrow={showArrow}\n            placement={placement}\n          >\n            <Dialog className=\"flex flex-col gap-2 focus:outline-none\">\n              {children || (\n                <>\n                  <ColorArea colorSpace=\"hsb\" xChannel=\"saturation\" yChannel=\"brightness\" />\n                  <ColorSlider showOutput={false} colorSpace=\"hsb\" channel=\"hue\" />\n                  <ColorField aria-label=\"Hex\" />\n                </>\n              )}\n            </Dialog>\n          </Popover.Content>\n        </Popover>\n      </ColorPickerPrimitive>\n      {description && <Description>{description}</Description>}\n    </div>\n  )\n}\n\nexport { ColorPicker }\n",
    "type": "ui"
  },
  "number-field": {
    "component": "@/components/ui/number-field",
    "raw": "\"use client\"\n\nimport { IconChevronDown, IconChevronUp, IconMinus, IconPlus } from \"justd-icons\"\nimport {\n  Button,\n  type ButtonProps,\n  NumberField as NumberFieldPrimitive,\n  type NumberFieldProps as NumberFieldPrimitiveProps,\n  type ValidationResult\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Description, FieldError, FieldGroup, Input, Label } from \"./field\"\nimport { ctr, useMediaQuery } from \"./primitive\"\n\nconst fieldBorderStyles = tv({\n  base: \"group-focus:border-primary/70 forced-colors:border-[Highlight]\",\n  variants: {\n    isInvalid: {\n      true: \"group-focus:border-danger/70 forced-colors:border-[Mark]\"\n    },\n    isDisabled: {\n      true: \"group-focus:border-input/70\"\n    }\n  }\n})\n\nconst numberFieldStyles = tv({\n  slots: {\n    base: \"group flex flex-col gap-y-1.5\",\n    stepperButton:\n      \"h-10 cursor-default px-3 text-muted-fg pressed:bg-primary pressed:text-primary-fg group-disabled:bg-secondary/70 forced-colors:group-disabled:text-[GrayText]\"\n  }\n})\n\nconst { base, stepperButton } = numberFieldStyles()\n\ninterface NumberFieldProps extends NumberFieldPrimitiveProps {\n  label?: string\n  description?: string\n  placeholder?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst NumberField = ({\n  label,\n  placeholder,\n  description,\n  className,\n  errorMessage,\n  ...props\n}: NumberFieldProps) => {\n  const isMobile = useMediaQuery(\"(max-width: 768px)\")\n  return (\n    <NumberFieldPrimitive {...props} className={ctr(className, base())}>\n      {label && <Label>{label}</Label>}\n      <FieldGroup className=\"overflow-hidden\">\n        {(renderProps) => (\n          <>\n            {isMobile ? <StepperButton slot=\"decrement\" className=\"border-r\" /> : null}\n            <Input className=\"tabular-nums\" placeholder={placeholder} />\n            <div\n              className={fieldBorderStyles({\n                ...renderProps,\n                className: \"grid h-10 place-content-center border-s\"\n              })}\n            >\n              {isMobile ? (\n                <StepperButton slot=\"increment\" />\n              ) : (\n                <div className=\"flex h-full flex-col\">\n                  <StepperButton slot=\"increment\" emblemType=\"chevron\" className=\"h-5 px-1\" />\n                  <div\n                    className={fieldBorderStyles({\n                      ...renderProps,\n                      className: \"border-b border-input\"\n                    })}\n                  />\n                  <StepperButton slot=\"decrement\" emblemType=\"chevron\" className=\"h-5 px-1\" />\n                </div>\n              )}\n            </div>\n          </>\n        )}\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </NumberFieldPrimitive>\n  )\n}\n\ninterface StepperButtonProps extends ButtonProps {\n  slot: \"increment\" | \"decrement\"\n  emblemType?: \"chevron\" | \"default\"\n  className?: string\n}\n\nconst StepperButton = ({\n  slot,\n  className,\n  emblemType = \"default\",\n  ...props\n}: StepperButtonProps) => {\n  const icon =\n    emblemType === \"chevron\" ? (\n      slot === \"increment\" ? (\n        <IconChevronUp className=\"size-5\" />\n      ) : (\n        <IconChevronDown className=\"size-5\" />\n      )\n    ) : slot === \"increment\" ? (\n      <IconPlus />\n    ) : (\n      <IconMinus />\n    )\n  return (\n    <Button className={stepperButton({ className })} slot={slot} {...props}>\n      {icon}\n    </Button>\n  )\n}\n\nexport { NumberField }\n",
    "type": "ui"
  },
  "sidebar": {
    "component": "@/components/ui/sidebar",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconChevronDown, IconChevronRight, IconHamburger, IconSidebarFill } from \"justd-icons\"\nimport type { DisclosureProps, LinkProps } from \"react-aria-components\"\nimport { Disclosure, DisclosurePanel, Link } from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Button, ButtonPrimitive } from \"./button\"\nimport { cn, cr, useMediaQuery } from \"./primitive\"\nimport { Sheet } from \"./sheet\"\nimport { Tooltip } from \"./tooltip\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a Sidebar.\")\n  }\n\n  return context\n}\n\nconst Provider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    isOpen?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      isOpen: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useMediaQuery(\"(max-width: 768px)\")\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        if (setOpenProp) {\n          return setOpenProp?.(typeof value === \"function\" ? value(open) : value)\n        }\n\n        _setOpen(value)\n\n        document.cookie = `sidebar:state=${open}; path=/; max-age=${60 * 60 * 24 * 7}`\n      },\n      [setOpenProp, open]\n    )\n\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key === \"b\" && (event.metaKey || event.ctrlKey)) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <div\n          className={cn(\n            \"group/sidebar-wrapper [--sidebar-width:16.5rem] [--sidebar-width-icon:3rem] flex min-h-svh w-full text-fg dark:has-[[data-intent=inset]]:bg-bg has-[[data-intent=inset]]:bg-secondary/50\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      </SidebarContext.Provider>\n    )\n  }\n)\nProvider.displayName = \"Provider\"\n\nconst Inset = ({ className, ...props }: React.ComponentProps<\"main\">) => {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn([\n        [\n          \"relative flex min-h-svh max-w-full flex-1 flex-col bg-bg\",\n          \"md:peer-data-[intent=inset]:ml-0 md:peer-data-[intent=inset]:bg-tertiary md:peer-data-[intent=inset]:rounded-xl\",\n          \"peer-data-[intent=inset]:overflow-hidden peer-data-[intent=inset]:border peer-data-[intent=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[intent=inset]:my-2 md:peer-data-[intent=inset]:mr-2\"\n        ],\n        className\n      ])}\n      {...props}\n    />\n  )\n}\n\nconst Sidebar = ({\n  side = \"left\",\n  intent = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  intent?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"dock\" | \"none\"\n}) => {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        className={cn(\"flex h-full w-[--sidebar-width] flex-col bg-tertiary text-fg \", className)}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet isOpen={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <Sheet.Content\n          aria-label=\"Sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          classNames={{\n            content: \"bg-tertiary text-fg [&>button]:hidden\"\n          }}\n          isStack={intent === \"floating\"}\n          side={side}\n        >\n          <Sheet.Body className=\"p-0 sm:p-0\">{children}</Sheet.Body>\n        </Sheet.Content>\n      </Sheet>\n    )\n  }\n  return (\n    <div\n      className=\"group peer hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-intent={intent}\n      data-side={side}\n    >\n      <div\n        className={cn(\n          \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          intent === \"floating\" || intent === \"inset\"\n            ? \"group-data-[collapsible=dock]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n            : \"group-data-[collapsible=dock]:w-[--sidebar-width-icon]\"\n        )}\n      />\n      <div\n        className={cn(\n          \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          intent === \"floating\" || intent === \"inset\"\n            ? \"p-2 group-data-[collapsible=dock]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n            : \"group-data-[collapsible=dock]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-slot=\"sidebar\"\n          className={cn(\n            \"flex h-full w-full flex-col bg-tertiary group-data-[intent=inset]:bg-transparent group-data-[intent=floating]:rounded-lg group-data-[intent=floating]:border group-data-[intent=floating]:border-border group-data-[intent=floating]:bg-secondary/50\",\n            intent === \"inset\" || state === \"collapsed\"\n              ? \"[&_[data-slot=sidebar-header]]:border-transparent [&_[data-slot=sidebar-footer]]:border-transparent\"\n              : \"[&_[data-slot=sidebar-header]]:border-b [&_[data-slot=sidebar-footer]]:border-t\"\n          )}\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst itemStyles = tv({\n  base: [\n    \"group/sidebar-item grid cursor-pointer [&>[data-slot=icon]]:size-4 col-span-full [&>[data-slot=icon]]:shrink-0 items-center [&>[data-slot=icon]]:text-muted-fg relative rounded-lg lg:text-sm leading-6\",\n    \"forced-colors:text-[MenuLink] text-fg\"\n  ],\n  variants: {\n    collapsed: {\n      false: \"grid-cols-subgrid [&>[data-slot=icon]]:mr-2 px-3 py-2\"\n    },\n    isFocused: {\n      true: \"outline-none\"\n    },\n    isFocusVisible: {\n      true: \"bg-muted [&:focus-visible_[slot=description]]:text-accent-fg/70 text-secondary-fg\"\n    },\n    isHovered: {\n      true: [\n        \"bg-muted [&:focus-visible_[slot=description]]:text-accent-fg/70 text-secondary-fg [&_.text-muted-fg]:text-secondary-fg/80\"\n      ]\n    },\n    isCurrent: {\n      true: [\n        \"[&_[data-slot=icon]]:text-primary-fg [&_.text-muted-fg]:text-primary-fg/80 bg-primary text-primary-fg\",\n        \"[&_.bdx]:bg-primary-fg/20 [&_.bdx]:ring-primary-fg/30\"\n      ]\n    },\n    isDisabled: {\n      true: \"opacity-70 cursor-default text-muted-fg\"\n    }\n  }\n})\n\ninterface ItemProps extends LinkProps {\n  icon?: React.ComponentType<React.SVGProps<SVGSVGElement>>\n  badge?: string | number | undefined\n  isCurrent?: boolean\n}\n\nconst Item = ({ isCurrent, children, className, icon: Icon, ...props }: ItemProps) => {\n  const { state, isMobile } = React.useContext(SidebarContext)!\n  return state === \"collapsed\" && !isMobile ? (\n    <Tooltip closeDelay={0} delay={0}>\n      <Link\n        {...props}\n        className=\"focus:outline-none col-span-full hover:bg-muted hover:text-secondary-fg text-muted-fg rounded-lg size-9 grid place-content-center\"\n      >\n        {Icon && <Icon data-slot=\"icon\" />}\n        <span className=\"sr-only\">{children as string}</span>\n      </Link>\n      <Tooltip.Content intent=\"inverse\" showArrow={false} placement=\"right\">\n        {children as string}\n      </Tooltip.Content>\n    </Tooltip>\n  ) : (\n    <Link\n      data-slot=\"sidebar-item\"\n      aria-current={isCurrent ? \"page\" : undefined}\n      className={cr(className, (className, renderProps) =>\n        itemStyles({\n          ...renderProps,\n          collapsed: state === \"collapsed\",\n          isCurrent,\n          className\n        })\n      )}\n      {...props}\n    >\n      {(values) => (\n        <>\n          {Icon && <Icon data-slot=\"icon\" />}\n          <span className=\"col-start-2 group-data-[collapsible=dock]:hidden\">\n            {typeof children === \"function\" ? children(values) : children}\n            {props.badge && (\n              <div className=\"bdx h-[1.30rem] px-1 rounded-md text-muted-fg text-xs font-medium ring-1 ring-fg/20 grid place-content-center w-auto inset-y-1/2 -translate-y-1/2 absolute right-1.5 bg-fg/[0.02] dark:bg-fg/10\">\n                {props.badge}\n              </div>\n            )}\n          </span>\n        </>\n      )}\n    </Link>\n  )\n}\n\nconst Content = ({ className, ...props }: React.ComponentProps<\"div\">) => {\n  const { state } = useSidebar()\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      className={cn([\n        \"flex min-h-0 flex-1 flex-col overflow-auto group-data-[collapsible=dock]:items-center group-data-[collapsible=dock]:overflow-hidden\",\n        state === \"collapsed\" ? \"gap-y-6\" : \"gap-y-2\",\n        className\n      ])}\n      {...props}\n    />\n  )\n}\n\nconst navStyles = tv({\n  base: \"bg-tertiary md:bg-bg w-full justify-between sm:justify-start h-[3.57rem] px-4 border-b flex items-center gap-x-2\",\n  variants: {\n    isSticky: {\n      true: \"sticky top-0 z-40\"\n    }\n  }\n})\n\ninterface NavProps extends React.ComponentProps<\"nav\"> {\n  isSticky?: boolean\n}\n\nconst Nav = ({ isSticky = false, className, ...props }: NavProps) => {\n  return <nav data-slot=\"sidebar-nav\" {...props} className={navStyles({ isSticky, className })} />\n}\n\nconst Trigger = ({ className, onPress, ...props }: React.ComponentProps<typeof Button>) => {\n  const { toggleSidebar } = useSidebar()\n  return (\n    <Button\n      aria-label={props[\"aria-label\"] || \"Toggle Sidebar\"}\n      data-slot=\"sidebar-trigger\"\n      appearance=\"plain\"\n      size=\"square-petite\"\n      className={className}\n      onPress={(event) => {\n        onPress?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <IconSidebarFill className=\"md:inline hidden\" />\n      <IconHamburger className=\"md:hidden inline\" />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nconst header = tv({\n  base: \"flex flex-col mb-2\",\n  variants: {\n    collapsed: {\n      false: \"px-5 py-4\",\n      true: \"px-5 py-4 md:p-0 md:size-9 mt-1 group-data-[intent=floating]:mt-2 md:rounded-lg md:hover:bg-muted md:mx-auto md:justify-center md:items-center\"\n    }\n  }\n})\n\nconst Header = ({ className, ...props }: React.HtmlHTMLAttributes<HTMLDivElement>) => {\n  const { state } = React.useContext(SidebarContext)!\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      {...props}\n      className={header({ collapsed: state === \"collapsed\", className })}\n      {...props}\n    />\n  )\n}\n\nconst footer = tv({\n  base: \"flex flex-col mt-auto\",\n  variants: {\n    collapsed: {\n      false: [\n        \"p-2 [&_[data-slot=menu-trigger]>[data-slot=avatar]]:-ml-1.5 [&_[data-slot=menu-trigger]]:w-full [&_[data-slot=menu-trigger]]:hover:bg-muted [&_[data-slot=menu-trigger]]:justify-start [&_[data-slot=menu-trigger]]:flex [&_[data-slot=menu-trigger]]:items-center\"\n      ],\n      true: \"size-12 p-1 [&_[data-slot=menu-trigger]]:size-9 justify-center items-center\"\n    }\n  }\n})\n\nconst Footer = ({ className, ...props }: React.HtmlHTMLAttributes<HTMLDivElement>) => {\n  const { state } = React.useContext(SidebarContext)!\n  return (\n    <div\n      {...props}\n      data-slot=\"sidebar-footer\"\n      className={footer({ collapsed: state === \"collapsed\", className })}\n      {...props}\n    />\n  )\n}\n\ninterface CollapsibleProps extends DisclosureProps {\n  children: React.ReactNode\n  title?: string\n  collapsible?: boolean\n  defaultExpanded?: boolean\n  icon?: React.ComponentType<React.SVGProps<SVGSVGElement>>\n}\n\nconst Section = ({\n  title,\n  className,\n  collapsible,\n  icon: Icon,\n  defaultExpanded,\n  ...props\n}: CollapsibleProps) => {\n  const { state, isMobile } = useSidebar()\n\n  const isExpanded =\n    state === \"collapsed\" || (title ? (collapsible ? (defaultExpanded ?? true) : true) : true)\n  return (\n    <Disclosure\n      data-slot=\"sidebar-section\"\n      className={cn(\n        \"col-span-full px-2\",\n        state === \"collapsed\" && [title && \"px-0\", !isMobile && \"px-0\"],\n        state === \"expanded\" && [\n          \"[&_[data-slot=sidebar-section]]:px-0\",\n          title && [\n            Icon\n              ? \"mt-0.5 [&_[data-slot=sidebar-section-panel]]:px-6 [&_[data-slot=sidebar-section-panel]_[data-slot=icon]]:-ml-0.5\"\n              : \"my-2.5\"\n          ]\n        ],\n        className\n      )}\n      defaultExpanded={isExpanded}\n      {...props}\n    >\n      {({ isExpanded }) => (\n        <>\n          {typeof title === \"string\" && (\n            <span className=\"group-data-[collapsible=dock]:opacity-0 group-data-[collapsible=dock]:hidden\">\n              {collapsible ? (\n                <ButtonPrimitive\n                  slot=\"trigger\"\n                  className={({ isHovered }) =>\n                    cn(\n                      \"w-full focus:outline-none flex leading-6 items-center justify-between [&>.idctr]:size-6 [&>.idctr]:duration-200\",\n                      Icon\n                        ? \"text-fg lg:text-sm py-2 lg:py-1.5 px-3 [&_.idctr]:text-muted-fg has-[.idctr]:pr-0.5\"\n                        : \"text-sm text-muted-fg py-2 px-3 has-[.idctr]:pr-0\",\n                      isHovered &&\n                        Icon &&\n                        \"bg-muted text-secondary-fg [&_.text-muted-fg]:text-secondary-fg/80 [&>[data-slot=icon]]:shrink-0 items-center [&>[data-slot=icon]]:text-muted-fg relative rounded-lg lg:text-sm leading-6\",\n                      isExpanded && !Icon && \"[&>.idctr]:rotate-180\",\n                      isExpanded && Icon && \"[&>.idctr]:rotate-90\"\n                    )\n                  }\n                >\n                  <span className=\"flex items-center [&>[data-slot=icon]]:text-muted-fg [&>[data-slot=icon]]:mr-2\">\n                    {Icon && <Icon data-slot=\"icon\" />}\n                    {title}\n                  </span>\n                  {Icon && <IconChevronRight className=\"idctr\" />}\n                  {!Icon && <IconChevronDown className=\"idctr\" />}\n                </ButtonPrimitive>\n              ) : (\n                <h4 className=\"text-sm text-muted-fg px-3 py-2\">{title}</h4>\n              )}\n            </span>\n          )}\n          <DisclosurePanel>\n            <div\n              data-slot=\"sidebar-section-panel\"\n              className={cn(\n                \"grid gap-y-0.5 group-data-[collapsible=dock]:place-content-center\",\n                state === \"collapsed\"\n                  ? \"group-data-[collapsible=dock]:place-content-center\"\n                  : \"grid-cols-[auto_1fr] [&_[data-slot=sidebar-item]:first-child]:mt-0.5\"\n              )}\n            >\n              {props.children}\n            </div>\n          </DisclosurePanel>\n        </>\n      )}\n    </Disclosure>\n  )\n}\n\nconst Rail = ({ className, ...props }: React.ComponentProps<\"button\">) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-transparent group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-tertiary\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nSidebar.Provider = Provider\nSidebar.Inset = Inset\nSidebar.Header = Header\nSidebar.Nav = Nav\nSidebar.Content = Content\nSidebar.Footer = Footer\nSidebar.Item = Item\nSidebar.Section = Section\nSidebar.Rail = Rail\nSidebar.Trigger = Trigger\n\nexport { Sidebar, useSidebar }\n",
    "type": "ui"
  },
  "table": {
    "component": "@/components/ui/table",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { IconChevronLgDown, IconHamburger } from \"justd-icons\"\nimport type {\n  CellProps,\n  ColumnProps,\n  ColumnResizerProps,\n  RowProps,\n  TableBodyProps,\n  TableHeaderProps,\n  TableProps as TablePrimitiveProps\n} from \"react-aria-components\"\nimport {\n  Button,\n  Cell,\n  Collection,\n  Column,\n  ColumnResizer as ColumnResizerPrimitive,\n  ResizableTableContainer,\n  Row,\n  Table as TablePrimitive,\n  TableBody,\n  TableHeader,\n  useTableOptions\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Checkbox } from \"./checkbox\"\nimport { cn, cr } from \"./primitive\"\n\nconst table = tv({\n  slots: {\n    root: \"table [&_[data-drop-target]]:border [&_[data-drop-target]]:border-primary w-full caption-bottom border-spacing-0 text-sm outline-none\",\n    header: \"border-b x32\",\n    row: \"tr group relative cursor-default border-b text-fg/70 outline-none ring-primary focus-visible:ring-1 selected:bg-accent-subtle selected:hover:bg-accent-subtle/50 dark:selected:hover:bg-accent-subtle/60\",\n    cellIcon:\n      \"flex-none rounded bg-secondary text-fg [&>[data-slot=icon]]:shrink-0 [&>[data-slot=icon]]:size-3.5 [&>[data-slot=icon]]:transition-transform [&>[data-slot=icon]]:duration-200 size-[1.15rem] grid place-content-center shrink-0\",\n    columnResizer: [\n      \"touch-none absolute [&[data-resizing]>div]:bg-primary right-0 top-0 bottom-0 w-px px-1 grid place-content-center\",\n      \"[&[data-resizable-direction=both]]:cursor-ew-resize &[data-resizable-direction=left]:cursor-e-resize &[data-resizable-direction=right]:cursor-w-resize\"\n    ]\n  }\n})\n\nconst { root, header, row, cellIcon, columnResizer } = table()\n\ninterface TableProps extends TablePrimitiveProps {\n  className?: string\n  allowResize?: boolean\n}\n\nconst TableContext = React.createContext<TableProps>({\n  allowResize: false\n})\n\nconst useTableContext = () => React.useContext(TableContext)\n\nconst Table = ({ children, className, ...props }: TableProps) => (\n  <TableContext.Provider value={props}>\n    <div className=\"relative w-full overflow-auto\">\n      {props.allowResize ? (\n        <ResizableTableContainer className=\"overflow-auto\">\n          <TablePrimitive {...props} className={root({ className })}>\n            {children}\n          </TablePrimitive>\n        </ResizableTableContainer>\n      ) : (\n        <TablePrimitive {...props} className={root({ className })}>\n          {children}\n        </TablePrimitive>\n      )}\n    </div>\n  </TableContext.Provider>\n)\n\nconst ColumnResizer = ({ className, ...props }: ColumnResizerProps) => (\n  <ColumnResizerPrimitive\n    {...props}\n    className={cr(className, (className, renderProps) =>\n      columnResizer({\n        ...renderProps,\n        className\n      })\n    )}\n  >\n    <div className=\"bg-border h-full w-px py-3\" />\n  </ColumnResizerPrimitive>\n)\n\nconst Body = <T extends object>(props: TableBodyProps<T>) => (\n  <TableBody {...props} className={cn(\"[&_.tr:last-child]:border-0\")} />\n)\n\ninterface TableCellProps extends CellProps {\n  className?: string\n}\n\nconst cellStyles = tv({\n  base: \"group px-3 py-3 outline-none\",\n  variants: {\n    allowResize: {\n      true: \"overflow-hidden truncate\"\n    }\n  }\n})\nconst TableCell = ({ children, className, ...props }: TableCellProps) => {\n  const { allowResize } = useTableContext()\n  return (\n    <Cell {...props} className={cellStyles({ allowResize, className })}>\n      {children}\n    </Cell>\n  )\n}\n\nconst columnStyles = tv({\n  base: \"whitespace-nowrap relative allows-sorting:cursor-pointer px-3 py-3 text-left dragging:cursor-grabbing font-medium outline-none [&:has([slot=selection])]:pr-0\",\n  variants: {\n    isResizable: {\n      true: \"overflow-hidden truncate\"\n    }\n  }\n})\n\ninterface TableColumnProps extends ColumnProps {\n  className?: string\n  isResizable?: boolean\n}\n\nconst TableColumn = ({ isResizable = false, className, ...props }: TableColumnProps) => {\n  return (\n    <Column\n      {...props}\n      className={columnStyles({\n        isResizable,\n        className\n      })}\n    >\n      {({ allowsSorting, sortDirection, isHovered }) => (\n        <div className=\"flex [&_[data-slot=icon]]:shrink-0 items-center gap-2\">\n          <>\n            {props.children as React.ReactNode}\n            {allowsSorting && (\n              <>\n                <span className={cellIcon({ className: isHovered ? \"bg-secondary-fg/10\" : \"\" })}>\n                  <IconChevronLgDown\n                    className={sortDirection === \"ascending\" ? \"rotate-180\" : \"\"}\n                  />\n                </span>\n              </>\n            )}\n            {isResizable && <ColumnResizer />}\n          </>\n        </div>\n      )}\n    </Column>\n  )\n}\n\ninterface HeaderProps<T extends object> extends TableHeaderProps<T> {\n  className?: string\n}\n\nconst Header = <T extends object>({ children, className, columns, ...props }: HeaderProps<T>) => {\n  const { selectionBehavior, selectionMode, allowsDragging } = useTableOptions()\n  return (\n    <TableHeader {...props} className={header({ className })}>\n      {allowsDragging && <Column className=\"w-0\" />}\n      {selectionBehavior === \"toggle\" && (\n        <Column className=\"pl-4 w-0\">\n          {selectionMode === \"multiple\" && <Checkbox slot=\"selection\" />}\n        </Column>\n      )}\n      <Collection items={columns}>{children}</Collection>\n    </TableHeader>\n  )\n}\n\ninterface TableRowProps<T extends object> extends RowProps<T> {\n  className?: string\n}\n\nconst TableRow = <T extends object>({\n  children,\n  className,\n  columns,\n  id,\n  ...props\n}: TableRowProps<T>) => {\n  const { selectionBehavior, allowsDragging } = useTableOptions()\n  return (\n    <Row\n      id={id}\n      {...props}\n      className={row({\n        className: \"href\" in props ? cn(\"cursor-pointer hover:bg-secondary/50\", className) : \"\"\n      })}\n    >\n      {allowsDragging && (\n        <Cell className=\"ring-primary pr-0 group cursor-grab dragging:cursor-grabbing\">\n          <Button\n            className=\"relative bg-transparent pl-3.5 py-1.5 text-muted-fg pressed:text-fg\"\n            slot=\"drag\"\n          >\n            <IconHamburger />\n          </Button>\n        </Cell>\n      )}\n      {selectionBehavior === \"toggle\" && (\n        <Cell className=\"pl-4\">\n          <span\n            aria-hidden\n            className=\"absolute inset-y-0 left-0 hidden h-full w-0.5 bg-primary group-selected:block\"\n          />\n          <Checkbox slot=\"selection\" />\n        </Cell>\n      )}\n      <Collection items={columns}>{children}</Collection>\n    </Row>\n  )\n}\n\nTable.Body = Body\nTable.Cell = TableCell\nTable.Column = TableColumn\nTable.Header = Header\nTable.Row = TableRow\n\nexport { Table }\n",
    "type": "ui"
  },
  "separator": {
    "component": "@/components/ui/separator",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { Separator as SeparatorPrimitive, type SeparatorProps } from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nconst separatorStyles = tv({\n  base: \"bg-border shrink-0 forced-colors:bg-[ButtonBorder]\",\n  variants: {\n    orientation: {\n      horizontal: \"h-px w-full\",\n      vertical: \"w-px\"\n    }\n  },\n  defaultVariants: {\n    orientation: \"horizontal\"\n  }\n})\n\nexport function Separator({ className, ...props }: SeparatorProps) {\n  return (\n    <SeparatorPrimitive\n      {...props}\n      className={separatorStyles({\n        orientation: props.orientation,\n        className: className\n      })}\n    />\n  )\n}\n\nexport type { SeparatorProps }\n",
    "type": "ui"
  },
  "progress-circle": {
    "component": "@/components/ui/progress-circle",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { ProgressBar, type ProgressBarProps } from \"react-aria-components\"\n\nimport { cn } from \"./primitive\"\n\ninterface ProgressCircleProps extends Omit<ProgressBarProps, \"className\"> {\n  className?: string\n}\n\nconst ProgressCircle = ({ className, ...props }: ProgressCircleProps) => {\n  const c = \"50%\"\n  const r = \"calc(50% - 2px)\"\n  return (\n    <ProgressBar {...props}>\n      {({ percentage, isIndeterminate }) => (\n        <svg\n          className={cn(\"size-4 shrink-0\", className)}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          data-slot=\"icon\"\n        >\n          <circle cx={c} cy={c} r={r} strokeWidth={3} stroke=\"currentColor\" strokeOpacity={0.25} />\n          {!isIndeterminate ? (\n            <circle\n              cx={c}\n              cy={c}\n              r={r}\n              strokeWidth={3}\n              stroke=\"currentColor\"\n              pathLength={100}\n              strokeDasharray=\"100 200\"\n              strokeDashoffset={100 - (percentage ?? 0)}\n              strokeLinecap=\"round\"\n              transform=\"rotate(-90)\"\n              className=\"origin-center\"\n            />\n          ) : (\n            <circle\n              cx={c}\n              cy={c}\n              r={r}\n              strokeWidth={3}\n              stroke=\"currentColor\"\n              pathLength={100}\n              strokeDasharray=\"100 200\"\n              strokeDashoffset={100 - 30}\n              strokeLinecap=\"round\"\n              className=\"animate-[spin_1s_cubic-bezier(0.4,_0,_0.2,_1)_infinite] origin-center\"\n            />\n          )}\n        </svg>\n      )}\n    </ProgressBar>\n  )\n}\n\nexport { ProgressCircle }\n",
    "type": "ui"
  },
  "color-wheel": {
    "component": "@/components/ui/color-wheel",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport {\n  ColorWheel as ColorWheelPrimitive,\n  type ColorWheelProps as ColorWheelPrimitiveProps,\n  ColorWheelTrack\n} from \"react-aria-components\"\n\nimport { ColorThumb } from \"./color-thumb\"\n\nexport type ColorWheelProps = Omit<ColorWheelPrimitiveProps, \"outerRadius\" | \"innerRadius\">\n\nconst ColorWheel = (props: ColorWheelProps) => {\n  return (\n    <ColorWheelPrimitive {...props} outerRadius={100} innerRadius={74}>\n      <ColorWheelTrack\n        className=\"disabled:bg-muted/75 disabled:forced-colors:bg-[GrayText]\"\n        style={({ defaultStyle, isDisabled }) => ({\n          ...defaultStyle,\n          background: isDisabled\n            ? undefined\n            : `${defaultStyle.background}, repeating-conic-gradient(#CCC 0% 25%, white 0% 50%) 50% / 16px 16px`\n        })}\n      />\n      <ColorThumb />\n    </ColorWheelPrimitive>\n  )\n}\n\nexport { ColorWheel }\n",
    "type": "ui"
  },
  "button": {
    "component": "@/components/ui/button",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport {\n  Button as ButtonPrimitive,\n  type ButtonProps as ButtonPrimitiveProps\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { cr, focusButtonStyles } from \"./primitive\"\n\nconst buttonStyles = tv(\n  {\n    extend: focusButtonStyles,\n    base: [\n      \"kbt32x before:absolute after:absolute box-border relative no-underline isolate inline-flex items-center justify-center gap-x-2 border font-medium\",\n      \"forced-colors:[--button-icon:ButtonText] forced-colors:hover:[--button-icon:ButtonText]\",\n      \"[&>[data-slot=icon]]:-mx-0.5 [&>[data-slot=icon]]:my-1 [&>[data-slot=icon]]:size-4 [&>[data-slot=icon]]:shrink-0 [&>[data-slot=icon]]:text-[--button-icon]\"\n    ],\n    variants: {\n      intent: {\n        primary: [\n          \"text-primary-fg [--button-bg:theme(colors.primary.DEFAULT)] [--button-border:theme(colors.primary.DEFAULT)] [--button-hover-overlay:theme(colors.white/10%)]\",\n          \"[--button-icon:theme(colors.primary.fg/60%)] active:[--button-icon:theme(colors.primary.fg/80%)] hover:[--button-icon:theme(colors.primary.fg/80%)]\"\n        ],\n        secondary: [\n          \"text-secondary-fg [--button-bg:theme(colors.secondary.DEFAULT)] dark:[--button-bg:theme(colors.secondary.DEFAULT)] [--button-border:theme(colors.secondary.fg/10%)] [--button-hover-overlay:theme(colors.secondary.fg/2.5%)] data-[active]:[--button-border:theme(colors.secondary.fg/15%)] hover:[--button-border:theme(colors.secondary.fg/15%)]\",\n          \"[--button-icon:theme(colors.muted.fg)] active:[--button-icon:theme(colors.fg)] hover:[--button-icon:theme(colors.fg)]\"\n        ],\n        warning: [\n          \"text-warning-fg [--button-bg:theme(colors.warning.DEFAULT)] [--button-border:theme(colors.warning.DEFAULT)] [--button-hover-overlay:theme(colors.white/10%)]\",\n          \"[--button-icon:theme(colors.warning.fg/60%)] active:[--button-icon:theme(colors.warning.fg/80%)] hover:[--button-icon:theme(colors.warning.fg/80%)]\"\n        ],\n        danger: [\n          \"text-white [--button-bg:theme(colors.danger.DEFAULT)] [--button-border:theme(colors.danger.DEFAULT)] [--button-hover-overlay:theme(colors.white/10%)]\",\n          \"[--button-icon:theme(colors.white/60%)] active:[--button-icon:theme(colors.white/80%)] hover:[--button-icon:theme(colors.white/80%)]\"\n        ]\n      },\n      appearance: {\n        solid: [\n          \"border-transparent bg-[--button-border]\",\n          \"before:inset-0 before:-z-10 before:bg-[--button-bg] before:shadow before:data-[disabled]:shadow-none\",\n          \"after:shadow-[shadow:inset_0_1px_theme(colors.white/15%)] after:active:bg-[--button-hover-overlay] after:hover:bg-[--button-hover-overlay] after:data-[disabled]:shadow-none after:inset-0 after:-z-10\",\n          \"dark:after:-inset-px dark:before:hidden dark:border-white/5 dark:bg-[--button-bg]\"\n        ],\n        outline: [\n          \"border-border text-fg [--button-icon:theme(colors.muted.fg)]\",\n          \"hover:[--button-icon:theme(colors.fg)] hover:bg-secondary/90\",\n          \"active:bg-secondary/90 active:[--button-icon:theme(colors.fg)]\"\n        ],\n        plain: [\n          \"border-transparent text-fg [--button-icon:theme(colors.muted.fg)]\",\n          \"pressed:bg-secondary/90\",\n          \"active:[--button-icon:theme(colors.fg)] active:bg-secondary/90\",\n          \"hover:[--button-icon:theme(colors.fg)] hover:bg-secondary/90\"\n        ]\n      },\n      size: {\n        \"extra-small\":\n          \"h-8 px-[calc(theme(spacing.3)-1px)] py-[calc(theme(spacing.1)-1px)] text-xs/4 lg:text-[0.800rem]/4\",\n        small:\n          \"h-9 px-[calc(theme(spacing.4)-1px)] py-[calc(theme(spacing[1.5])-1px)] text-sm/5 lg:text-sm/5\",\n        medium:\n          \"h-10 px-[calc(theme(spacing.4)-1px)] py-[calc(theme(spacing.2)-1px)] text-base lg:text-sm/6\",\n        large:\n          \"h-10 [&>[data-slot=icon]]:mx-[-3px] sm:h-11 px-[calc(theme(spacing.4)-1px)] sm:px-[calc(theme(spacing.5)-1px)] py-[calc(theme(spacing[2.5])-1px)] text-base lg:text-base/7 sm:[&>[data-slot=icon]]:size-5\",\n        \"square-petite\": \"size-9 shrink-0 [&_[data-slot=icon]]:text-current\"\n      },\n      shape: {\n        square:\n          \"rounded-lg before:rounded-[calc(theme(borderRadius.lg)-1px)] after:rounded-[calc(theme(borderRadius.lg)-1px)] dark:after:rounded-lg\",\n        circle:\n          \"rounded-[9999px] before:rounded-[9998px] after:rounded-[9998px] dark:after:rounded-[9999px]\"\n      },\n      isDisabled: {\n        false: \"forced-colors:disabled:text-[GrayText]\",\n        true: \"cursor-default opacity-60 forced-colors:disabled:text-[GrayText]\"\n      },\n      isPending: {\n        true: \"cursor-default\"\n      }\n    },\n    defaultVariants: {\n      intent: \"primary\",\n      appearance: \"solid\",\n      size: \"medium\",\n      shape: \"square\"\n    }\n  },\n  {\n    responsiveVariants: [\"sm\", \"lg\"]\n  }\n)\n\ninterface ButtonProps extends ButtonPrimitiveProps {\n  intent?: \"primary\" | \"secondary\" | \"danger\" | \"warning\"\n  size?: \"medium\" | \"large\" | \"square-petite\" | \"extra-small\" | \"small\"\n  shape?: \"square\" | \"circle\"\n  appearance?: \"solid\" | \"outline\" | \"plain\"\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, intent, appearance, size, shape, ...props }, ref) => {\n    return (\n      <ButtonPrimitive\n        ref={ref}\n        {...props}\n        className={cr(className, (className, renderProps) =>\n          buttonStyles({\n            ...renderProps,\n            intent,\n            appearance,\n            size,\n            shape,\n            className\n          })\n        )}\n      >\n        {(values) => (\n          <>{typeof props.children === \"function\" ? props.children(values) : props.children}</>\n        )}\n      </ButtonPrimitive>\n    )\n  }\n)\n\nButton.displayName = \"Button\"\n\nexport { Button, ButtonPrimitive, buttonStyles, type ButtonProps }\n",
    "type": "ui"
  },
  "toggle": {
    "component": "@/components/ui/toggle",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type { ToggleButtonGroupProps, ToggleButtonProps } from \"react-aria-components\"\nimport { ToggleButton, ToggleButtonGroup } from \"react-aria-components\"\nimport type { VariantProps } from \"tailwind-variants\"\nimport { tv } from \"tailwind-variants\"\n\nimport { cr, focusButtonStyles } from \"./primitive\"\n\ninterface ToggleGroupContextProps {\n  appearance?: \"outline\" | \"plain\" | \"solid\"\n}\n\nconst ToggleGroupContext = React.createContext<ToggleGroupContextProps>({\n  appearance: \"plain\"\n})\n\nconst toggleGroupStyles = tv({\n  base: [\"flex gap-1\"],\n  variants: {\n    orientation: {\n      horizontal:\n        \"flex-row [&::-webkit-scrollbar]:hidden [scrollbar-width:none] [-ms-overflow-style:none]\",\n      vertical: \"flex-col items-start\"\n    }\n  }\n})\n\nconst ToggleGroup = ({\n  className,\n  orientation = \"horizontal\",\n  appearance = \"plain\",\n  ...props\n}: ToggleButtonGroupProps & ToggleGroupContextProps) => {\n  return (\n    <ToggleGroupContext.Provider value={{ appearance }}>\n      <ToggleButtonGroup\n        orientation={orientation}\n        className={cr(className, (className, renderProps) =>\n          toggleGroupStyles({\n            ...renderProps,\n            orientation,\n            className\n          })\n        )}\n        {...props}\n      />\n    </ToggleGroupContext.Provider>\n  )\n}\n\nconst toggleStyles = tv({\n  extend: focusButtonStyles,\n  base: [\n    \"inline-flex relative items-center gap-x-2 bg-transparent justify-center border border-transparent rounded-lg text-sm font-medium ring-offset-bg transition-colors\",\n    \"enabled:hover:bg-secondary enabled:hover:text-secondary-fg\",\n    \"forced-colors:[--button-icon:ButtonText] forced-colors:hover:[--button-icon:ButtonText]\",\n    \"[&>[data-slot=icon]]:-mx-0.5 [&>[data-slot=icon]]:my-1 [&>[data-slot=icon]]:size-4 [&>[data-slot=icon]]:shrink-0 [&>[data-slot=icon]]:text-[--button-icon]\"\n  ],\n  variants: {\n    isDisabled: {\n      true: \"opacity-50 cursor-default forced-colors:border-[GrayText]\"\n    },\n    appearance: {\n      plain: [\n        \"selected:bg-secondary selected:text-secondary-fg\",\n        \"[--button-icon:theme(colors.secondary.fg/60%)] selected:[--button-icon:theme(colors.secondary.fg)] enabled:hover:[--button-icon:theme(colors.secondary.fg/80%)]\"\n      ],\n      solid: [\n        \"bg-white border-border selected:border-primary enabled:hover:bg-white/95 enabled:hover:text-black text-black selected:bg-primary selected:text-primary-fg\",\n        \"[--button-icon:theme(colors.black/60%)] selected:[--button-icon:theme(colors.white)] enabled:hover:[--button-icon:theme(colors.black/80%)]\"\n      ],\n      outline: [\n        \"border-border selected:bg-secondary selected:backdrop-blur-sm selected:text-secondary-fg enabled:hover:bg-secondary/50 enabled:hover:text-secondary-fg\",\n        \"[--button-icon:theme(colors.secondary.fg/60%)] selected:[--button-icon:theme(colors.secondary.fg)] enabled:hover:[--button-icon:theme(colors.secondary.fg/80%)]\"\n      ]\n    },\n    size: {\n      small: \"h-9 px-3.5\",\n      medium: \"h-10 px-4\",\n      large: \"h-11 px-5\",\n      \"square-petite\": \"size-9 shrink-0\"\n    },\n    shape: {\n      square: \"rounded-lg\",\n      circle: \"rounded-full\"\n    }\n  },\n  defaultVariants: {\n    appearance: \"plain\",\n    size: \"small\",\n    shape: \"square\"\n  }\n})\n\ntype ToggleProps = ToggleButtonProps & VariantProps<typeof toggleStyles>\n\nconst Toggle = ({ className, appearance, ...props }: ToggleProps) => {\n  const { appearance: groupAppearance } = React.useContext(ToggleGroupContext)\n  return (\n    <ToggleButton\n      {...props}\n      className={cr(className, (className, renderProps) =>\n        toggleStyles({\n          ...renderProps,\n          appearance: appearance ?? groupAppearance,\n          size: props.size,\n          shape: props.shape,\n          className\n        })\n      )}\n    />\n  )\n}\n\nexport { ToggleGroup, Toggle }\n",
    "type": "ui"
  },
  "modal": {
    "component": "@/components/ui/modal",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type { DialogProps, DialogTriggerProps, ModalOverlayProps } from \"react-aria-components\"\nimport {\n  DialogTrigger,\n  Modal as ModalPrimitive,\n  ModalOverlay as ModalOverlayPrimitive\n} from \"react-aria-components\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { Dialog } from \"./dialog\"\nimport { cr } from \"./primitive\"\n\nconst modalOverlayStyles = tv({\n  base: [\n    \"fixed left-0 top-0 isolate z-50 h-[--visual-viewport-height] w-full\",\n    \"flex items-end text-center sm:block\",\n    \"[--visual-viewport-vertical-padding:16px] sm:[--visual-viewport-vertical-padding:32px]\"\n  ],\n  variants: {\n    isBlurred: {\n      true: \"backdrop-blur\",\n      false: \"bg-dark/15 dark:bg-dark/40\"\n    },\n    isEntering: {\n      true: \"ease-out animate-in fade-in\"\n    },\n    isExiting: {\n      true: \"duration-200 ease-in animate-out fade-out\"\n    }\n  }\n})\nconst modalContentStyles = tv({\n  base: [\n    \"max-h-full w-full rounded-t-2xl ring-1 ring-dark/5 bg-overlay text-overlay-fg text-left align-middle shadow-lg\",\n    \"dark:ring-border sm:rounded-2xl overflow-hidden\",\n    \"sm:fixed sm:left-[50vw] sm:top-1/2 sm:-translate-x-1/2 sm:-translate-y-1/2\"\n  ],\n  variants: {\n    isEntering: {\n      true: [\n        \"animate-in ease-out duration-200 slide-in-from-bottom-[20%]\",\n        \"sm:slide-in-from-bottom-auto sm:slide-in-from-top-[80%] sm:slide-in-from-left-1/2\"\n      ]\n    },\n    isExiting: {\n      true: [\n        \"duration-200 ease-in animate-out slide-out-to-bottom-56\",\n        \"sm:exiting:slide-out-to-top-[80%] sm:slide-out-to-left-1/2\"\n      ]\n    },\n    size: {\n      xs: \"sm:max-w-xs\",\n      sm: \"sm:max-w-sm\",\n      md: \"sm:max-w-md\",\n      lg: \"sm:max-w-lg sm:has-[[role=alertdialog]]:max-w-lg sm:has-[[role=dialog]]:max-w-lg\",\n      xl: \"sm:max-w-xl\",\n      \"2xl\": \"sm:max-w-2xl\",\n      \"3xl\": \"sm:max-w-3xl\",\n      \"4xl\": \"sm:max-w-4xl\",\n      \"5xl\": \"sm:max-w-5xl\"\n    }\n  },\n  defaultVariants: {\n    size: \"lg\"\n  }\n})\n\ntype ModalProps = DialogTriggerProps\nconst Modal = (props: ModalProps) => {\n  return <DialogTrigger {...props} />\n}\n\ninterface ModalContentProps\n  extends Omit<React.ComponentProps<typeof Modal>, \"children\">,\n    Omit<ModalOverlayProps, \"className\">,\n    VariantProps<typeof modalContentStyles> {\n  \"aria-label\"?: DialogProps[\"aria-label\"]\n  \"aria-labelledby\"?: DialogProps[\"aria-labelledby\"]\n  role?: DialogProps[\"role\"]\n  closeButton?: boolean\n  isBlurred?: boolean\n  classNames?: {\n    overlay?: ModalOverlayProps[\"className\"]\n    content?: ModalOverlayProps[\"className\"]\n  }\n}\n\nconst ModalContent = ({\n  classNames,\n  isDismissable = true,\n  isBlurred = false,\n  children,\n  size,\n  role,\n  closeButton = true,\n  ...props\n}: ModalContentProps) => {\n  const _isDismissable = role === \"alertdialog\" ? false : isDismissable\n  return (\n    <ModalOverlayPrimitive\n      isDismissable={_isDismissable}\n      className={cr(classNames?.overlay, (className, renderProps) => {\n        return modalOverlayStyles({\n          ...renderProps,\n          isBlurred,\n          className\n        })\n      })}\n      {...props}\n    >\n      <ModalPrimitive\n        className={cr(classNames?.content, (className, renderProps) =>\n          modalContentStyles({\n            ...renderProps,\n            size,\n            className\n          })\n        )}\n        {...props}\n      >\n        {(values) => (\n          <Dialog role={role}>\n            {typeof children === \"function\" ? children(values) : children}\n            {closeButton && (\n              <Dialog.CloseIndicator close={values.state.close} isDismissable={_isDismissable} />\n            )}\n          </Dialog>\n        )}\n      </ModalPrimitive>\n    </ModalOverlayPrimitive>\n  )\n}\n\nModal.Trigger = Dialog.Trigger\nModal.Header = Dialog.Header\nModal.Title = Dialog.Title\nModal.Description = Dialog.Description\nModal.Footer = Dialog.Footer\nModal.Body = Dialog.Body\nModal.Close = Dialog.Close\nModal.Content = ModalContent\n\nexport { Modal, modalOverlayStyles, modalContentStyles }\n",
    "type": "ui"
  },
  "command-menu": {
    "component": "@/components/ui/command-menu",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { IconSearch, IconX } from \"justd-icons\"\nimport type { ModalOverlayProps, SeparatorProps, TextProps } from \"react-aria-components\"\nimport { Button, Dialog, Modal, ModalOverlay, Text } from \"react-aria-components\"\nimport { twJoin } from \"tailwind-merge\"\nimport { tv } from \"tailwind-variants\"\n\nimport type { KeyboardProps } from \"./keyboard\"\nimport { Keyboard } from \"./keyboard\"\nimport { useMediaQuery } from \"./primitive\"\nimport { Separator } from \"./separator\"\n\nconst commandStyles = tv({\n  slots: {\n    command: [\n      \"flex h-svh w-full flex-col overflow-hidden rounded-md sm:h-full\",\n      \"[&_[cmdk-group-heading]]:ml-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:-mb-1.5 [&_[cmdk-group-heading]]:text-muted-fg [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_[data-slot=icon]]:size-5 [&_[cmdk-input]]:h-12\",\n      \"[&_[cmdk-item]]:py-2.5 [&_[cmdk-item]]:pl-2.5 [&_[cmdk-item]]:pr-4\"\n    ],\n    list: \"overflow-y-auto lg:pb-0 max-h-[calc(100vh-35%)] pb-16 [&:not(:has(.xda32kfseccmd))]:p-2 [&:not(:has(.xda32kfseccmd))_.s3xsprt]:my-2 overflow-x-hidden md:max-h-[456px]\",\n    input: [\n      \"flex w-full rounded-md forced-colors:focus:outline-0 bg-transparent text-base placeholder:text-muted-fg\",\n      \"focus:outline-none\",\n      \"disabled:opacity-50 disabled:cursor-not-allowed\"\n    ],\n    section: [\n      \"xda32kfseccmd overflow-hidden py-2 px-2 text-fg\",\n      \"[&_[cmdk-group-heading]]:select-none [&_[cmdk-group-heading]]:ml-[1px] [&_[cmdk-group-heading]]:py-2 [&_[cmdk-group-heading]]:text-[0.8rem] [&_[cmdk-group-heading]]:text-muted-fg\"\n    ],\n    modal: [\n      \"fixed bottom-0 left-[50%] top-auto z-50 grid h-[calc(100vh-35%)] w-full max-w-full translate-x-[-50%] gap-4 overflow-hidden rounded-t-2xl bg-overlay text-overlay-fg shadow-lg forced-colors:border ring-1 ring-dark/5 dark:ring-border sm:bottom-auto sm:top-[6rem] sm:h-auto sm:w-full sm:max-w-2xl sm:rounded-xl\",\n      \"sm:entering:slide-in-from-bottom-auto entering:duration-300 entering:animate-in entering:fade-in-0 entering:slide-in-from-bottom-1/2 entering:slide-in-from-left-1/2 entering:[transition-timing-function:ease-out] sm:entering:duration-300 sm:entering:slide-in-from-top-[2rem]\",\n      \"exiting:duration-300 exiting:animate-out exiting:fade-out-0 exiting:slide-out-to-bottom-1/2 exiting:slide-out-to-left-1/2 exiting:[transition-timing-function:ease] sm:exiting:slide-out-to-top-[4rem]\"\n    ],\n    closeButton: [\n      \"absolute right-3 top-1.5 [&>span>[data-slot=icon]]:text-muted-fg pressed:[&_[data-slot=icon]]:text-fg lg:top-3.5 rounded-full border lg:border-border border-transparent lg:bg-secondary/50 py-2.5 px-2.5 lg:py-0.5 text-xs transition-opacity data-[state=open]:bg-secondary data-[state=open]:text-muted-fg lg:focus:border-fg/70 focus:outline-none lg:focus:ring-2 lg:focus:ring-ring disabled:pointer-events-none\",\n      \"focus:outline-none lg:focus:bg-primary/10 lg:focus:ring-2 lg:focus:ring-primary/20 lg:focus:border-primary/70\",\n      \"disabled:pointer-events-none\"\n    ],\n    empty: \"py-6 text-center text-sm text-muted-fg x3tmpy\",\n    kbdKeyboard: \"lg:block hidden group-data-[selected=true]:opacity-60\",\n    description: \"sm:inline hidden text-sm ml-auto\",\n    item: [\n      \"group relative flex forced-colors:outline-0 cursor-default select-none text-fg items-center rounded-lg py-2 text-sm outline-none\",\n      \"data-[selected=true]:bg-accent forced-colors:data-[selected=true]:bg-[Highlight] forced-colors:data-[selected=true]:text-[ActiveCaption] forced-colors:text-[WindowText] data-[selected=true]:text-accent-fg [&[data-selected=true]_[data-slot=icon]]:text-accent-fg\",\n      \"focus-visible:bg-accent focus-visible:text-accent-fg [&:focus-visible_[data-slot=icon]]:text-accent-fg\",\n      \"data-[danger=true]:text-danger data-[danger=true]:data-[selected=true]:bg-danger data-[danger=true]:data-[selected=true]:text-danger-fg\",\n      \"data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50\",\n      \"[&_[data-slot=icon]]:mr-2 [&_[data-slot=icon]]:size-[1.10rem] [&_[data-slot=icon]]:shrink-0 [&_[data-slot=icon]]:text-muted-fg\",\n      \"[&_[data-slot=avatar]]:mr-2 [&_[data-slot=avatar]]:size-[1.10rem] [&_[data-slot=avatar]]:shrink-0\",\n      \"forced-colors:[&_[data-slot=icon]]:text-[CanvasText] forced-colors:[&_[data-slot=icon]]:group-data-[focus]:text-[Canvas] \"\n    ]\n  },\n\n  variants: {\n    isDanger: {\n      true: \"text-danger data-[selected=true]:bg-danger data-[selected=true]:text-danger-fg [&[data-selected=true]_[data-slot=icon]]:text-danger-fg\"\n    }\n  }\n})\n\nconst { command, empty, section, list, item, closeButton, modal, input, kbdKeyboard, description } =\n  commandStyles()\n\ninterface CommandMenuContextProps {\n  hideSearchIndicator?: boolean\n  hideCloseButton?: boolean\n  messageOnEmpty?: boolean | string\n  isBlurred?: boolean\n}\n\nconst CommandMenuContext = React.createContext<CommandMenuContextProps>({})\n\ninterface CommandMenuRootProps {\n  CommandMenuEmpty?: typeof CommandMenuEmpty\n  CommandMenuInput?: typeof CommandMenuInput\n  CommandMenuItem?: typeof CommandMenuItem\n  CommandMenuKeyboard?: typeof CommandMenuKeyboard\n  CommandMenuList?: typeof CommandMenuList\n  CommandMenuSection?: typeof CommandMenuSection\n  CommandMenuSeparator?: typeof CommandMenuSeparator\n  CommandMenuDescription?: typeof CommandMenuDescription\n}\n\nconst modalOverlay = tv({\n  base: [\n    \"fixed inset-0 max-h-[--visual-viewport-height] z-50 bg-dark/15 dark:bg-dark/40 entering:animate-in entering:fade-in-0 exiting:animate-in exiting:fade-out-0\"\n  ],\n  variants: {\n    isBlurred: {\n      true: \"backdrop-blur\",\n      false: \"bg-dark/15 dark:bg-dark/40\"\n    }\n  }\n})\ninterface CommandMenuProps\n  extends ModalOverlayProps,\n    CommandMenuRootProps,\n    CommandMenuContextProps {\n  children: React.ReactNode\n  value?: string\n  messageOnEmpty?: boolean | string\n  onValueChange?: (value: string) => void\n  classNames?: {\n    overlay?: string\n    content?: string\n  }\n}\n\nconst CommandMenu = ({\n  classNames,\n  hideSearchIndicator = false,\n  hideCloseButton = false,\n  messageOnEmpty,\n  value,\n  onValueChange,\n  children,\n  isBlurred = false,\n  ...props\n}: CommandMenuProps) => {\n  const isDesktop = useMediaQuery(\"(min-width: 1024px)\")\n\n  return (\n    <CommandMenuContext.Provider value={{ hideSearchIndicator, hideCloseButton, messageOnEmpty }}>\n      <ModalOverlay\n        isDismissable\n        className={modalOverlay({\n          isBlurred,\n          className: classNames?.overlay\n        })}\n        {...props}\n      >\n        <Modal className={modal({ className: classNames?.content })}>\n          <Dialog className=\"outline-none\" aria-label=\"Command Palette\">\n            {({ close }) => (\n              <>\n                <CommandPrimitive value={value} onValueChange={onValueChange} className={command()}>\n                  {children}\n                </CommandPrimitive>\n                {!hideCloseButton && (\n                  <Button autoFocus={!isDesktop} onPress={close} className={closeButton()}>\n                    <span className=\"lg:block hidden\">Esc</span>\n                    <span className=\"lg:hidden -mr-2 block\">\n                      <IconX />\n                      <span className=\"sr-only\">Close command palette</span>\n                    </span>\n                  </Button>\n                )}\n              </>\n            )}\n          </Dialog>\n        </Modal>\n      </ModalOverlay>\n    </CommandMenuContext.Provider>\n  )\n}\n\ntype CommandMenuInputProps = React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n\nconst CommandMenuInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  CommandMenuInputProps\n>(({ className, ...props }, ref) => {\n  const { hideSearchIndicator } = React.useContext(CommandMenuContext)\n  return (\n    <div className=\"flex border-b items-center px-3\">\n      {!hideSearchIndicator && <IconSearch className=\"mr-2 size-5 shrink-0 opacity-50\" />}\n      <CommandPrimitive.Input\n        autoFocus\n        ref={ref}\n        className={input({ className: hideSearchIndicator ? \"pl-1\" : className })}\n        {...props}\n      />\n    </div>\n  )\n})\n\nCommandMenuInput.displayName = CommandPrimitive.Input.displayName\n\ntype CommandMenuListProps = React.ComponentProps<typeof CommandPrimitive.List>\n\nconst CommandMenuList = ({ className, ...props }: CommandMenuListProps) => {\n  const { messageOnEmpty } = React.useContext(CommandMenuContext)\n  return (\n    <CommandPrimitive.List className={list({ className })} {...props}>\n      {messageOnEmpty !== false && (\n        <CommandMenuEmpty>\n          {typeof messageOnEmpty === \"string\" ? messageOnEmpty : \"No results found.\"}\n        </CommandMenuEmpty>\n      )}\n      {props.children}\n    </CommandPrimitive.List>\n  )\n}\n\ntype CommandMenuEmptyProps = React.ComponentProps<typeof CommandPrimitive.Empty>\n\nconst CommandMenuEmpty = ({ className, ...props }: CommandMenuEmptyProps) => {\n  return <CommandPrimitive.Empty className={empty({ className })} {...props} />\n}\n\ninterface CommandSectionProps extends React.ComponentProps<typeof CommandPrimitive.Group> {\n  separator?: boolean\n}\n\nconst CommandMenuSection = ({ className, separator, ...props }: CommandSectionProps) => {\n  return (\n    <>\n      <CommandPrimitive.Group className={section({ className })} {...props}>\n        {props.children}\n        {separator && <CommandMenuSeparator className=\"mt-2\" />}\n      </CommandPrimitive.Group>\n    </>\n  )\n}\n\nconst CommandMenuSeparator = ({ className, ...props }: SeparatorProps) => {\n  return (\n    <div className=\"-mx-4 s3xsprt\">\n      <Separator className={className} {...props} orientation=\"horizontal\" />\n    </div>\n  )\n}\n\ninterface CommandItemProps extends React.ComponentProps<typeof CommandPrimitive.Item> {\n  isDanger?: boolean\n}\n\nconst CommandMenuItem = ({ isDanger, className, ...props }: CommandItemProps) => {\n  return (\n    <CommandPrimitive.Item\n      data-danger={isDanger ? \"true\" : undefined}\n      className={item({ isDanger, className })}\n      {...props}\n    />\n  )\n}\n\ninterface CommandMenuDescriptionProps extends TextProps {\n  intent?: \"danger\" | \"warning\" | \"primary\" | \"secondary\" | \"success\"\n}\n\nconst CommandMenuDescription = ({ intent, className, ...props }: CommandMenuDescriptionProps) => {\n  return (\n    <Text\n      {...props}\n      slot=\"description\"\n      className={description({\n        className: twJoin(\n          intent === \"danger\"\n            ? \"group-data-[selected=true]:text-accent-fg/70 text-danger/90\"\n            : intent === \"warning\"\n              ? \"group-data-[selected=true]:text-accent-fg/70 text-warning/90\"\n              : intent === \"success\"\n                ? \"group-data-[selected=true]:text-accent-fg/70 text-success/90\"\n                : intent === \"primary\"\n                  ? \"group-data-[selected=true]:text-white/70 text-accent/90\"\n                  : \"group-data-[selected=true]:text-accent-fg/70 text-muted-fg\",\n          className\n        )\n      })}\n    />\n  )\n}\n\nconst CommandMenuKeyboard = (props: KeyboardProps) => (\n  <Keyboard classNames={{ kbd: kbdKeyboard(), base: \"-mr-2.5\" }} {...props} />\n)\n\nCommandMenu.Empty = CommandMenuEmpty\nCommandMenu.Input = CommandMenuInput\nCommandMenu.Item = CommandMenuItem\nCommandMenu.Keyboard = CommandMenuKeyboard\nCommandMenu.List = CommandMenuList\nCommandMenu.Section = CommandMenuSection\nCommandMenu.Separator = CommandMenuSeparator\nCommandMenu.Description = CommandMenuDescription\n\nexport { CommandMenu }\n",
    "type": "ui"
  },
  "toast": {
    "component": "@/components/ui/toast",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { useTheme } from \"@/components/theme-provider\"\nimport { IconCheck, IconCircleExclamationFill, IconTriangleExclamationFill } from \"justd-icons\"\nimport { Toaster as ToasterPrimitive, type ToasterProps } from \"sonner\"\nimport { twJoin } from \"tailwind-merge\"\n\nimport { buttonStyles } from \"./button\"\nimport { Loader } from \"./loader\"\n\nconst Toast = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n  return (\n    <ToasterPrimitive\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      icons={{\n        info: <IconCircleExclamationFill />,\n        success: <IconCheck />,\n        warning: <IconTriangleExclamationFill />,\n        error: <IconTriangleExclamationFill />,\n        loading: <Loader variant=\"spin\" />\n      }}\n      toastOptions={{\n        unstyled: true,\n        closeButton: true,\n        classNames: {\n          toast: twJoin(\n            \"bg-bg ring-1 ring-border dark:ring-inset sm:min-w-[22rem] rounded-xl text-fg overflow-hidden text-[0.925rem] backdrop-blur-xl px-4 py-3 font-normal sm:px-5 sm:py-5\",\n            \"[&:has([data-icon])_[data-content]]:ml-5\",\n            '[&:has([data-button])_[data-close-button=\"true\"]]:hidden',\n            \"[&:not([data-description])_[data-title]]:font-normal\",\n            \"[&:has([data-description])_[data-title]]:!font-medium [&:has([data-description])_[data-title]]:!text-lg\",\n            \"[&>[data-button]]:absolute [&>[data-button=true]]:bottom-4\",\n            \"[&>[data-action=true]]:right-4\",\n            \"[&>[data-cancel=true]]:left-4\"\n          ),\n          icon: \"absolute top-[1rem] sm:top-[1.50rem]\",\n          content: \"[&:not(:has(+button))]:pr-10 [&:has(+button)]:pb-11 md:[&:has(+button)]:pb-9\",\n          error:\n            \"bg-danger ring-danger-fg/10 text-white ring-inset [&>[data-close-button=true]>svg]:text-white\",\n          info: \"bg-info ring-info-fg/10 text-info-fg ring-inset [&>[data-close-button=true]>svg]:text-info-fg\",\n          warning:\n            \"bg-warning text-warning-fg ring-warning-fg/10 ring-inset [&>[data-close-button=true]>svg]:text-amber-950\",\n          success:\n            \"bg-primary ring-primary/50 text-primary-fg ring-inset [&>[data-close-button=true]>svg]:text-primary-fg\",\n          cancelButton: buttonStyles({\n            className: \"\",\n            size: \"extra-small\",\n            appearance: \"outline\"\n          }),\n          actionButton: buttonStyles({\n            className: \"self-end justify-self-end\",\n            size: \"extra-small\"\n          }),\n          closeButton: twJoin([\n            \"[&_svg]:size-5 size-8 absolute top-1/2 transform -translate-y-1/2 right-2 lg:right-3 left-auto grid place-content-center rounded-md !bg-transparent hover:!bg-dark/20 dark:hover:!bg-white/20 border-0 [&_svg]:text-fg\"\n          ])\n        }\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toast }\n",
    "type": "ui"
  },
  "checkbox": {
    "component": "@/components/ui/checkbox",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { IconCheck, IconMinus } from \"justd-icons\"\nimport {\n  Checkbox as CheckboxPrimitive,\n  CheckboxGroup as CheckboxGroupPrimitive,\n  type CheckboxGroupProps as CheckboxGroupPrimitiveProps,\n  type CheckboxProps as CheckboxPrimitiveProps,\n  type ValidationResult\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Description, FieldError, Label } from \"./field\"\nimport { cn, cr, ctr } from \"./primitive\"\n\ninterface CheckboxGroupProps extends CheckboxGroupPrimitiveProps {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst CheckboxGroup = (props: CheckboxGroupProps) => {\n  return (\n    <CheckboxGroupPrimitive {...props} className={ctr(props.className, \"flex flex-col gap-y-2\")}>\n      <Label>{props.label}</Label>\n      <>{props.children as React.ReactNode}</>\n      {props.description && <Description className=\"block\">{props.description}</Description>}\n      <FieldError>{props.errorMessage}</FieldError>\n    </CheckboxGroupPrimitive>\n  )\n}\n\nconst checkboxStyles = tv({\n  base: \"racc group flex items-center gap-2 text-sm transition\",\n  variants: {\n    isDisabled: {\n      false: \"opacity-100\",\n      true: \"opacity-50\"\n    }\n  }\n})\n\nconst boxStyles = tv({\n  base: \"flex size-4 [&>[data-slot=icon]]:size-3 flex-shrink-0 items-center justify-center rounded border text-bg transition\",\n  variants: {\n    isSelected: {\n      false: \"border-toggle bg-secondary\",\n      true: [\n        \"border-primary/70 bg-primary text-primary-fg\",\n        \"group-invalid:border-danger/70 group-invalid:bg-danger group-invalid:text-danger-fg\"\n      ]\n    },\n    isFocused: {\n      true: [\n        \"border-primary/70 ring-4 ring-primary/20\",\n        \"group-invalid:border-danger/70 group-invalid:text-danger-fg group-invalid:ring-danger/20\"\n      ]\n    },\n    isInvalid: {\n      true: \"border-danger/70 bg-danger/20 text-danger-fg ring-danger/20\"\n    }\n  }\n})\n\ninterface CheckboxProps extends CheckboxPrimitiveProps {\n  description?: string\n  label?: string\n}\n\nconst Checkbox = ({ className, ...props }: CheckboxProps) => {\n  return (\n    <CheckboxPrimitive\n      {...props}\n      className={cr(className, (className, renderProps) =>\n        checkboxStyles({ ...renderProps, className })\n      )}\n    >\n      {({ isSelected, isIndeterminate, ...renderProps }) => (\n        <div className={cn(\"flex gap-x-2\", props.description ? \"items-start\" : \"items-center\")}>\n          <div\n            className={boxStyles({\n              ...renderProps,\n              isSelected: isSelected || isIndeterminate,\n              className: props.description ? \"mt-1\" : \"mt-px\"\n            })}\n          >\n            {isIndeterminate ? <IconMinus /> : isSelected ? <IconCheck /> : null}\n          </div>\n\n          <div className=\"flex flex-col gap-1\">\n            <>\n              {props.label ? <Label>{props.label}</Label> : (props.children as React.ReactNode)}\n              {props.description && <Description>{props.description}</Description>}\n            </>\n          </div>\n        </div>\n      )}\n    </CheckboxPrimitive>\n  )\n}\n\nexport { Checkbox, CheckboxGroup }\n",
    "type": "ui"
  },
  "select": {
    "component": "@/components/ui/select",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type { Placement } from \"@react-types/overlays\"\nimport { IconChevronLgDown } from \"justd-icons\"\nimport type { ButtonProps } from \"react-aria-components\"\nimport {\n  Button,\n  Select as SelectPrimitive,\n  type SelectProps as SelectPrimitiveProps,\n  SelectValue,\n  type ValidationResult\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { DropdownItem, DropdownItemDetails, DropdownSection } from \"./dropdown\"\nimport { Description, FieldError, Label } from \"./field\"\nimport { ListBox } from \"./list-box\"\nimport { Popover } from \"./popover\"\nimport { cr, ctr, focusStyles } from \"./primitive\"\n\nconst selectTriggerStyles = tv({\n  extend: focusStyles,\n  base: [\n    \"btr group-disabled:bg-secondary [&_[data-slot=icon]]:size-4 group-disabled:opacity-50 focus-visible:border-ring/85 focus-visible:ring-4 focus-visible:ring-primary/20 group-open:border-ring/85 group-open:ring-4 group-open:ring-ring/20 flex h-10 w-full cursor-default items-center gap-4 rounded-lg border border-input bg-bg py-2 pl-3 pr-2 text-start shadow-[inset_0_1px_0_0_rgba(255,255,255,0.1)] transition dark:shadow-none\"\n  ],\n  variants: {\n    isDisabled: {\n      false:\n        \"text-fg group-invalid:border-danger group-invalid:ring-danger/20 forced-colors:group-invalid:border-[Mark]\",\n      true: \"bg-secondary text-muted-fg forced-colors:border-[GrayText] forced-colors:text-[GrayText]\"\n    }\n  }\n})\n\ninterface SelectProps<T extends object> extends SelectPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  items?: Iterable<T>\n  className?: string\n}\n\nconst Select = <T extends object>({\n  label,\n  description,\n  errorMessage,\n  children,\n  className,\n  ...props\n}: SelectProps<T>) => {\n  return (\n    <SelectPrimitive {...props} className={ctr(className, \"group flex w-full flex-col gap-y-1.5\")}>\n      {label && <Label>{label}</Label>}\n      <>{children as React.ReactNode}</>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </SelectPrimitive>\n  )\n}\n\ninterface ListProps<T extends object> {\n  items?: Iterable<T>\n  placement?: Placement\n  children: React.ReactNode | ((item: T) => React.ReactNode)\n  className?: string\n}\n\nconst List = <T extends object>({ className, children, items, placement }: ListProps<T>) => {\n  return (\n    <Popover.Picker className={className} trigger=\"Select\" placement={placement}>\n      <ListBox.Picker aria-label=\"items\" items={items}>\n        {children}\n      </ListBox.Picker>\n    </Popover.Picker>\n  )\n}\n\ninterface TriggerProps extends ButtonProps {\n  prefix?: React.ReactNode\n  className?: string\n}\n\nconst Trigger = ({ className, ...props }: TriggerProps) => {\n  return (\n    <Button\n      className={cr(className, (className, renderProps) =>\n        selectTriggerStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    >\n      {props.prefix && <span className=\"-mr-1\">{props.prefix}</span>}\n      <SelectValue className=\"flex-1 [&_[slot=description]]:hidden text-base placeholder-shown:text-muted-fg lg:text-sm\" />\n      <IconChevronLgDown\n        aria-hidden\n        className=\"text-muted-fg shrink-0 size-4 duration-300 group-open:rotate-180 group-open:text-fg group-disabled:opacity-50 forced-colors:text-[ButtonText] forced-colors:group-disabled:text-[GrayText]\"\n      />\n    </Button>\n  )\n}\n\nSelect.OptionDetails = DropdownItemDetails\nSelect.Option = DropdownItem\nSelect.Section = DropdownSection\nSelect.Trigger = Trigger\nSelect.List = List\n\nexport { Select }\n",
    "type": "ui"
  },
  "textarea": {
    "component": "@/components/ui/textarea",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport {\n  TextArea as TextAreaPrimitive,\n  TextField as TextFieldPrimitive,\n  type TextFieldProps as TextFieldPrimitiveProps,\n  type ValidationResult\n} from \"react-aria-components\"\nimport { tv } from \"tailwind-variants\"\n\nimport { Description, FieldError, Label } from \"./field\"\nimport { cr, ctr, focusStyles } from \"./primitive\"\n\nconst textareaStyles = tv({\n  extend: focusStyles,\n  base: \"w-full min-w-0 rounded-lg border border-input bg-bg px-2.5 py-2 text-base shadow-sm outline-none transition duration-200 disabled:bg-secondary disabled:opacity-50 sm:text-sm\"\n})\n\ninterface TextareaProps extends TextFieldPrimitiveProps {\n  autoSize?: boolean\n  label?: string\n  placeholder?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  className?: string\n}\n\nconst Textarea = ({\n  className,\n  placeholder,\n  label,\n  description,\n  errorMessage,\n  ...props\n}: TextareaProps) => {\n  return (\n    <TextFieldPrimitive {...props} className={ctr(className, \"group flex flex-col gap-y-1.5\")}>\n      {label && <Label>{label}</Label>}\n      <TextAreaPrimitive\n        placeholder={placeholder}\n        className={cr(className, (className, renderProps) =>\n          textareaStyles({\n            ...renderProps,\n            className\n          })\n        )}\n      />\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </TextFieldPrimitive>\n  )\n}\n\nexport { Textarea, type TextareaProps }\n",
    "type": "ui"
  },
  "color-area": {
    "component": "@/components/ui/color-area",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport {\n  ColorArea as ColorAreaPrimitive,\n  type ColorAreaProps as ColorAreaPropsPrimitive\n} from \"react-aria-components\"\n\nimport { ColorThumb } from \"./color-thumb\"\nimport { ctr } from \"./primitive\"\n\ntype ColorAreaProps = ColorAreaPropsPrimitive\n\nconst ColorArea = ({ className, ...props }: ColorAreaProps) => {\n  return (\n    <ColorAreaPrimitive\n      {...props}\n      data-slot=\"color-area\"\n      className={ctr(className, \"size-56 shrink-0 rounded-md bg-muted forced-colors:bg-[GrayText]\")}\n      style={({ defaultStyle, isDisabled }) => ({\n        ...defaultStyle,\n        background: isDisabled ? undefined : defaultStyle.background\n      })}\n    >\n      <ColorThumb />\n    </ColorAreaPrimitive>\n  )\n}\n\nexport { ColorArea }\n",
    "type": "ui"
  },
  "loading-dots": {
    "component": "@/components/ui/loading-dots",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"./primitive\"\n\nconst dots = \"mx-[1px] inline-block size-[0.3125rem] animate-blink rounded-md\"\n\nexport const LoadingDots = ({ className }: { className: string }) => {\n  return (\n    <span className=\"mx-2 inline-flex items-center\">\n      <span className={cn(dots, className)} />\n      <span className={cn(dots, \"animation-delay-[200ms]\", className)} />\n      <span className={cn(dots, \"animation-delay-[400ms]\", className)} />\n    </span>\n  )\n}\n",
    "type": "ui"
  },
  "skeleton": {
    "component": "@/components/ui/skeleton",
    "raw": "import React from \"react\"\n\nimport { tv } from \"tailwind-variants\"\n\nconst skeletonStyles = tv({\n  base: \"animate-pulse shrink-0\",\n  variants: {\n    intent: {\n      muted: \"bg-fg/20\",\n      lighter: \"bg-fg/15\"\n    },\n    shape: {\n      circle: \"rounded-full\",\n      square: \"rounded-lg\"\n    }\n  },\n  defaultVariants: {\n    intent: \"muted\",\n    shape: \"square\"\n  }\n})\n\ninterface SkeletonProps extends React.HTMLAttributes<HTMLDivElement> {\n  intent?: \"muted\" | \"lighter\"\n  shape?: \"circle\" | \"square\"\n}\nconst Skeleton = ({ shape, intent, className, ...props }: SkeletonProps) => {\n  return <div className={skeletonStyles({ shape, intent, className })} {...props} />\n}\n\nexport { Skeleton }\n",
    "type": "ui"
  },
  "context-menu": {
    "component": "@/components/ui/context-menu",
    "raw": "\"use client\"\n\nimport React from \"react\"\n\nimport { tv } from \"tailwind-variants\"\n\nimport type { MenuContentProps } from \"./menu\"\nimport { Menu } from \"./menu\"\nimport { focusButtonStyles } from \"./primitive\"\n\ninterface ContextMenuTriggerContextType {\n  buttonRef: React.RefObject<HTMLButtonElement | null>\n  contextMenuOffset: { offset: number; crossOffset: number } | null\n  setContextMenuOffset: React.Dispatch<\n    React.SetStateAction<{ offset: number; crossOffset: number } | null>\n  >\n}\n\nconst ContextMenuTriggerContext = React.createContext<ContextMenuTriggerContextType | undefined>(\n  undefined\n)\n\nconst useContextMenuTrigger = () => {\n  const context = React.useContext(ContextMenuTriggerContext)\n  if (!context) {\n    throw new Error(\"useContextMenuTrigger must be used within a ContextMenuTrigger\")\n  }\n  return context\n}\n\ninterface ContextMenuRootComponent {\n  children: React.ReactNode\n}\n\nconst ContextMenu = ({ children }: ContextMenuRootComponent) => {\n  const [contextMenuOffset, setContextMenuOffset] = React.useState<{\n    offset: number\n    crossOffset: number\n  } | null>(null)\n  const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n  return (\n    <ContextMenuTriggerContext.Provider\n      value={{ buttonRef, contextMenuOffset, setContextMenuOffset }}\n    >\n      {children}\n    </ContextMenuTriggerContext.Provider>\n  )\n}\n\nconst contextMenuTriggerStyles = tv({\n  extend: focusButtonStyles,\n  base: \"focus:outline-none cursor-default\",\n  variants: {\n    isDisabled: {\n      false: \"forced-colors:disabled:text-[GrayText]\",\n      true: \"cursor-default opacity-60 forced-colors:disabled:text-[GrayText]\"\n    }\n  }\n})\n\ntype ContextMenuTriggerProps = React.ButtonHTMLAttributes<HTMLButtonElement>\n\nconst ContextMenuTrigger = ({ className, ...props }: ContextMenuTriggerProps) => {\n  const { buttonRef, setContextMenuOffset } = useContextMenuTrigger()\n\n  const onContextMenu = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault()\n    const rect = e.currentTarget.getBoundingClientRect()\n    setContextMenuOffset({\n      offset: e.clientY - rect.bottom,\n      crossOffset: e.clientX - rect.left\n    })\n  }\n  return (\n    <button\n      className={contextMenuTriggerStyles({ isDisabled: props.disabled, className })}\n      ref={buttonRef}\n      aria-haspopup=\"menu\"\n      onContextMenu={onContextMenu}\n      {...props}\n    />\n  )\n}\n\ntype ContextMenuContentProps<T> = Omit<\n  MenuContentProps<T>,\n  \"showArrow\" | \"isOpen\" | \"onOpenChange\" | \"triggerRef\" | \"placement\" | \"shouldFlip\"\n>\n\nconst ContextMenuContent = <T extends object>(props: ContextMenuContentProps<T>) => {\n  const { contextMenuOffset, setContextMenuOffset, buttonRef } = useContextMenuTrigger()\n  return contextMenuOffset ? (\n    <Menu.Content\n      isOpen={!!contextMenuOffset}\n      onOpenChange={() => setContextMenuOffset(null)}\n      triggerRef={buttonRef}\n      shouldFlip={false}\n      placement=\"bottom left\"\n      offset={contextMenuOffset?.offset}\n      crossOffset={contextMenuOffset?.crossOffset}\n      onClose={() => setContextMenuOffset(null)}\n      {...props}\n    />\n  ) : null\n}\n\nContextMenu.Trigger = ContextMenuTrigger\nContextMenu.Content = ContextMenuContent\nContextMenu.Item = Menu.Item\nContextMenu.Separator = Menu.Separator\nContextMenu.ItemDetails = Menu.ItemDetails\nContextMenu.Section = Menu.Section\nContextMenu.Header = Menu.Header\nContextMenu.Keyboard = Menu.Keyboard\n\nexport { ContextMenu }\n",
    "type": "ui"
  },
  "color-field": {
    "component": "@/components/ui/color-field",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type {\n  ColorFieldProps as ColorFieldPrimitiveProps,\n  ValidationResult\n} from \"react-aria-components\"\nimport { ColorField as ColorFieldPrimitive } from \"react-aria-components\"\n\nimport { ColorPicker } from \"./color-picker\"\nimport { ColorSwatch } from \"./color-swatch\"\nimport { Description, FieldError, FieldGroup, Input, Label } from \"./field\"\nimport { ctr } from \"./primitive\"\n\ninterface ColorFieldProps extends ColorFieldPrimitiveProps {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  placeholder?: string\n  prefix?: React.ReactNode\n  suffix?: React.ReactNode\n  isLoading?: boolean\n  enableColorPicker?: boolean\n}\n\nconst ColorField = ({\n  label,\n  description,\n  errorMessage,\n  placeholder,\n  prefix,\n  suffix,\n  isLoading,\n  enableColorPicker = true,\n  className,\n  ...props\n}: ColorFieldProps) => {\n  const value = props.value ?? props.defaultValue\n  return (\n    <ColorFieldPrimitive\n      {...props}\n      aria-label={props[\"aria-label\"] ?? \"Color field\"}\n      className={ctr(\n        className,\n        \"[&_[data-slot=color-swatch]]:-ml-0.5 group w-full flex flex-col gap-y-1\"\n      )}\n    >\n      {label && <Label>{label}</Label>}\n      <FieldGroup data-loading={isLoading ? \"true\" : undefined}>\n        {prefix ? (\n          <span data-slot=\"prefix\" className=\"atrs\">\n            {prefix}\n          </span>\n        ) : null}\n        <div className=\"flex items-center\">\n          {value && (\n            <span className=\"ml-2\">\n              {enableColorPicker ? (\n                <ColorPicker onChange={props.onChange} defaultValue={value} />\n              ) : (\n                <ColorSwatch className=\"size-6\" color={value.toString(\"hex\")} />\n              )}\n            </span>\n          )}\n\n          <Input placeholder={placeholder} />\n        </div>\n        {suffix ? (\n          <span data-slot=\"suffix\" className=\"atrs ml-auto\">\n            {suffix}\n          </span>\n        ) : null}\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </ColorFieldPrimitive>\n  )\n}\n\nexport { ColorField }\n",
    "type": "ui"
  },
  "form": {
    "component": "@/components/ui/form",
    "raw": "\"use client\"\n\nimport type { FormProps } from \"react-aria-components\"\nimport { Form as FormPrimitive } from \"react-aria-components\"\n\nconst Form = (props: FormProps) => {\n  return <FormPrimitive {...props} />\n}\n\nexport { Form }\n",
    "type": "ui"
  },
  "carousel": {
    "component": "@/components/ui/carousel",
    "raw": "\"use client\"\n\nimport * as React from \"react\"\n\nimport useEmblaCarousel, { type UseEmblaCarouselType } from \"embla-carousel-react\"\nimport { IconChevronLgLeft, IconChevronLgRight } from \"justd-icons\"\nimport type { ListBoxItemProps, SectionProps } from \"react-aria-components\"\nimport { ListBox, ListBoxItem, ListBoxSection } from \"react-aria-components\"\n\nimport type { ButtonProps } from \"./button\"\nimport { Button } from \"./button\"\nimport { cn } from \"./primitive\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nconst useCarousel = () => {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\ninterface CarouselRootProps {\n  CarouselContent?: typeof CarouselContent\n  CarouselHandler?: typeof CarouselHandler\n  CarouselItem?: typeof CarouselItem\n  CarouselButton?: typeof CarouselButton\n}\n\ninterface CarouselProps extends React.HTMLAttributes<HTMLDivElement>, CarouselRootProps {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\nconst Carousel = ({\n  orientation = \"horizontal\",\n  opts,\n  setApi,\n  plugins,\n  className,\n  children,\n  ...props\n}: CarouselProps) => {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === \"horizontal\" ? \"x\" : \"y\"\n    },\n    plugins\n  )\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) {\n      return\n    }\n\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === \"ArrowLeft\") {\n        event.preventDefault()\n        scrollPrev()\n      } else if (event.key === \"ArrowRight\") {\n        event.preventDefault()\n        scrollNext()\n      }\n    },\n    [scrollPrev, scrollNext]\n  )\n\n  React.useEffect(() => {\n    if (!api || !setApi) {\n      return\n    }\n\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) {\n      return\n    }\n\n    onSelect(api)\n    api.on(\"reInit\", onSelect)\n    api.on(\"select\", onSelect)\n\n    return () => {\n      api?.off(\"select\", onSelect)\n    }\n  }, [api, onSelect])\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation: orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext\n      }}\n    >\n      <div\n        onKeyDownCapture={handleKeyDown}\n        className={cn(\"relative\", className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  )\n}\n\nconst CarouselContent = <T extends object>({ className, ...props }: SectionProps<T>) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <ListBox\n      layout={orientation === \"vertical\" ? \"stack\" : \"grid\"}\n      aria-label=\"Slides\"\n      orientation={orientation}\n      ref={carouselRef}\n      className=\"overflow-hidden\"\n    >\n      <ListBoxSection\n        className={cn(\"flex\", orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\", className)}\n        {...props}\n      />\n    </ListBox>\n  )\n}\n\nconst CarouselItem = ({ className, ...props }: ListBoxItemProps) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <ListBoxItem\n      aria-label={`Slide ${props.id}`}\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 xd24r shrink-0 focus:outline-none grow-0 basis-full focus-visible:outline-none\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nconst CarouselHandler = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { orientation } = useCarousel()\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"mt-6 z-10 relative flex items-center gap-x-2\",\n          orientation === \"horizontal\" ? \"justify-end\" : \"justify-center\",\n          className\n        )}\n        {...props}\n      />\n    )\n  }\n)\nCarouselHandler.displayName = \"CarouselHandler\"\n\nconst CarouselButton = ({\n  slot,\n  className,\n  intent = \"secondary\",\n  appearance = \"outline\",\n  shape = \"circle\",\n  size = \"square-petite\",\n  ...props\n}: ButtonProps & { slot: \"previous\" | \"next\" }) => {\n  const { orientation, scrollPrev, canScrollPrev, scrollNext, canScrollNext } = useCarousel()\n  const isNext = slot === \"next\"\n  const canScroll = isNext ? canScrollNext : canScrollPrev\n  const scroll = isNext ? scrollNext : scrollPrev\n  const Icon = isNext ? IconChevronLgRight : IconChevronLgLeft\n\n  return (\n    <Button\n      aria-label={isNext ? \"Next slide\" : \"Previous slide\"}\n      slot={slot}\n      intent={intent}\n      appearance={appearance}\n      size={size}\n      shape={shape}\n      className={cn(orientation === \"vertical\" ? \"rotate-90\" : \"\", className)}\n      isDisabled={!canScroll}\n      onPress={scroll}\n      {...props}\n    >\n      <Icon className=\"size-4\" />\n    </Button>\n  )\n}\n\nCarousel.Content = CarouselContent\nCarousel.Handler = CarouselHandler\nCarousel.Item = CarouselItem\nCarousel.Button = CarouselButton\n\nexport { Carousel, type CarouselApi }\n",
    "type": "ui"
  }
}
